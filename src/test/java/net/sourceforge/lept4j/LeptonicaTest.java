/*
 * Copyright 2015 Quan Nguyen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sourceforge.lept4j;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import java.io.File;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import net.sourceforge.lept4j.util.LeptUtils;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class LeptonicaTest {
    
    private final String testResourcesPath = "src/test/resources/test-data";
    
    Leptonica instance;

    public LeptonicaTest() {
    }
    
    @BeforeAll
    public static void setUpClass() {
    }
    
    @AfterAll
    public static void tearDownClass() {
    }
    
    @BeforeEach
    public void setUp() {
        instance = new LeptonicaImpl().getInstance();
    }
    
    @AfterEach
    public void tearDown() {
    }

//    /**
//     * Test of pixBackgroundNormSimple method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormSimple() {
//        System.out.println("pixBackgroundNormSimple");
//        Pix pixs = null;
//        Pix pixim = null;
//        Pix pixg = null;

//        Pix expResult = null;
//        Pix result = instance.pixBackgroundNormSimple(pixs, pixim, pixg);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNorm method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNorm() {
//        System.out.println("pixBackgroundNorm");
//        Pix pixs = null;
//        Pix pixim = null;
//        Pix pixg = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        int bgval = 0;
//        int smoothx = 0;
//        int smoothy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBackgroundNorm(pixs, pixim, pixg, sx, sy, thresh, mincount, bgval, smoothx, smoothy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormMorph() {
//        System.out.println("pixBackgroundNormMorph");
//        Pix pixs = null;
//        Pix pixim = null;
//        int reduction = 0;
//        int size = 0;
//        int bgval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBackgroundNormMorph(pixs, pixim, reduction, size, bgval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormGrayArray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormGrayArray() {
//        System.out.println("pixBackgroundNormGrayArray");
//        Pix pixs = null;
//        Pix pixim = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        int bgval = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixBackgroundNormGrayArray(pixs, pixim, sx, sy, thresh, mincount, bgval, smoothx, smoothy, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormRGBArrays method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormRGBArrays() {
//        System.out.println("pixBackgroundNormRGBArrays");
//        Pix pixs = null;
//        Pix pixim = null;
//        Pix pixg = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        int bgval = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        Pix.ByReference[] ppixr = null;
//        Pix.ByReference[] ppixg = null;
//        Pix.ByReference[] ppixb = null;

//        int expResult = 0;
//        int result = instance.pixBackgroundNormRGBArrays(pixs, pixim, pixg, sx, sy, thresh, mincount, bgval, smoothx, smoothy, ppixr, ppixg, ppixb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormGrayArrayMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormGrayArrayMorph() {
//        System.out.println("pixBackgroundNormGrayArrayMorph");
//        Pix pixs = null;
//        Pix pixim = null;
//        int reduction = 0;
//        int size = 0;
//        int bgval = 0;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixBackgroundNormGrayArrayMorph(pixs, pixim, reduction, size, bgval, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormRGBArraysMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormRGBArraysMorph() {
//        System.out.println("pixBackgroundNormRGBArraysMorph");
//        Pix pixs = null;
//        Pix pixim = null;
//        int reduction = 0;
//        int size = 0;
//        int bgval = 0;
//        Pix.ByReference[] ppixr = null;
//        Pix.ByReference[] ppixg = null;
//        Pix.ByReference[] ppixb = null;

//        int expResult = 0;
//        int result = instance.pixBackgroundNormRGBArraysMorph(pixs, pixim, reduction, size, bgval, ppixr, ppixg, ppixb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBackgroundGrayMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBackgroundGrayMap() {
//        System.out.println("pixGetBackgroundGrayMap");
//        Pix pixs = null;
//        Pix pixim = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixGetBackgroundGrayMap(pixs, pixim, sx, sy, thresh, mincount, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBackgroundRGBMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBackgroundRGBMap() {
//        System.out.println("pixGetBackgroundRGBMap");
//        Pix pixs = null;
//        Pix pixim = null;
//        Pix pixg = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        Pix.ByReference[] ppixmr = null;
//        Pix.ByReference[] ppixmg = null;
//        Pix.ByReference[] ppixmb = null;

//        int expResult = 0;
//        int result = instance.pixGetBackgroundRGBMap(pixs, pixim, pixg, sx, sy, thresh, mincount, ppixmr, ppixmg, ppixmb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBackgroundGrayMapMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBackgroundGrayMapMorph() {
//        System.out.println("pixGetBackgroundGrayMapMorph");
//        Pix pixs = null;
//        Pix pixim = null;
//        int reduction = 0;
//        int size = 0;
//        Pix.ByReference[] ppixm = null;

//        int expResult = 0;
//        int result = instance.pixGetBackgroundGrayMapMorph(pixs, pixim, reduction, size, ppixm);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBackgroundRGBMapMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBackgroundRGBMapMorph() {
//        System.out.println("pixGetBackgroundRGBMapMorph");
//        Pix pixs = null;
//        Pix pixim = null;
//        int reduction = 0;
//        int size = 0;
//        Pix.ByReference[] ppixmr = null;
//        Pix.ByReference[] ppixmg = null;
//        Pix.ByReference[] ppixmb = null;

//        int expResult = 0;
//        int result = instance.pixGetBackgroundRGBMapMorph(pixs, pixim, reduction, size, ppixmr, ppixmg, ppixmb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFillMapHoles method, of class Leptonica.
//     */
//    @Test
//    public void testPixFillMapHoles() {
//        System.out.println("pixFillMapHoles");
//        Pix pix = null;
//        int nx = 0;
//        int ny = 0;
//        int filltype = 0;

//        int expResult = 0;
//        int result = instance.pixFillMapHoles(pix, nx, ny, filltype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtendByReplication method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtendByReplication() {
//        System.out.println("pixExtendByReplication");
//        Pix pixs = null;
//        int addw = 0;
//        int addh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExtendByReplication(pixs, addw, addh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSmoothConnectedRegions method, of class Leptonica.
//     */
//    @Test
//    public void testPixSmoothConnectedRegions() {
//        System.out.println("pixSmoothConnectedRegions");
//        Pix pixs = null;
//        Pix pixm = null;
//        int factor = 0;

//        int expResult = 0;
//        int result = instance.pixSmoothConnectedRegions(pixs, pixm, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetInvBackgroundMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetInvBackgroundMap() {
//        System.out.println("pixGetInvBackgroundMap");
//        Pix pixs = null;
//        int bgval = 0;
//        int smoothx = 0;
//        int smoothy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGetInvBackgroundMap(pixs, bgval, smoothx, smoothy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixApplyInvBackgroundGrayMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixApplyInvBackgroundGrayMap() {
//        System.out.println("pixApplyInvBackgroundGrayMap");
//        Pix pixs = null;
//        Pix pixm = null;
//        int sx = 0;
//        int sy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixApplyInvBackgroundGrayMap(pixs, pixm, sx, sy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixApplyInvBackgroundRGBMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixApplyInvBackgroundRGBMap() {
//        System.out.println("pixApplyInvBackgroundRGBMap");
//        Pix pixs = null;
//        Pix pixmr = null;
//        Pix pixmg = null;
//        Pix pixmb = null;
//        int sx = 0;
//        int sy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixApplyInvBackgroundRGBMap(pixs, pixmr, pixmg, pixmb, sx, sy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixApplyVariableGrayMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixApplyVariableGrayMap() {
//        System.out.println("pixApplyVariableGrayMap");
//        Pix pixs = null;
//        Pix pixg = null;
//        int target = 0;

//        Pix expResult = null;
//        Pix result = instance.pixApplyVariableGrayMap(pixs, pixg, target);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGlobalNormRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixGlobalNormRGB() {
//        System.out.println("pixGlobalNormRGB");
//        Pix pixd = null;
//        Pix pixs = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        int mapval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGlobalNormRGB(pixd, pixs, rval, gval, bval, mapval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGlobalNormNoSatRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixGlobalNormNoSatRGB() {
//        System.out.println("pixGlobalNormNoSatRGB");
//        Pix pixd = null;
//        Pix pixs = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        int factor = 0;
//        float rank = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixGlobalNormNoSatRGB(pixd, pixs, rval, gval, bval, factor, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdSpreadNorm method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdSpreadNorm() {
//        System.out.println("pixThresholdSpreadNorm");
//        Pix pixs = null;
//        int filtertype = 0;
//        int edgethresh = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;
//        int targetthresh = 0;
//        Pix.ByReference[] ppixth = null;
//        Pix.ByReference[] ppixb = null;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixThresholdSpreadNorm(pixs, filtertype, edgethresh, smoothx, smoothy, gamma, minval, maxval, targetthresh, ppixth, ppixb, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBackgroundNormFlex method, of class Leptonica.
//     */
//    @Test
//    public void testPixBackgroundNormFlex() {
//        System.out.println("pixBackgroundNormFlex");
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        int delta = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBackgroundNormFlex(pixs, sx, sy, smoothx, smoothy, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixContrastNorm method, of class Leptonica.
//     */
//    @Test
//    public void testPixContrastNorm() {
//        System.out.println("pixContrastNorm");
//        Pix pixd = null;
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int mindiff = 0;
//        int smoothx = 0;
//        int smoothy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixContrastNorm(pixd, pixs, sx, sy, mindiff, smoothx, smoothy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMinMaxTiles method, of class Leptonica.
//     */
//    @Test
//    public void testPixMinMaxTiles() {
//        System.out.println("pixMinMaxTiles");
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int mindiff = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        Pix.ByReference[] ppixmin = null;
//        Pix.ByReference[] ppixmax = null;

//        int expResult = 0;
//        int result = instance.pixMinMaxTiles(pixs, sx, sy, mindiff, smoothx, smoothy, ppixmin, ppixmax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetLowContrast method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetLowContrast() {
//        System.out.println("pixSetLowContrast");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int mindiff = 0;

//        int expResult = 0;
//        int result = instance.pixSetLowContrast(pixs1, pixs2, mindiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixLinearTRCTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixLinearTRCTiled() {
//        System.out.println("pixLinearTRCTiled");
//        Pix pixd = null;
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        Pix pixmin = null;
//        Pix pixmax = null;

//        Pix expResult = null;
//        Pix result = instance.pixLinearTRCTiled(pixd, pixs, sx, sy, pixmin, pixmax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffineSampledPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffineSampledPta() {
//        System.out.println("pixAffineSampledPta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffineSampledPta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffineSampled method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffineSampled() {
//        System.out.println("pixAffineSampled");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffineSampled(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffinePta method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffinePta() {
//        System.out.println("pixAffinePta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffinePta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffine method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffine() {
//        System.out.println("pixAffine");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffine(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffinePtaColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffinePtaColor() {
//        System.out.println("pixAffinePtaColor");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffinePtaColor(pixs, ptad, ptas, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffineColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffineColor() {
//        System.out.println("pixAffineColor");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffineColor(pixs, vc, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffinePtaGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffinePtaGray() {
//        System.out.println("pixAffinePtaGray");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffinePtaGray(pixs, ptad, ptas, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffineGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffineGray() {
//        System.out.println("pixAffineGray");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffineGray(pixs, vc, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffinePtaWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffinePtaWithAlpha() {
//        System.out.println("pixAffinePtaWithAlpha");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        Pix pixg = null;
//        float fract = 0.0F;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffinePtaWithAlpha(pixs, ptad, ptas, pixg, fract, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getAffineXformCoeffs method, of class Leptonica.
//     */
//    @Test
//    public void testGetAffineXformCoeffs() {
//        System.out.println("getAffineXformCoeffs");
//        Pta ptas = null;
//        Pta ptad = null;
//        PointerByReference pvc = null;

//        int expResult = 0;
//        int result = instance.getAffineXformCoeffs(ptas, ptad, pvc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of affineInvertXform method, of class Leptonica.
//     */
//    @Test
//    public void testAffineInvertXform() {
//        System.out.println("affineInvertXform");
//        FloatBuffer vc = null;
//        PointerByReference pvci = null;

//        int expResult = 0;
//        int result = instance.affineInvertXform(vc, pvci);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of affineXformSampledPt method, of class Leptonica.
//     */
//    @Test
//    public void testAffineXformSampledPt() {
//        System.out.println("affineXformSampledPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer pxp = null;
//        IntBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.affineXformSampledPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of affineXformPt method, of class Leptonica.
//     */
//    @Test
//    public void testAffineXformPt() {
//        System.out.println("affineXformPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pxp = null;
//        FloatBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.affineXformPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of linearInterpolatePixelColor method, of class Leptonica.
//     */
//    @Test
//    public void testLinearInterpolatePixelColor() {
//        System.out.println("linearInterpolatePixelColor");
//        IntBuffer datas = null;
//        int wpls = 0;
//        int w = 0;
//        int h = 0;
//        float x = 0.0F;
//        float y = 0.0F;
//        int colorval = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.linearInterpolatePixelColor(datas, wpls, w, h, x, y, colorval, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of linearInterpolatePixelGray method, of class Leptonica.
//     */
//    @Test
//    public void testLinearInterpolatePixelGray() {
//        System.out.println("linearInterpolatePixelGray");
//        IntBuffer datas = null;
//        int wpls = 0;
//        int w = 0;
//        int h = 0;
//        float x = 0.0F;
//        float y = 0.0F;
//        int grayval = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.linearInterpolatePixelGray(datas, wpls, w, h, x, y, grayval, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gaussjordan method, of class Leptonica.
//     */
//    @Test
//    public void testGaussjordan() {
//        System.out.println("gaussjordan");
//        PointerByReference a = null;
//        FloatBuffer b = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.gaussjordan(a, b, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAffineSequential method, of class Leptonica.
//     */
//    @Test
//    public void testPixAffineSequential() {
//        System.out.println("pixAffineSequential");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int bw = 0;
//        int bh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAffineSequential(pixs, ptad, ptas, bw, bh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of createMatrix2dTranslate method, of class Leptonica.
//     */
//    @Test
//    public void testCreateMatrix2dTranslate() {
//        System.out.println("createMatrix2dTranslate");
//        float transx = 0.0F;
//        float transy = 0.0F;

//        FloatByReference expResult = null;
//        FloatByReference result = instance.createMatrix2dTranslate(transx, transy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of createMatrix2dScale method, of class Leptonica.
//     */
//    @Test
//    public void testCreateMatrix2dScale() {
//        System.out.println("createMatrix2dScale");
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        FloatByReference expResult = null;
//        FloatByReference result = instance.createMatrix2dScale(scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of createMatrix2dRotate method, of class Leptonica.
//     */
//    @Test
//    public void testCreateMatrix2dRotate() {
//        System.out.println("createMatrix2dRotate");
//        float xc = 0.0F;
//        float yc = 0.0F;
//        float angle = 0.0F;

//        FloatByReference expResult = null;
//        FloatByReference result = instance.createMatrix2dRotate(xc, yc, angle);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaTranslate method, of class Leptonica.
//     */
//    @Test
//    public void testPtaTranslate() {
//        System.out.println("ptaTranslate");
//        Pta ptas = null;
//        float transx = 0.0F;
//        float transy = 0.0F;

//        Pta expResult = null;
//        Pta result = instance.ptaTranslate(ptas, transx, transy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaScale method, of class Leptonica.
//     */
//    @Test
//    public void testPtaScale() {
//        System.out.println("ptaScale");
//        Pta ptas = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pta expResult = null;
//        Pta result = instance.ptaScale(ptas, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaRotate method, of class Leptonica.
//     */
//    @Test
//    public void testPtaRotate() {
//        System.out.println("ptaRotate");
//        Pta ptas = null;
//        float xc = 0.0F;
//        float yc = 0.0F;
//        float angle = 0.0F;

//        Pta expResult = null;
//        Pta result = instance.ptaRotate(ptas, xc, yc, angle);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaTranslate method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaTranslate() {
//        System.out.println("boxaTranslate");
//        Boxa boxas = null;
//        float transx = 0.0F;
//        float transy = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaTranslate(boxas, transx, transy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaScale method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaScale() {
//        System.out.println("boxaScale");
//        Boxa boxas = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaScale(boxas, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaRotate method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaRotate() {
//        System.out.println("boxaRotate");
//        Boxa boxas = null;
//        float xc = 0.0F;
//        float yc = 0.0F;
//        float angle = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaRotate(boxas, xc, yc, angle);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaAffineTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPtaAffineTransform() {
//        System.out.println("ptaAffineTransform");
//        Pta ptas = null;
//        FloatBuffer mat = null;

//        Pta expResult = null;
//        Pta result = instance.ptaAffineTransform(ptas, mat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaAffineTransform method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaAffineTransform() {
//        System.out.println("boxaAffineTransform");
//        Boxa boxas = null;
//        FloatBuffer mat = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaAffineTransform(boxas, mat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_productMatVec method, of class Leptonica.
//     */
//    @Test
//    public void testL_productMatVec() {
//        System.out.println("l_productMatVec");
//        FloatBuffer mat = null;
//        FloatBuffer vecs = null;
//        FloatBuffer vecd = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.l_productMatVec(mat, vecs, vecd, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_productMat2 method, of class Leptonica.
//     */
//    @Test
//    public void testL_productMat2() {
//        System.out.println("l_productMat2");
//        FloatBuffer mat1 = null;
//        FloatBuffer mat2 = null;
//        FloatBuffer matd = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.l_productMat2(mat1, mat2, matd, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_productMat3 method, of class Leptonica.
//     */
//    @Test
//    public void testL_productMat3() {
//        System.out.println("l_productMat3");
//        FloatBuffer mat1 = null;
//        FloatBuffer mat2 = null;
//        FloatBuffer mat3 = null;
//        FloatBuffer matd = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.l_productMat3(mat1, mat2, mat3, matd, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_productMat4 method, of class Leptonica.
//     */
//    @Test
//    public void testL_productMat4() {
//        System.out.println("l_productMat4");
//        FloatBuffer mat1 = null;
//        FloatBuffer mat2 = null;
//        FloatBuffer mat3 = null;
//        FloatBuffer mat4 = null;
//        FloatBuffer matd = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.l_productMat4(mat1, mat2, mat3, mat4, matd, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataBit method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataBit() {
//        System.out.println("l_getDataBit");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataBit(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataBit method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataBit() {
//        System.out.println("l_setDataBit");
//        Pointer line = null;
//        int n = 0;

//        instance.l_setDataBit(line, n);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_clearDataBit method, of class Leptonica.
//     */
//    @Test
//    public void testL_clearDataBit() {
//        System.out.println("l_clearDataBit");
//        Pointer line = null;
//        int n = 0;

//        instance.l_clearDataBit(line, n);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataBitVal method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataBitVal() {
//        System.out.println("l_setDataBitVal");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataBitVal(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataDibit method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataDibit() {
//        System.out.println("l_getDataDibit");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataDibit(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataDibit method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataDibit() {
//        System.out.println("l_setDataDibit");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataDibit(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_clearDataDibit method, of class Leptonica.
//     */
//    @Test
//    public void testL_clearDataDibit() {
//        System.out.println("l_clearDataDibit");
//        Pointer line = null;
//        int n = 0;

//        instance.l_clearDataDibit(line, n);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataQbit method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataQbit() {
//        System.out.println("l_getDataQbit");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataQbit(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataQbit method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataQbit() {
//        System.out.println("l_setDataQbit");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataQbit(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_clearDataQbit method, of class Leptonica.
//     */
//    @Test
//    public void testL_clearDataQbit() {
//        System.out.println("l_clearDataQbit");
//        Pointer line = null;
//        int n = 0;

//        instance.l_clearDataQbit(line, n);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataByte method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataByte() {
//        System.out.println("l_getDataByte");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataByte(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataByte method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataByte() {
//        System.out.println("l_setDataByte");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataByte(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataTwoBytes method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataTwoBytes() {
//        System.out.println("l_getDataTwoBytes");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataTwoBytes(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataTwoBytes method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataTwoBytes() {
//        System.out.println("l_setDataTwoBytes");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataTwoBytes(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getDataFourBytes method, of class Leptonica.
//     */
//    @Test
//    public void testL_getDataFourBytes() {
//        System.out.println("l_getDataFourBytes");
//        Pointer line = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.l_getDataFourBytes(line, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setDataFourBytes method, of class Leptonica.
//     */
//    @Test
//    public void testL_setDataFourBytes() {
//        System.out.println("l_setDataFourBytes");
//        Pointer line = null;
//        int n = 0;
//        int val = 0;

//        instance.l_setDataFourBytes(line, n, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of barcodeDispatchDecoder method, of class Leptonica.
//     */
//    @Test
//    public void testBarcodeDispatchDecoder() {
//        System.out.println("barcodeDispatchDecoder");
//        ByteBuffer barstr = null;
//        int format = 0;
//        int debugflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.barcodeDispatchDecoder(barstr, format, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of barcodeFormatIsSupported method, of class Leptonica.
//     */
//    @Test
//    public void testBarcodeFormatIsSupported() {
//        System.out.println("barcodeFormatIsSupported");
//        int format = 0;

//        int expResult = 0;
//        int result = instance.barcodeFormatIsSupported(format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindBaselines method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindBaselines() {
//        System.out.println("pixFindBaselines");
//        Pix pixs = null;
//        Pta.ByReference[] ppta = null;
//        int debug = 0;

//        Numa expResult = null;
//        Numa result = instance.pixFindBaselines(pixs, ppta, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDeskewLocal method, of class Leptonica.
//     */
//    @Test
//    public void testPixDeskewLocal() {
//        System.out.println("pixDeskewLocal");
//        Pix pixs = null;
//        int nslices = 0;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixDeskewLocal(pixs, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetLocalSkewTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetLocalSkewTransform() {
//        System.out.println("pixGetLocalSkewTransform");
//        Pix pixs = null;
//        int nslices = 0;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;
//        Pta.ByReference[] pptas = null;
//        Pta.ByReference[] pptad = null;

//        int expResult = 0;
//        int result = instance.pixGetLocalSkewTransform(pixs, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, pptas, pptad);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetLocalSkewAngles method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetLocalSkewAngles() {
//        System.out.println("pixGetLocalSkewAngles");
//        Pix pixs = null;
//        int nslices = 0;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;

//        Numa expResult = null;
//        Numa result = instance.pixGetLocalSkewAngles(pixs, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, pa, pb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferCreate method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferCreate() {
//        System.out.println("bbufferCreate");
//        ByteBuffer indata = null;
//        int nalloc = 0;

//        net.sourceforge.lept4j.ByteBuffer expResult = null;
//        net.sourceforge.lept4j.ByteBuffer result = instance.bbufferCreate(indata, nalloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferDestroy() {
//        System.out.println("bbufferDestroy");
//        net.sourceforge.lept4j.ByteBuffer.ByReference[] pbb = null;

//        instance.bbufferDestroy(pbb);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferDestroyAndSaveData method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferDestroyAndSaveData() {
//        System.out.println("bbufferDestroyAndSaveData");
//        net.sourceforge.lept4j.ByteBuffer.ByReference[] pbb = null;
//        NativeSizeByReference pnbytes = null;

//        Pointer expResult = null;
//        Pointer result = instance.bbufferDestroyAndSaveData(pbb, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferRead method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferRead() {
//        System.out.println("bbufferRead");
//        net.sourceforge.lept4j.ByteBuffer bb = null;
//        ByteBuffer src = null;
//        int nbytes = 0;

//        int expResult = 0;
//        int result = instance.bbufferRead(bb, src, nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferReadStream() {
//        System.out.println("bbufferReadStream");
//        net.sourceforge.lept4j.ByteBuffer bb = null;
//        PointerByReference fp = null;
//        int nbytes = 0;

//        int expResult = 0;
//        int result = instance.bbufferReadStream(bb, fp, nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferExtendArray method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferExtendArray() {
//        System.out.println("bbufferExtendArray");
//        net.sourceforge.lept4j.ByteBuffer bb = null;
//        int nbytes = 0;

//        int expResult = 0;
//        int result = instance.bbufferExtendArray(bb, nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferWrite method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferWrite() {
//        System.out.println("bbufferWrite");
//        net.sourceforge.lept4j.ByteBuffer bb = null;
//        ByteBuffer dest = null;
//        NativeSize nbytes = null;
//        NativeSizeByReference pnout = null;

//        int expResult = 0;
//        int result = instance.bbufferWrite(bb, dest, nbytes, pnout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bbufferWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testBbufferWriteStream() {
//        System.out.println("bbufferWriteStream");
//        net.sourceforge.lept4j.ByteBuffer bb = null;
//        PointerByReference fp = null;
//        NativeSize nbytes = null;
//        NativeSizeByReference pnout = null;

//        int expResult = 0;
//        int result = instance.bbufferWriteStream(bb, fp, nbytes, pnout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilateral method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilateral() {
//        System.out.println("pixBilateral");
//        Pix pixs = null;
//        float spatial_stdev = 0.0F;
//        float range_stdev = 0.0F;
//        int ncomps = 0;
//        int reduction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilateral(pixs, spatial_stdev, range_stdev, ncomps, reduction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilateralGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilateralGray() {
//        System.out.println("pixBilateralGray");
//        Pix pixs = null;
//        float spatial_stdev = 0.0F;
//        float range_stdev = 0.0F;
//        int ncomps = 0;
//        int reduction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilateralGray(pixs, spatial_stdev, range_stdev, ncomps, reduction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilateralExact method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilateralExact() {
//        System.out.println("pixBilateralExact");
//        Pix pixs = null;
//        L_Kernel spatial_kel = null;
//        L_Kernel range_kel = null;

//        Pix expResult = null;
//        Pix result = instance.pixBilateralExact(pixs, spatial_kel, range_kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilateralGrayExact method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilateralGrayExact() {
//        System.out.println("pixBilateralGrayExact");
//        Pix pixs = null;
//        L_Kernel spatial_kel = null;
//        L_Kernel range_kel = null;

//        Pix expResult = null;
//        Pix result = instance.pixBilateralGrayExact(pixs, spatial_kel, range_kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockBilateralExact method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockBilateralExact() {
//        System.out.println("pixBlockBilateralExact");
//        Pix pixs = null;
//        float spatial_stdev = 0.0F;
//        float range_stdev = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlockBilateralExact(pixs, spatial_stdev, range_stdev);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeRangeKernel method, of class Leptonica.
//     */
//    @Test
//    public void testMakeRangeKernel() {
//        System.out.println("makeRangeKernel");
//        float range_stdev = 0.0F;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.makeRangeKernel(range_stdev);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearSampledPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearSampledPta() {
//        System.out.println("pixBilinearSampledPta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearSampledPta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearSampled method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearSampled() {
//        System.out.println("pixBilinearSampled");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearSampled(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearPta() {
//        System.out.println("pixBilinearPta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearPta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinear method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinear() {
//        System.out.println("pixBilinear");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinear(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearPtaColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearPtaColor() {
//        System.out.println("pixBilinearPtaColor");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearPtaColor(pixs, ptad, ptas, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearColor() {
//        System.out.println("pixBilinearColor");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearColor(pixs, vc, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearPtaGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearPtaGray() {
//        System.out.println("pixBilinearPtaGray");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearPtaGray(pixs, ptad, ptas, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearGray() {
//        System.out.println("pixBilinearGray");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearGray(pixs, vc, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBilinearPtaWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixBilinearPtaWithAlpha() {
//        System.out.println("pixBilinearPtaWithAlpha");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        Pix pixg = null;
//        float fract = 0.0F;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBilinearPtaWithAlpha(pixs, ptad, ptas, pixg, fract, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getBilinearXformCoeffs method, of class Leptonica.
//     */
//    @Test
//    public void testGetBilinearXformCoeffs() {
//        System.out.println("getBilinearXformCoeffs");
//        Pta ptas = null;
//        Pta ptad = null;
//        PointerByReference pvc = null;

//        int expResult = 0;
//        int result = instance.getBilinearXformCoeffs(ptas, ptad, pvc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bilinearXformSampledPt method, of class Leptonica.
//     */
//    @Test
//    public void testBilinearXformSampledPt() {
//        System.out.println("bilinearXformSampledPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer pxp = null;
//        IntBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.bilinearXformSampledPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bilinearXformPt method, of class Leptonica.
//     */
//    @Test
//    public void testBilinearXformPt() {
//        System.out.println("bilinearXformPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pxp = null;
//        FloatBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.bilinearXformPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOtsuAdaptiveThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testPixOtsuAdaptiveThreshold() {
//        System.out.println("pixOtsuAdaptiveThreshold");
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        float scorefract = 0.0F;
//        Pix.ByReference[] ppixth = null;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixOtsuAdaptiveThreshold(pixs, sx, sy, smoothx, smoothy, scorefract, ppixth, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOtsuThreshOnBackgroundNorm method, of class Leptonica.
//     */
//    @Test
//    public void testPixOtsuThreshOnBackgroundNorm() {
//        System.out.println("pixOtsuThreshOnBackgroundNorm");
//        Pix pixs = null;
//        Pix pixim = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        int bgval = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        float scorefract = 0.0F;
//        IntBuffer pthresh = null;

//        Pix expResult = null;
//        Pix result = instance.pixOtsuThreshOnBackgroundNorm(pixs, pixim, sx, sy, thresh, mincount, bgval, smoothx, smoothy, scorefract, pthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMaskedThreshOnBackgroundNorm method, of class Leptonica.
//     */
//    @Test
//    public void testPixMaskedThreshOnBackgroundNorm() {
//        System.out.println("pixMaskedThreshOnBackgroundNorm");
//        Pix pixs = null;
//        Pix pixim = null;
//        int sx = 0;
//        int sy = 0;
//        int thresh = 0;
//        int mincount = 0;
//        int smoothx = 0;
//        int smoothy = 0;
//        float scorefract = 0.0F;
//        IntBuffer pthresh = null;

//        Pix expResult = null;
//        Pix result = instance.pixMaskedThreshOnBackgroundNorm(pixs, pixim, sx, sy, thresh, mincount, smoothx, smoothy, scorefract, pthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSauvolaBinarizeTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixSauvolaBinarizeTiled() {
//        System.out.println("pixSauvolaBinarizeTiled");
//        Pix pixs = null;
//        int whsize = 0;
//        float factor = 0.0F;
//        int nx = 0;
//        int ny = 0;
//        Pix.ByReference[] ppixth = null;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixSauvolaBinarizeTiled(pixs, whsize, factor, nx, ny, ppixth, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSauvolaBinarize method, of class Leptonica.
//     */
//    @Test
//    public void testPixSauvolaBinarize() {
//        System.out.println("pixSauvolaBinarize");
//        Pix pixs = null;
//        int whsize = 0;
//        float factor = 0.0F;
//        int addborder = 0;
//        Pix.ByReference[] ppixm = null;
//        Pix.ByReference[] ppixsd = null;
//        Pix.ByReference[] ppixth = null;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixSauvolaBinarize(pixs, whsize, factor, addborder, ppixm, ppixsd, ppixth, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSauvolaGetThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testPixSauvolaGetThreshold() {
//        System.out.println("pixSauvolaGetThreshold");
//        Pix pixm = null;
//        Pix pixms = null;
//        float factor = 0.0F;
//        Pix.ByReference[] ppixsd = null;

//        Pix expResult = null;
//        Pix result = instance.pixSauvolaGetThreshold(pixm, pixms, factor, ppixsd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixApplyLocalThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testPixApplyLocalThreshold() {
//        System.out.println("pixApplyLocalThreshold");
//        Pix pixs = null;
//        Pix pixth = null;
//        int redfactor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixApplyLocalThreshold(pixs, pixth, redfactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdByConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdByConnComp_10args_1() {
//        System.out.println("pixThresholdByConnComp");
//        Pix pixs = null;
//        Pix pixm = null;
//        int start = 0;
//        int end = 0;
//        int incr = 0;
//        float thresh48 = 0.0F;
//        float threshdiff = 0.0F;
//        IntBuffer pglobthresh = null;
//        Pix.ByReference[] ppixd = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixThresholdByConnComp(pixs, pixm, start, end, incr, thresh48, threshdiff, pglobthresh, ppixd, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdByConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdByConnComp_10args_2() {
//        System.out.println("pixThresholdByConnComp");
//        Pix pixs = null;
//        Pix pixm = null;
//        int start = 0;
//        int end = 0;
//        int incr = 0;
//        float thresh48 = 0.0F;
//        float threshdiff = 0.0F;
//        IntByReference pglobthresh = null;
//        Pix.ByReference[] ppixd = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixThresholdByConnComp(pixs, pixm, start, end, incr, thresh48, threshdiff, pglobthresh, ppixd, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExpandBinaryReplicate method, of class Leptonica.
//     */
//    @Test
//    public void testPixExpandBinaryReplicate() {
//        System.out.println("pixExpandBinaryReplicate");
//        Pix pixs = null;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExpandBinaryReplicate(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExpandBinaryPower2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixExpandBinaryPower2() {
//        System.out.println("pixExpandBinaryPower2");
//        Pix pixs = null;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExpandBinaryPower2(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReduceBinary2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixReduceBinary2() {
//        System.out.println("pixReduceBinary2");
//        Pix pixs = null;
//        ByteBuffer intab = null;

//        Pix expResult = null;
//        Pix result = instance.pixReduceBinary2(pixs, intab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReduceRankBinaryCascade method, of class Leptonica.
//     */
//    @Test
//    public void testPixReduceRankBinaryCascade() {
//        System.out.println("pixReduceRankBinaryCascade");
//        Pix pixs = null;
//        int level1 = 0;
//        int level2 = 0;
//        int level3 = 0;
//        int level4 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReduceRankBinaryCascade(pixs, level1, level2, level3, level4);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReduceRankBinary2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixReduceRankBinary2() {
//        System.out.println("pixReduceRankBinary2");
//        Pix pixs = null;
//        int level = 0;
//        ByteBuffer intab = null;

//        Pix expResult = null;
//        Pix result = instance.pixReduceRankBinary2(pixs, level, intab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeSubsampleTab2x method, of class Leptonica.
//     */
//    @Test
//    public void testMakeSubsampleTab2x() {
//        System.out.println("makeSubsampleTab2x");

//        Pointer expResult = null;
//        Pointer result = instance.makeSubsampleTab2x();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlend() {
//        System.out.println("pixBlend");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlend(pixs1, pixs2, x, y, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendMask() {
//        System.out.println("pixBlendMask");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendMask(pixd, pixs1, pixs2, x, y, fract, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendGray() {
//        System.out.println("pixBlendGray");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;
//        int type = 0;
//        int transparent = 0;
//        int transpix = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendGray(pixd, pixs1, pixs2, x, y, fract, type, transparent, transpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendGrayInverse method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendGrayInverse() {
//        System.out.println("pixBlendGrayInverse");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlendGrayInverse(pixd, pixs1, pixs2, x, y, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendColor() {
//        System.out.println("pixBlendColor");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;
//        int transparent = 0;
//        int transpix = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendColor(pixd, pixs1, pixs2, x, y, fract, transparent, transpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendColorByChannel method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendColorByChannel() {
//        System.out.println("pixBlendColorByChannel");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float rfract = 0.0F;
//        float gfract = 0.0F;
//        float bfract = 0.0F;
//        int transparent = 0;
//        int transpix = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendColorByChannel(pixd, pixs1, pixs2, x, y, rfract, gfract, bfract, transparent, transpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendGrayAdapt method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendGrayAdapt() {
//        System.out.println("pixBlendGrayAdapt");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;
//        int shift = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendGrayAdapt(pixd, pixs1, pixs2, x, y, fract, shift);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFadeWithGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixFadeWithGray() {
//        System.out.println("pixFadeWithGray");
//        Pix pixs = null;
//        Pix pixb = null;
//        float factor = 0.0F;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFadeWithGray(pixs, pixb, factor, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendHardLight method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendHardLight() {
//        System.out.println("pixBlendHardLight");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x = 0;
//        int y = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlendHardLight(pixd, pixs1, pixs2, x, y, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendCmap() {
//        System.out.println("pixBlendCmap");
//        Pix pixs = null;
//        Pix pixb = null;
//        int x = 0;
//        int y = 0;
//        int sindex = 0;

//        int expResult = 0;
//        int result = instance.pixBlendCmap(pixs, pixb, x, y, sindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendWithGrayMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendWithGrayMask() {
//        System.out.println("pixBlendWithGrayMask");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        Pix pixg = null;
//        int x = 0;
//        int y = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendWithGrayMask(pixs1, pixs2, pixg, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendBackgroundToColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendBackgroundToColor() {
//        System.out.println("pixBlendBackgroundToColor");
//        Pix pixd = null;
//        Pix pixs = null;
//        Box box = null;
//        int color = 0;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlendBackgroundToColor(pixd, pixs, box, color, gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMultiplyByColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixMultiplyByColor() {
//        System.out.println("pixMultiplyByColor");
//        Pix pixd = null;
//        Pix pixs = null;
//        Box box = null;
//        int color = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMultiplyByColor(pixd, pixs, box, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAlphaBlendUniform method, of class Leptonica.
//     */
//    @Test
//    public void testPixAlphaBlendUniform() {
//        System.out.println("pixAlphaBlendUniform");
//        Pix pixs = null;
//        int color = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAlphaBlendUniform(pixs, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddAlphaToBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddAlphaToBlend() {
//        System.out.println("pixAddAlphaToBlend");
//        Pix pixs = null;
//        float fract = 0.0F;
//        int invert = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddAlphaToBlend(pixs, fract, invert);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetAlphaOverWhite method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetAlphaOverWhite() {
//        System.out.println("pixSetAlphaOverWhite");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixSetAlphaOverWhite(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfCreate method, of class Leptonica.
//     */
//    @Test
//    public void testBmfCreate() {
//        System.out.println("bmfCreate");
//        String dir = "";
//        int size = 0;

//        L_Bmf expResult = null;
//        L_Bmf result = instance.bmfCreate(dir, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testBmfDestroy() {
//        System.out.println("bmfDestroy");
//        L_Bmf.ByReference[] pbmf = null;

//        instance.bmfDestroy(pbmf);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetPix method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetPix() {
//        System.out.println("bmfGetPix");
//        L_Bmf bmf = null;
//        byte chr = 0;

//        Pix expResult = null;
//        Pix result = instance.bmfGetPix(bmf, chr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetWidth method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetWidth() {
//        System.out.println("bmfGetWidth");
//        L_Bmf bmf = null;
//        byte chr = 0;
//        IntBuffer pw = null;

//        int expResult = 0;
//        int result = instance.bmfGetWidth(bmf, chr, pw);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetBaseline method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetBaseline() {
//        System.out.println("bmfGetBaseline");
//        L_Bmf bmf = null;
//        byte chr = 0;
//        IntBuffer pbaseline = null;

//        int expResult = 0;
//        int result = instance.bmfGetBaseline(bmf, chr, pbaseline);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetFont method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetFont() {
//        System.out.println("pixaGetFont");
//        String dir = "";
//        int size = 0;
//        IntBuffer pbl0 = null;
//        IntBuffer pbl1 = null;
//        IntBuffer pbl2 = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaGetFont(dir, size, pbl0, pbl1, pbl2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSaveFont method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSaveFont() {
//        System.out.println("pixaSaveFont");
//        String indir = "";
//        String outdir = "";
//        int size = 0;

//        int expResult = 0;
//        int result = instance.pixaSaveFont(indir, outdir, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGenerateFont method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGenerateFont() {
//        System.out.println("pixaGenerateFont");
//        String dir = "";
//        int size = 0;
//        IntBuffer pbl0 = null;
//        IntBuffer pbl1 = null;
//        IntBuffer pbl2 = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaGenerateFont(dir, size, pbl0, pbl1, pbl2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamBmp method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamBmp() {
//        System.out.println("pixReadStreamBmp");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamBmp(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamBmp method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamBmp() {
//        System.out.println("pixWriteStreamBmp");
//        PointerByReference fp = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamBmp(fp, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemBmp method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemBmp() {
//        System.out.println("pixReadMemBmp");
//        ByteBuffer cdata = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemBmp(cdata, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemBmp method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemBmp() {
//        System.out.println("pixWriteMemBmp");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteMemBmp(pdata, psize, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxCreate method, of class Leptonica.
//     */
//    @Test
//    public void testBoxCreate() {
//        System.out.println("boxCreate");
//        int x = 0;
//        int y = 0;
//        int w = 0;
//        int h = 0;

//        Box expResult = null;
//        Box result = instance.boxCreate(x, y, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxCreateValid method, of class Leptonica.
//     */
//    @Test
//    public void testBoxCreateValid() {
//        System.out.println("boxCreateValid");
//        int x = 0;
//        int y = 0;
//        int w = 0;
//        int h = 0;

//        Box expResult = null;
//        Box result = instance.boxCreateValid(x, y, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxCopy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxCopy() {
//        System.out.println("boxCopy");
//        Box box = null;

//        Box expResult = null;
//        Box result = instance.boxCopy(box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxClone method, of class Leptonica.
//     */
//    @Test
//    public void testBoxClone() {
//        System.out.println("boxClone");
//        Box box = null;

//        Box expResult = null;
//        Box result = instance.boxClone(box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxDestroy() {
//        System.out.println("boxDestroy");
//        Box.ByReference[] pbox = null;

//        instance.boxDestroy(pbox);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxGetGeometry method, of class Leptonica.
//     */
//    @Test
//    public void testBoxGetGeometry() {
//        System.out.println("boxGetGeometry");
//        Box box = null;
//        IntBuffer px = null;
//        IntBuffer py = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.boxGetGeometry(box, px, py, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxSetGeometry method, of class Leptonica.
//     */
//    @Test
//    public void testBoxSetGeometry() {
//        System.out.println("boxSetGeometry");
//        Box box = null;
//        int x = 0;
//        int y = 0;
//        int w = 0;
//        int h = 0;

//        int expResult = 0;
//        int result = instance.boxSetGeometry(box, x, y, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxGetSideLocation method, of class Leptonica.
//     */
//    @Test
//    public void testBoxGetSideLocation() {
//        System.out.println("boxGetSideLocation");
//        Box box = null;
//        int side = 0;
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.boxGetSideLocation(box, side, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxGetRefcount() {
//        System.out.println("boxGetRefcount");
//        Box box = null;

//        int expResult = 0;
//        int result = instance.boxGetRefcount(box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxChangeRefcount() {
//        System.out.println("boxChangeRefcount");
//        Box box = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.boxChangeRefcount(box, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxIsValid method, of class Leptonica.
//     */
//    @Test
//    public void testBoxIsValid() {
//        System.out.println("boxIsValid");
//        Box box = null;
//        IntBuffer pvalid = null;

//        int expResult = 0;
//        int result = instance.boxIsValid(box, pvalid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaCreate() {
//        System.out.println("boxaCreate");
//        int n = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaCopy() {
//        System.out.println("boxaCopy");
//        Boxa boxa = null;
//        int copyflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaCopy(boxa, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaDestroy() {
//        System.out.println("boxaDestroy");
//        Boxa.ByReference[] pboxa = null;

//        instance.boxaDestroy(pboxa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaAddBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaAddBox() {
//        System.out.println("boxaAddBox");
//        Boxa boxa = null;
//        Box box = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.boxaAddBox(boxa, box, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaExtendArray method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaExtendArray() {
//        System.out.println("boxaExtendArray");
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaExtendArray(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaExtendArrayToSize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaExtendArrayToSize() {
//        System.out.println("boxaExtendArrayToSize");
//        Boxa boxa = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.boxaExtendArrayToSize(boxa, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetCount() {
//        System.out.println("boxaGetCount");
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaGetCount(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetValidCount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetValidCount() {
//        System.out.println("boxaGetValidCount");
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaGetValidCount(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetBox() {
//        System.out.println("boxaGetBox");
//        Boxa boxa = null;
//        int index = 0;
//        int accessflag = 0;

//        Box expResult = null;
//        Box result = instance.boxaGetBox(boxa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetValidBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetValidBox() {
//        System.out.println("boxaGetValidBox");
//        Boxa boxa = null;
//        int index = 0;
//        int accessflag = 0;

//        Box expResult = null;
//        Box result = instance.boxaGetValidBox(boxa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetBoxGeometry method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetBoxGeometry() {
//        System.out.println("boxaGetBoxGeometry");
//        Boxa boxa = null;
//        int index = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.boxaGetBoxGeometry(boxa, index, px, py, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaIsFull method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaIsFull() {
//        System.out.println("boxaIsFull");
//        Boxa boxa = null;
//        IntBuffer pfull = null;

//        int expResult = 0;
//        int result = instance.boxaIsFull(boxa, pfull);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaReplaceBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaReplaceBox() {
//        System.out.println("boxaReplaceBox");
//        Boxa boxa = null;
//        int index = 0;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.boxaReplaceBox(boxa, index, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaInsertBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaInsertBox() {
//        System.out.println("boxaInsertBox");
//        Boxa boxa = null;
//        int index = 0;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.boxaInsertBox(boxa, index, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaRemoveBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaRemoveBox() {
//        System.out.println("boxaRemoveBox");
//        Boxa boxa = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.boxaRemoveBox(boxa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaRemoveBoxAndSave method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaRemoveBoxAndSave() {
//        System.out.println("boxaRemoveBoxAndSave");
//        Boxa boxa = null;
//        int index = 0;
//        Box.ByReference[] pbox = null;

//        int expResult = 0;
//        int result = instance.boxaRemoveBoxAndSave(boxa, index, pbox);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSaveValid method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSaveValid() {
//        System.out.println("boxaSaveValid");
//        Boxa boxas = null;
//        int copyflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSaveValid(boxas, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaInitFull method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaInitFull() {
//        System.out.println("boxaInitFull");
//        Boxa boxa = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.boxaInitFull(boxa, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaClear method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaClear() {
//        System.out.println("boxaClear");
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaClear(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaCreate() {
//        System.out.println("boxaaCreate");
//        int n = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaCopy() {
//        System.out.println("boxaaCopy");
//        Boxaa baas = null;
//        int copyflag = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaCopy(baas, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaDestroy() {
//        System.out.println("boxaaDestroy");
//        Boxaa.ByReference[] pbaa = null;

//        instance.boxaaDestroy(pbaa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaAddBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaAddBoxa() {
//        System.out.println("boxaaAddBoxa");
//        Boxaa baa = null;
//        Boxa ba = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.boxaaAddBoxa(baa, ba, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaExtendArray method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaExtendArray() {
//        System.out.println("boxaaExtendArray");
//        Boxaa baa = null;

//        int expResult = 0;
//        int result = instance.boxaaExtendArray(baa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaExtendArrayToSize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaExtendArrayToSize() {
//        System.out.println("boxaaExtendArrayToSize");
//        Boxaa baa = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.boxaaExtendArrayToSize(baa, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetCount() {
//        System.out.println("boxaaGetCount");
//        Boxaa baa = null;

//        int expResult = 0;
//        int result = instance.boxaaGetCount(baa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetBoxCount method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetBoxCount() {
//        System.out.println("boxaaGetBoxCount");
//        Boxaa baa = null;

//        int expResult = 0;
//        int result = instance.boxaaGetBoxCount(baa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetBoxa() {
//        System.out.println("boxaaGetBoxa");
//        Boxaa baa = null;
//        int index = 0;
//        int accessflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaaGetBoxa(baa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetBox() {
//        System.out.println("boxaaGetBox");
//        Boxaa baa = null;
//        int iboxa = 0;
//        int ibox = 0;
//        int accessflag = 0;

//        Box expResult = null;
//        Box result = instance.boxaaGetBox(baa, iboxa, ibox, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaInitFull method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaInitFull() {
//        System.out.println("boxaaInitFull");
//        Boxaa baa = null;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaaInitFull(baa, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaExtendWithInit method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaExtendWithInit() {
//        System.out.println("boxaaExtendWithInit");
//        Boxaa baa = null;
//        int maxindex = 0;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaaExtendWithInit(baa, maxindex, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaReplaceBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaReplaceBoxa() {
//        System.out.println("boxaaReplaceBoxa");
//        Boxaa baa = null;
//        int index = 0;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaaReplaceBoxa(baa, index, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaInsertBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaInsertBoxa() {
//        System.out.println("boxaaInsertBoxa");
//        Boxaa baa = null;
//        int index = 0;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaaInsertBoxa(baa, index, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaRemoveBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaRemoveBoxa() {
//        System.out.println("boxaaRemoveBoxa");
//        Boxaa baa = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.boxaaRemoveBoxa(baa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaAddBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaAddBox() {
//        System.out.println("boxaaAddBox");
//        Boxaa baa = null;
//        int index = 0;
//        Box box = null;
//        int accessflag = 0;

//        int expResult = 0;
//        int result = instance.boxaaAddBox(baa, index, box, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaReadFromFiles method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaReadFromFiles() {
//        System.out.println("boxaaReadFromFiles");
//        String dirname = "";
//        String substr = "";
//        int first = 0;
//        int nfiles = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaReadFromFiles(dirname, substr, first, nfiles);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaRead method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaRead() {
//        System.out.println("boxaaRead");
//        String filename = "";

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaReadStream() {
//        System.out.println("boxaaReadStream");
//        PointerByReference fp = null;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaWrite() {
//        System.out.println("boxaaWrite");
//        String filename = "";
//        Boxaa baa = null;

//        int expResult = 0;
//        int result = instance.boxaaWrite(filename, baa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaWriteStream() {
//        System.out.println("boxaaWriteStream");
//        PointerByReference fp = null;
//        Boxaa baa = null;

//        int expResult = 0;
//        int result = instance.boxaaWriteStream(fp, baa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaRead method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaRead() {
//        System.out.println("boxaRead");
//        String filename = "";

//        Boxa expResult = null;
//        Boxa result = instance.boxaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaReadStream() {
//        System.out.println("boxaReadStream");
//        PointerByReference fp = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaReadMem method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaReadMem() {
//        System.out.println("boxaReadMem");
//        ByteBuffer data = null;
//        NativeSize size = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaReadMem(data, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaWrite() {
//        System.out.println("boxaWrite");
//        String filename = "";
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaWrite(filename, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaWriteStream() {
//        System.out.println("boxaWriteStream");
//        PointerByReference fp = null;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaWriteStream(fp, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaWriteMem method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaWriteMem() {
//        System.out.println("boxaWriteMem");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.boxaWriteMem(pdata, psize, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxPrintStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testBoxPrintStreamInfo() {
//        System.out.println("boxPrintStreamInfo");
//        PointerByReference fp = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.boxPrintStreamInfo(fp, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxContains method, of class Leptonica.
//     */
//    @Test
//    public void testBoxContains() {
//        System.out.println("boxContains");
//        Box box1 = null;
//        Box box2 = null;
//        IntBuffer presult = null;

//        int expResult = 0;
//        int result = instance.boxContains(box1, box2, presult);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxIntersects method, of class Leptonica.
//     */
//    @Test
//    public void testBoxIntersects() {
//        System.out.println("boxIntersects");
//        Box box1 = null;
//        Box box2 = null;
//        IntBuffer presult = null;

//        int expResult = 0;
//        int result = instance.boxIntersects(box1, box2, presult);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaContainedInBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaContainedInBox() {
//        System.out.println("boxaContainedInBox");
//        Boxa boxas = null;
//        Box box = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaContainedInBox(boxas, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaIntersectsBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaIntersectsBox() {
//        System.out.println("boxaIntersectsBox");
//        Boxa boxas = null;
//        Box box = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaIntersectsBox(boxas, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaClipToBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaClipToBox() {
//        System.out.println("boxaClipToBox");
//        Boxa boxas = null;
//        Box box = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaClipToBox(boxas, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaCombineOverlaps method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaCombineOverlaps() {
//        System.out.println("boxaCombineOverlaps");
//        Boxa boxas = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaCombineOverlaps(boxas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxOverlapRegion method, of class Leptonica.
//     */
//    @Test
//    public void testBoxOverlapRegion() {
//        System.out.println("boxOverlapRegion");
//        Box box1 = null;
//        Box box2 = null;

//        Box expResult = null;
//        Box result = instance.boxOverlapRegion(box1, box2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxBoundingRegion method, of class Leptonica.
//     */
//    @Test
//    public void testBoxBoundingRegion() {
//        System.out.println("boxBoundingRegion");
//        Box box1 = null;
//        Box box2 = null;

//        Box expResult = null;
//        Box result = instance.boxBoundingRegion(box1, box2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxOverlapFraction method, of class Leptonica.
//     */
//    @Test
//    public void testBoxOverlapFraction() {
//        System.out.println("boxOverlapFraction");
//        Box box1 = null;
//        Box box2 = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.boxOverlapFraction(box1, box2, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxOverlapArea method, of class Leptonica.
//     */
//    @Test
//    public void testBoxOverlapArea() {
//        System.out.println("boxOverlapArea");
//        Box box1 = null;
//        Box box2 = null;
//        IntBuffer parea = null;

//        int expResult = 0;
//        int result = instance.boxOverlapArea(box1, box2, parea);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaHandleOverlaps method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaHandleOverlaps() {
//        System.out.println("boxaHandleOverlaps");
//        Boxa boxas = null;
//        int op = 0;
//        int range = 0;
//        float min_overlap = 0.0F;
//        float max_ratio = 0.0F;
//        Numa.ByReference[] pnamap = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaHandleOverlaps(boxas, op, range, min_overlap, max_ratio, pnamap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxSeparationDistance method, of class Leptonica.
//     */
//    @Test
//    public void testBoxSeparationDistance() {
//        System.out.println("boxSeparationDistance");
//        Box box1 = null;
//        Box box2 = null;
//        IntBuffer ph_sep = null;
//        IntBuffer pv_sep = null;

//        int expResult = 0;
//        int result = instance.boxSeparationDistance(box1, box2, ph_sep, pv_sep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxContainsPt method, of class Leptonica.
//     */
//    @Test
//    public void testBoxContainsPt() {
//        System.out.println("boxContainsPt");
//        Box box = null;
//        float x = 0.0F;
//        float y = 0.0F;
//        IntBuffer pcontains = null;

//        int expResult = 0;
//        int result = instance.boxContainsPt(box, x, y, pcontains);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetNearestToPt method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetNearestToPt() {
//        System.out.println("boxaGetNearestToPt");
//        Boxa boxa = null;
//        int x = 0;
//        int y = 0;

//        Box expResult = null;
//        Box result = instance.boxaGetNearestToPt(boxa, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxGetCenter method, of class Leptonica.
//     */
//    @Test
//    public void testBoxGetCenter() {
//        System.out.println("boxGetCenter");
//        Box box = null;
//        FloatBuffer pcx = null;
//        FloatBuffer pcy = null;

//        int expResult = 0;
//        int result = instance.boxGetCenter(box, pcx, pcy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxIntersectByLine method, of class Leptonica.
//     */
//    @Test
//    public void testBoxIntersectByLine() {
//        System.out.println("boxIntersectByLine");
//        Box box = null;
//        int x = 0;
//        int y = 0;
//        float slope = 0.0F;
//        IntBuffer px1 = null;
//        IntBuffer py1 = null;
//        IntBuffer px2 = null;
//        IntBuffer py2 = null;
//        IntBuffer pn = null;

//        int expResult = 0;
//        int result = instance.boxIntersectByLine(box, x, y, slope, px1, py1, px2, py2, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxClipToRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testBoxClipToRectangle() {
//        System.out.println("boxClipToRectangle");
//        Box box = null;
//        int wi = 0;
//        int hi = 0;

//        Box expResult = null;
//        Box result = instance.boxClipToRectangle(box, wi, hi);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxClipToRectangleParams method, of class Leptonica.
//     */
//    @Test
//    public void testBoxClipToRectangleParams() {
//        System.out.println("boxClipToRectangleParams");
//        Box box = null;
//        int w = 0;
//        int h = 0;
//        IntBuffer pxstart = null;
//        IntBuffer pystart = null;
//        IntBuffer pxend = null;
//        IntBuffer pyend = null;
//        IntBuffer pbw = null;
//        IntBuffer pbh = null;

//        int expResult = 0;
//        int result = instance.boxClipToRectangleParams(box, w, h, pxstart, pystart, pxend, pyend, pbw, pbh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxRelocateOneSide method, of class Leptonica.
//     */
//    @Test
//    public void testBoxRelocateOneSide() {
//        System.out.println("boxRelocateOneSide");
//        Box boxd = null;
//        Box boxs = null;
//        int loc = 0;
//        int sideflag = 0;

//        Box expResult = null;
//        Box result = instance.boxRelocateOneSide(boxd, boxs, loc, sideflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxAdjustSides method, of class Leptonica.
//     */
//    @Test
//    public void testBoxAdjustSides() {
//        System.out.println("boxAdjustSides");
//        Box boxd = null;
//        Box boxs = null;
//        int delleft = 0;
//        int delright = 0;
//        int deltop = 0;
//        int delbot = 0;

//        Box expResult = null;
//        Box result = instance.boxAdjustSides(boxd, boxs, delleft, delright, deltop, delbot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSetSide method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSetSide() {
//        System.out.println("boxaSetSide");
//        Boxa boxad = null;
//        Boxa boxas = null;
//        int side = 0;
//        int val = 0;
//        int thresh = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSetSide(boxad, boxas, side, val, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaAdjustWidthToTarget method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaAdjustWidthToTarget() {
//        System.out.println("boxaAdjustWidthToTarget");
//        Boxa boxad = null;
//        Boxa boxas = null;
//        int sides = 0;
//        int target = 0;
//        int thresh = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaAdjustWidthToTarget(boxad, boxas, sides, target, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaAdjustHeightToTarget method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaAdjustHeightToTarget() {
//        System.out.println("boxaAdjustHeightToTarget");
//        Boxa boxad = null;
//        Boxa boxas = null;
//        int sides = 0;
//        int target = 0;
//        int thresh = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaAdjustHeightToTarget(boxad, boxas, sides, target, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxEqual method, of class Leptonica.
//     */
//    @Test
//    public void testBoxEqual() {
//        System.out.println("boxEqual");
//        Box box1 = null;
//        Box box2 = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.boxEqual(box1, box2, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaEqual method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaEqual_5args_1() {
//        System.out.println("boxaEqual");
//        Boxa boxa1 = null;
//        Boxa boxa2 = null;
//        int maxdist = 0;
//        Numa.ByReference[] pnaindex = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.boxaEqual(boxa1, boxa2, maxdist, pnaindex, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaEqual method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaEqual_5args_2() {
//        System.out.println("boxaEqual");
//        Boxa boxa1 = null;
//        Boxa boxa2 = null;
//        int maxdist = 0;
//        Numa.ByReference[] pnaindex = null;
//        IntByReference psame = null;

//        int expResult = 0;
//        int result = instance.boxaEqual(boxa1, boxa2, maxdist, pnaindex, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxSimilar method, of class Leptonica.
//     */
//    @Test
//    public void testBoxSimilar() {
//        System.out.println("boxSimilar");
//        Box box1 = null;
//        Box box2 = null;
//        int leftdiff = 0;
//        int rightdiff = 0;
//        int topdiff = 0;
//        int botdiff = 0;
//        IntBuffer psimilar = null;

//        int expResult = 0;
//        int result = instance.boxSimilar(box1, box2, leftdiff, rightdiff, topdiff, botdiff, psimilar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSimilar method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSimilar() {
//        System.out.println("boxaSimilar");
//        Boxa boxa1 = null;
//        Boxa boxa2 = null;
//        int leftdiff = 0;
//        int rightdiff = 0;
//        int topdiff = 0;
//        int botdiff = 0;
//        int debugflag = 0;
//        IntBuffer psimilar = null;

//        int expResult = 0;
//        int result = instance.boxaSimilar(boxa1, boxa2, leftdiff, rightdiff, topdiff, botdiff, debugflag, psimilar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaJoin() {
//        System.out.println("boxaJoin");
//        Boxa boxad = null;
//        Boxa boxas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.boxaJoin(boxad, boxas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaJoin() {
//        System.out.println("boxaaJoin");
//        Boxaa baad = null;
//        Boxaa baas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.boxaaJoin(baad, baas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSplitEvenOdd method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSplitEvenOdd() {
//        System.out.println("boxaSplitEvenOdd");
//        Boxa boxa = null;
//        int fillflag = 0;
//        Boxa.ByReference[] pboxae = null;
//        Boxa.ByReference[] pboxao = null;

//        int expResult = 0;
//        int result = instance.boxaSplitEvenOdd(boxa, fillflag, pboxae, pboxao);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaMergeEvenOdd method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaMergeEvenOdd() {
//        System.out.println("boxaMergeEvenOdd");
//        Boxa boxae = null;
//        Boxa boxao = null;
//        int fillflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaMergeEvenOdd(boxae, boxao, fillflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaTransform method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaTransform() {
//        System.out.println("boxaTransform");
//        Boxa boxas = null;
//        int shiftx = 0;
//        int shifty = 0;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaTransform(boxas, shiftx, shifty, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxTransform method, of class Leptonica.
//     */
//    @Test
//    public void testBoxTransform() {
//        System.out.println("boxTransform");
//        Box box = null;
//        int shiftx = 0;
//        int shifty = 0;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Box expResult = null;
//        Box result = instance.boxTransform(box, shiftx, shifty, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaTransformOrdered method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaTransformOrdered() {
//        System.out.println("boxaTransformOrdered");
//        Boxa boxas = null;
//        int shiftx = 0;
//        int shifty = 0;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int order = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaTransformOrdered(boxas, shiftx, shifty, scalex, scaley, xcen, ycen, angle, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxTransformOrdered method, of class Leptonica.
//     */
//    @Test
//    public void testBoxTransformOrdered() {
//        System.out.println("boxTransformOrdered");
//        Box boxs = null;
//        int shiftx = 0;
//        int shifty = 0;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int order = 0;

//        Box expResult = null;
//        Box result = instance.boxTransformOrdered(boxs, shiftx, shifty, scalex, scaley, xcen, ycen, angle, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaRotateOrth method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaRotateOrth() {
//        System.out.println("boxaRotateOrth");
//        Boxa boxas = null;
//        int w = 0;
//        int h = 0;
//        int rotation = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaRotateOrth(boxas, w, h, rotation);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxRotateOrth method, of class Leptonica.
//     */
//    @Test
//    public void testBoxRotateOrth() {
//        System.out.println("boxRotateOrth");
//        Box box = null;
//        int w = 0;
//        int h = 0;
//        int rotation = 0;

//        Box expResult = null;
//        Box result = instance.boxRotateOrth(box, w, h, rotation);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSort method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSort() {
//        System.out.println("boxaSort");
//        Boxa boxas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSort(boxas, sorttype, sortorder, pnaindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaBinSort method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaBinSort() {
//        System.out.println("boxaBinSort");
//        Boxa boxas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaBinSort(boxas, sorttype, sortorder, pnaindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSortByIndex() {
//        System.out.println("boxaSortByIndex");
//        Boxa boxas = null;
//        Numa naindex = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSortByIndex(boxas, naindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSort2d method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSort2d() {
//        System.out.println("boxaSort2d");
//        Boxa boxas = null;
//        Numaa.ByReference[] pnaad = null;
//        int delta1 = 0;
//        int delta2 = 0;
//        int minh1 = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaSort2d(boxas, pnaad, delta1, delta2, minh1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSort2dByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSort2dByIndex() {
//        System.out.println("boxaSort2dByIndex");
//        Boxa boxas = null;
//        Numaa naa = null;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaSort2dByIndex(boxas, naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaExtractAsNuma method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaExtractAsNuma() {
//        System.out.println("boxaExtractAsNuma");
//        Boxa boxa = null;
//        Numa.ByReference[] pnax = null;
//        Numa.ByReference[] pnay = null;
//        Numa.ByReference[] pnaw = null;
//        Numa.ByReference[] pnah = null;
//        int keepinvalid = 0;

//        int expResult = 0;
//        int result = instance.boxaExtractAsNuma(boxa, pnax, pnay, pnaw, pnah, keepinvalid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaExtractAsPta method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaExtractAsPta() {
//        System.out.println("boxaExtractAsPta");
//        Boxa boxa = null;
//        Pta.ByReference[] pptal = null;
//        Pta.ByReference[] pptat = null;
//        Pta.ByReference[] pptar = null;
//        Pta.ByReference[] pptab = null;
//        int keepinvalid = 0;

//        int expResult = 0;
//        int result = instance.boxaExtractAsPta(boxa, pptal, pptat, pptar, pptab, keepinvalid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetRankSize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetRankSize() {
//        System.out.println("boxaGetRankSize");
//        Boxa boxa = null;
//        float fract = 0.0F;

//        Box expResult = null;
//        Box result = instance.boxaGetRankSize(boxa, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetMedian method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetMedian() {
//        System.out.println("boxaGetMedian");
//        Boxa boxa = null;

//        Box expResult = null;
//        Box result = instance.boxaGetMedian(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetAverageSize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetAverageSize() {
//        System.out.println("boxaGetAverageSize");
//        Boxa boxa = null;
//        FloatBuffer pw = null;
//        FloatBuffer ph = null;

//        int expResult = 0;
//        int result = instance.boxaGetAverageSize(boxa, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetExtent method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetExtent_5args_1() {
//        System.out.println("boxaaGetExtent");
//        Boxaa baa = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        Box.ByReference[] pbox = null;
//        Boxa.ByReference[] pboxa = null;

//        int expResult = 0;
//        int result = instance.boxaaGetExtent(baa, pw, ph, pbox, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaGetExtent method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaGetExtent_5args_2() {
//        System.out.println("boxaaGetExtent");
//        Boxaa baa = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        Box.ByReference[] pbox = null;
//        Boxa.ByReference[] pboxa = null;

//        int expResult = 0;
//        int result = instance.boxaaGetExtent(baa, pw, ph, pbox, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaFlattenToBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaFlattenToBoxa() {
//        System.out.println("boxaaFlattenToBoxa");
//        Boxaa baa = null;
//        Numa.ByReference[] pnaindex = null;
//        int copyflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaaFlattenToBoxa(baa, pnaindex, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaFlattenAligned method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaFlattenAligned() {
//        System.out.println("boxaaFlattenAligned");
//        Boxaa baa = null;
//        int num = 0;
//        Box fillerbox = null;
//        int copyflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaaFlattenAligned(baa, num, fillerbox, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaEncapsulateAligned method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaEncapsulateAligned() {
//        System.out.println("boxaEncapsulateAligned");
//        Boxa boxa = null;
//        int num = 0;
//        int copyflag = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaEncapsulateAligned(boxa, num, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaAlignBox method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaAlignBox() {
//        System.out.println("boxaaAlignBox");
//        Boxaa baa = null;
//        Box box = null;
//        int delta = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.boxaaAlignBox(baa, box, delta, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMaskConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixMaskConnComp() {
//        System.out.println("pixMaskConnComp");
//        Pix pixs = null;
//        int connectivity = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixMaskConnComp(pixs, connectivity, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMaskBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixMaskBoxa() {
//        System.out.println("pixMaskBoxa");
//        Pix pixd = null;
//        Pix pixs = null;
//        Boxa boxa = null;
//        int op = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMaskBoxa(pixd, pixs, boxa, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPaintBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixPaintBoxa() {
//        System.out.println("pixPaintBoxa");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int val = 0;

//        Pix expResult = null;
//        Pix result = instance.pixPaintBoxa(pixs, boxa, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetBlackOrWhiteBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetBlackOrWhiteBoxa() {
//        System.out.println("pixSetBlackOrWhiteBoxa");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int op = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSetBlackOrWhiteBoxa(pixs, boxa, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPaintBoxaRandom method, of class Leptonica.
//     */
//    @Test
//    public void testPixPaintBoxaRandom() {
//        System.out.println("pixPaintBoxaRandom");
//        Pix pixs = null;
//        Boxa boxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixPaintBoxaRandom(pixs, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendBoxaRandom method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendBoxaRandom() {
//        System.out.println("pixBlendBoxaRandom");
//        Pix pixs = null;
//        Boxa boxa = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlendBoxaRandom(pixs, boxa, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDrawBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixDrawBoxa() {
//        System.out.println("pixDrawBoxa");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int width = 0;
//        int val = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDrawBoxa(pixs, boxa, width, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDrawBoxaRandom method, of class Leptonica.
//     */
//    @Test
//    public void testPixDrawBoxaRandom() {
//        System.out.println("pixDrawBoxaRandom");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int width = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDrawBoxaRandom(pixs, boxa, width);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaDisplay method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaDisplay() {
//        System.out.println("boxaaDisplay");
//        Boxaa baa = null;
//        int linewba = 0;
//        int linewb = 0;
//        int colorba = 0;
//        int colorb = 0;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.boxaaDisplay(baa, linewba, linewb, colorba, colorb, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSplitIntoBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixSplitIntoBoxa() {
//        System.out.println("pixSplitIntoBoxa");
//        Pix pixs = null;
//        int minsum = 0;
//        int skipdist = 0;
//        int delta = 0;
//        int maxbg = 0;
//        int maxcomps = 0;
//        int remainder = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixSplitIntoBoxa(pixs, minsum, skipdist, delta, maxbg, maxcomps, remainder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSplitComponentIntoBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixSplitComponentIntoBoxa() {
//        System.out.println("pixSplitComponentIntoBoxa");
//        Pix pix = null;
//        Box box = null;
//        int minsum = 0;
//        int skipdist = 0;
//        int delta = 0;
//        int maxbg = 0;
//        int maxcomps = 0;
//        int remainder = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixSplitComponentIntoBoxa(pix, box, minsum, skipdist, delta, maxbg, maxcomps, remainder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeMosaicStrips method, of class Leptonica.
//     */
//    @Test
//    public void testMakeMosaicStrips() {
//        System.out.println("makeMosaicStrips");
//        int w = 0;
//        int h = 0;
//        int direction = 0;
//        int size = 0;

//        Boxa expResult = null;
//        Boxa result = instance.makeMosaicStrips(w, h, direction, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaCompareRegions method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaCompareRegions_7args_1() {
//        System.out.println("boxaCompareRegions");
//        Boxa boxa1 = null;
//        Boxa boxa2 = null;
//        int areathresh = 0;
//        IntBuffer pnsame = null;
//        FloatBuffer pdiffarea = null;
//        FloatBuffer pdiffxor = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.boxaCompareRegions(boxa1, boxa2, areathresh, pnsame, pdiffarea, pdiffxor, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaCompareRegions method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaCompareRegions_7args_2() {
//        System.out.println("boxaCompareRegions");
//        Boxa boxa1 = null;
//        Boxa boxa2 = null;
//        int areathresh = 0;
//        IntByReference pnsame = null;
//        FloatByReference pdiffarea = null;
//        FloatByReference pdiffxor = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.boxaCompareRegions(boxa1, boxa2, areathresh, pnsame, pdiffarea, pdiffxor, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSelectRange method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSelectRange() {
//        System.out.println("boxaSelectRange");
//        Boxa boxas = null;
//        int first = 0;
//        int last = 0;
//        int copyflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSelectRange(boxas, first, last, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaSelectRange method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaSelectRange() {
//        System.out.println("boxaaSelectRange");
//        Boxaa baas = null;
//        int first = 0;
//        int last = 0;
//        int copyflag = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaSelectRange(baas, first, last, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSelectBySize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSelectBySize() {
//        System.out.println("boxaSelectBySize");
//        Boxa boxas = null;
//        int width = 0;
//        int height = 0;
//        int type = 0;
//        int relation = 0;
//        IntBuffer pchanged = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSelectBySize(boxas, width, height, type, relation, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaMakeSizeIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaMakeSizeIndicator() {
//        System.out.println("boxaMakeSizeIndicator");
//        Boxa boxa = null;
//        int width = 0;
//        int height = 0;
//        int type = 0;
//        int relation = 0;

//        Numa expResult = null;
//        Numa result = instance.boxaMakeSizeIndicator(boxa, width, height, type, relation);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSelectByArea method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSelectByArea() {
//        System.out.println("boxaSelectByArea");
//        Boxa boxas = null;
//        int area = 0;
//        int relation = 0;
//        IntBuffer pchanged = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSelectByArea(boxas, area, relation, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaMakeAreaIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaMakeAreaIndicator() {
//        System.out.println("boxaMakeAreaIndicator");
//        Boxa boxa = null;
//        int area = 0;
//        int relation = 0;

//        Numa expResult = null;
//        Numa result = instance.boxaMakeAreaIndicator(boxa, area, relation);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSelectWithIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSelectWithIndicator() {
//        System.out.println("boxaSelectWithIndicator");
//        Boxa boxas = null;
//        Numa na = null;
//        IntBuffer pchanged = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaSelectWithIndicator(boxas, na, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaPermutePseudorandom method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaPermutePseudorandom() {
//        System.out.println("boxaPermutePseudorandom");
//        Boxa boxas = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaPermutePseudorandom(boxas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaPermuteRandom method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaPermuteRandom() {
//        System.out.println("boxaPermuteRandom");
//        Boxa boxad = null;
//        Boxa boxas = null;

//        Boxa expResult = null;
//        Boxa result = instance.boxaPermuteRandom(boxad, boxas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSwapBoxes method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSwapBoxes() {
//        System.out.println("boxaSwapBoxes");
//        Boxa boxa = null;
//        int i = 0;
//        int j = 0;

//        int expResult = 0;
//        int result = instance.boxaSwapBoxes(boxa, i, j);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaConvertToPta method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaConvertToPta() {
//        System.out.println("boxaConvertToPta");
//        Boxa boxa = null;
//        int ncorners = 0;

//        Pta expResult = null;
//        Pta result = instance.boxaConvertToPta(boxa, ncorners);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaConvertToBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPtaConvertToBoxa() {
//        System.out.println("ptaConvertToBoxa");
//        Pta pta = null;
//        int ncorners = 0;

//        Boxa expResult = null;
//        Boxa result = instance.ptaConvertToBoxa(pta, ncorners);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaLinearFit method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaLinearFit() {
//        System.out.println("boxaLinearFit");
//        Boxa boxas = null;
//        float factor = 0.0F;
//        int debug = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaLinearFit(boxas, factor, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaModifyWithBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaModifyWithBoxa() {
//        System.out.println("boxaModifyWithBoxa");
//        Boxa boxas = null;
//        Boxa boxam = null;
//        int subflag = 0;
//        int maxdiff = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaModifyWithBoxa(boxas, boxam, subflag, maxdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaConstrainSize method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaConstrainSize() {
//        System.out.println("boxaConstrainSize");
//        Boxa boxas = null;
//        int width = 0;
//        int widthflag = 0;
//        int height = 0;
//        int heightflag = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaConstrainSize(boxas, width, widthflag, height, heightflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaReconcileEvenOddHeight method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaReconcileEvenOddHeight() {
//        System.out.println("boxaReconcileEvenOddHeight");
//        Boxa boxas = null;
//        int sides = 0;
//        int delh = 0;
//        int op = 0;
//        float factor = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaReconcileEvenOddHeight(boxas, sides, delh, op, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaPlotSides method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaPlotSides_7args_1() {
//        System.out.println("boxaPlotSides");
//        Boxa boxa = null;
//        String plotname = "";
//        Numa.ByReference[] pnal = null;
//        Numa.ByReference[] pnat = null;
//        Numa.ByReference[] pnar = null;
//        Numa.ByReference[] pnab = null;
//        int outformat = 0;

//        int expResult = 0;
//        int result = instance.boxaPlotSides(boxa, plotname, pnal, pnat, pnar, pnab, outformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaPlotSides method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaPlotSides_7args_2() {
//        System.out.println("boxaPlotSides");
//        Boxa boxa = null;
//        Pointer plotname = null;
//        Numa.ByReference[] pnal = null;
//        Numa.ByReference[] pnat = null;
//        Numa.ByReference[] pnar = null;
//        Numa.ByReference[] pnab = null;
//        int outformat = 0;

//        int expResult = 0;
//        int result = instance.boxaPlotSides(boxa, plotname, pnal, pnat, pnar, pnab, outformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetExtent method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetExtent_4args_1() {
//        System.out.println("boxaGetExtent");
//        Boxa boxa = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        Box.ByReference[] pbox = null;

//        int expResult = 0;
//        int result = instance.boxaGetExtent(boxa, pw, ph, pbox);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetExtent method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetExtent_4args_2() {
//        System.out.println("boxaGetExtent");
//        Boxa boxa = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        Box.ByReference[] pbox = null;

//        int expResult = 0;
//        int result = instance.boxaGetExtent(boxa, pw, ph, pbox);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetCoverage method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetCoverage() {
//        System.out.println("boxaGetCoverage");
//        Boxa boxa = null;
//        int wc = 0;
//        int hc = 0;
//        int exactflag = 0;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.boxaGetCoverage(boxa, wc, hc, exactflag, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaSizeRange method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaSizeRange() {
//        System.out.println("boxaaSizeRange");
//        Boxaa baa = null;
//        IntBuffer pminw = null;
//        IntBuffer pminh = null;
//        IntBuffer pmaxw = null;
//        IntBuffer pmaxh = null;

//        int expResult = 0;
//        int result = instance.boxaaSizeRange(baa, pminw, pminh, pmaxw, pmaxh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaSizeRange method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaSizeRange() {
//        System.out.println("boxaSizeRange");
//        Boxa boxa = null;
//        IntBuffer pminw = null;
//        IntBuffer pminh = null;
//        IntBuffer pmaxw = null;
//        IntBuffer pmaxh = null;

//        int expResult = 0;
//        int result = instance.boxaSizeRange(boxa, pminw, pminh, pmaxw, pmaxh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaLocationRange method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaLocationRange() {
//        System.out.println("boxaLocationRange");
//        Boxa boxa = null;
//        IntBuffer pminx = null;
//        IntBuffer pminy = null;
//        IntBuffer pmaxx = null;
//        IntBuffer pmaxy = null;

//        int expResult = 0;
//        int result = instance.boxaLocationRange(boxa, pminx, pminy, pmaxx, pmaxy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetArea method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetArea() {
//        System.out.println("boxaGetArea");
//        Boxa boxa = null;
//        IntBuffer parea = null;

//        int expResult = 0;
//        int result = instance.boxaGetArea(boxa, parea);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaDisplayTiled method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaDisplayTiled() {
//        System.out.println("boxaDisplayTiled");
//        Boxa boxas = null;
//        Pixa pixa = null;
//        int maxwidth = 0;
//        int linewidth = 0;
//        float scalefactor = 0.0F;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;
//        String fontdir = "";

//        Pix expResult = null;
//        Pix result = instance.boxaDisplayTiled(boxas, pixa, maxwidth, linewidth, scalefactor, background, spacing, border, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaCreate() {
//        System.out.println("l_byteaCreate");
//        NativeSize nbytes = null;

//        L_Bytea expResult = null;
//        L_Bytea result = instance.l_byteaCreate(nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaInitFromMem method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaInitFromMem() {
//        System.out.println("l_byteaInitFromMem");
//        ByteBuffer data = null;
//        NativeSize size = null;

//        L_Bytea expResult = null;
//        L_Bytea result = instance.l_byteaInitFromMem(data, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaInitFromFile method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaInitFromFile() {
//        System.out.println("l_byteaInitFromFile");
//        String fname = "";

//        L_Bytea expResult = null;
//        L_Bytea result = instance.l_byteaInitFromFile(fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaInitFromStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaInitFromStream() {
//        System.out.println("l_byteaInitFromStream");
//        PointerByReference fp = null;

//        L_Bytea expResult = null;
//        L_Bytea result = instance.l_byteaInitFromStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaCopy() {
//        System.out.println("l_byteaCopy");
//        L_Bytea bas = null;
//        int copyflag = 0;

//        L_Bytea expResult = null;
//        L_Bytea result = instance.l_byteaCopy(bas, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaDestroy() {
//        System.out.println("l_byteaDestroy");
//        L_Bytea.ByReference[] pba = null;

//        instance.l_byteaDestroy(pba);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaGetSize method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaGetSize() {
//        System.out.println("l_byteaGetSize");
//        L_Bytea ba = null;

//        NativeSize expResult = null;
//        NativeSize result = instance.l_byteaGetSize(ba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaGetData method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaGetData() {
//        System.out.println("l_byteaGetData");
//        L_Bytea ba = null;
//        NativeSizeByReference psize = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_byteaGetData(ba, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaCopyData method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaCopyData() {
//        System.out.println("l_byteaCopyData");
//        L_Bytea ba = null;
//        NativeSizeByReference psize = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_byteaCopyData(ba, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaAppendData method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaAppendData() {
//        System.out.println("l_byteaAppendData");
//        L_Bytea ba = null;
//        ByteBuffer newdata = null;
//        NativeSize newbytes = null;

//        int expResult = 0;
//        int result = instance.l_byteaAppendData(ba, newdata, newbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaAppendString method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaAppendString() {
//        System.out.println("l_byteaAppendString");
//        L_Bytea ba = null;
//        ByteBuffer str = null;

//        int expResult = 0;
//        int result = instance.l_byteaAppendString(ba, str);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaJoin() {
//        System.out.println("l_byteaJoin");
//        L_Bytea ba1 = null;
//        L_Bytea.ByReference[] pba2 = null;

//        int expResult = 0;
//        int result = instance.l_byteaJoin(ba1, pba2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaSplit method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaSplit() {
//        System.out.println("l_byteaSplit");
//        L_Bytea ba1 = null;
//        NativeSize splitloc = null;
//        L_Bytea.ByReference[] pba2 = null;

//        int expResult = 0;
//        int result = instance.l_byteaSplit(ba1, splitloc, pba2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaFindEachSequence method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaFindEachSequence_4args_1() {
//        System.out.println("l_byteaFindEachSequence");
//        L_Bytea ba = null;
//        ByteBuffer sequence = null;
//        int seqlen = 0;
//        L_Dna.ByReference[] pda = null;

//        int expResult = 0;
//        int result = instance.l_byteaFindEachSequence(ba, sequence, seqlen, pda);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaFindEachSequence method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaFindEachSequence_4args_2() {
//        System.out.println("l_byteaFindEachSequence");
//        L_Bytea ba = null;
//        Pointer sequence = null;
//        int seqlen = 0;
//        L_Dna.ByReference[] pda = null;

//        int expResult = 0;
//        int result = instance.l_byteaFindEachSequence(ba, sequence, seqlen, pda);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaWrite() {
//        System.out.println("l_byteaWrite");
//        String fname = "";
//        L_Bytea ba = null;
//        NativeSize startloc = null;
//        NativeSize endloc = null;

//        int expResult = 0;
//        int result = instance.l_byteaWrite(fname, ba, startloc, endloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_byteaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_byteaWriteStream() {
//        System.out.println("l_byteaWriteStream");
//        PointerByReference fp = null;
//        L_Bytea ba = null;
//        NativeSize startloc = null;
//        NativeSize endloc = null;

//        int expResult = 0;
//        int result = instance.l_byteaWriteStream(fp, ba, startloc, endloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaCreate() {
//        System.out.println("ccbaCreate");
//        Pix pixs = null;
//        int n = 0;

//        CCBorda expResult = null;
//        CCBorda result = instance.ccbaCreate(pixs, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaDestroy() {
//        System.out.println("ccbaDestroy");
//        CCBorda.ByReference[] pccba = null;

//        instance.ccbaDestroy(pccba);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbCreate method, of class Leptonica.
//     */
//    @Test
//    public void testCcbCreate() {
//        System.out.println("ccbCreate");
//        Pix pixs = null;

//        CCBord expResult = null;
//        CCBord result = instance.ccbCreate(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testCcbDestroy() {
//        System.out.println("ccbDestroy");
//        CCBord.ByReference[] pccb = null;

//        instance.ccbDestroy(pccb);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaAddCcb method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaAddCcb() {
//        System.out.println("ccbaAddCcb");
//        CCBorda ccba = null;
//        CCBord ccb = null;

//        int expResult = 0;
//        int result = instance.ccbaAddCcb(ccba, ccb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGetCount() {
//        System.out.println("ccbaGetCount");
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaGetCount(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGetCcb method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGetCcb() {
//        System.out.println("ccbaGetCcb");
//        CCBorda ccba = null;
//        int index = 0;

//        CCBord expResult = null;
//        CCBord result = instance.ccbaGetCcb(ccba, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetAllCCBorders method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetAllCCBorders() {
//        System.out.println("pixGetAllCCBorders");
//        Pix pixs = null;

//        CCBorda expResult = null;
//        CCBorda result = instance.pixGetAllCCBorders(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetCCBorders method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetCCBorders() {
//        System.out.println("pixGetCCBorders");
//        Pix pixs = null;
//        Box box = null;

//        CCBord expResult = null;
//        CCBord result = instance.pixGetCCBorders(pixs, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetOuterBordersPtaa method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetOuterBordersPtaa() {
//        System.out.println("pixGetOuterBordersPtaa");
//        Pix pixs = null;

//        Ptaa expResult = null;
//        Ptaa result = instance.pixGetOuterBordersPtaa(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetOuterBorderPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetOuterBorderPta() {
//        System.out.println("pixGetOuterBorderPta");
//        Pix pixs = null;
//        Box box = null;

//        Pta expResult = null;
//        Pta result = instance.pixGetOuterBorderPta(pixs, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetOuterBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetOuterBorder() {
//        System.out.println("pixGetOuterBorder");
//        CCBord ccb = null;
//        Pix pixs = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixGetOuterBorder(ccb, pixs, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetHoleBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetHoleBorder() {
//        System.out.println("pixGetHoleBorder");
//        CCBord ccb = null;
//        Pix pixs = null;
//        Box box = null;
//        int xs = 0;
//        int ys = 0;

//        int expResult = 0;
//        int result = instance.pixGetHoleBorder(ccb, pixs, box, xs, ys);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findNextBorderPixel method, of class Leptonica.
//     */
//    @Test
//    public void testFindNextBorderPixel() {
//        System.out.println("findNextBorderPixel");
//        int w = 0;
//        int h = 0;
//        IntBuffer data = null;
//        int wpl = 0;
//        int px = 0;
//        int py = 0;
//        IntBuffer pqpos = null;
//        IntBuffer pnpx = null;
//        IntBuffer pnpy = null;

//        int expResult = 0;
//        int result = instance.findNextBorderPixel(w, h, data, wpl, px, py, pqpos, pnpx, pnpy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of locateOutsideSeedPixel method, of class Leptonica.
//     */
//    @Test
//    public void testLocateOutsideSeedPixel() {
//        System.out.println("locateOutsideSeedPixel");
//        int fpx = 0;
//        int fpy = 0;
//        int spx = 0;
//        int spy = 0;
//        IntBuffer pxs = null;
//        IntBuffer pys = null;

//        instance.locateOutsideSeedPixel(fpx, fpy, spx, spy, pxs, pys);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGenerateGlobalLocs method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGenerateGlobalLocs() {
//        System.out.println("ccbaGenerateGlobalLocs");
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaGenerateGlobalLocs(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGenerateStepChains method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGenerateStepChains() {
//        System.out.println("ccbaGenerateStepChains");
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaGenerateStepChains(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaStepChainsToPixCoords method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaStepChainsToPixCoords() {
//        System.out.println("ccbaStepChainsToPixCoords");
//        CCBorda ccba = null;
//        int coordtype = 0;

//        int expResult = 0;
//        int result = instance.ccbaStepChainsToPixCoords(ccba, coordtype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGenerateSPGlobalLocs method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGenerateSPGlobalLocs() {
//        System.out.println("ccbaGenerateSPGlobalLocs");
//        CCBorda ccba = null;
//        int ptsflag = 0;

//        int expResult = 0;
//        int result = instance.ccbaGenerateSPGlobalLocs(ccba, ptsflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaGenerateSinglePath method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaGenerateSinglePath() {
//        System.out.println("ccbaGenerateSinglePath");
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaGenerateSinglePath(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getCutPathForHole method, of class Leptonica.
//     */
//    @Test
//    public void testGetCutPathForHole() {
//        System.out.println("getCutPathForHole");
//        Pix pix = null;
//        Pta pta = null;
//        Box boxinner = null;
//        IntBuffer pdir = null;
//        IntBuffer plen = null;

//        Pta expResult = null;
//        Pta result = instance.getCutPathForHole(pix, pta, boxinner, pdir, plen);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaDisplayBorder method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaDisplayBorder() {
//        System.out.println("ccbaDisplayBorder");
//        CCBorda ccba = null;

//        Pix expResult = null;
//        Pix result = instance.ccbaDisplayBorder(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaDisplaySPBorder method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaDisplaySPBorder() {
//        System.out.println("ccbaDisplaySPBorder");
//        CCBorda ccba = null;

//        Pix expResult = null;
//        Pix result = instance.ccbaDisplaySPBorder(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaDisplayImage1 method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaDisplayImage1() {
//        System.out.println("ccbaDisplayImage1");
//        CCBorda ccba = null;

//        Pix expResult = null;
//        Pix result = instance.ccbaDisplayImage1(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaDisplayImage2 method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaDisplayImage2() {
//        System.out.println("ccbaDisplayImage2");
//        CCBorda ccba = null;

//        Pix expResult = null;
//        Pix result = instance.ccbaDisplayImage2(ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaWrite() {
//        System.out.println("ccbaWrite");
//        String filename = "";
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaWrite(filename, ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaWriteStream() {
//        System.out.println("ccbaWriteStream");
//        PointerByReference fp = null;
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaWriteStream(fp, ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaRead method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaRead() {
//        System.out.println("ccbaRead");
//        String filename = "";

//        CCBorda expResult = null;
//        CCBorda result = instance.ccbaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaReadStream() {
//        System.out.println("ccbaReadStream");
//        PointerByReference fp = null;

//        CCBorda expResult = null;
//        CCBorda result = instance.ccbaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaWriteSVG method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaWriteSVG() {
//        System.out.println("ccbaWriteSVG");
//        String filename = "";
//        CCBorda ccba = null;

//        int expResult = 0;
//        int result = instance.ccbaWriteSVG(filename, ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ccbaWriteSVGString method, of class Leptonica.
//     */
//    @Test
//    public void testCcbaWriteSVGString() {
//        System.out.println("ccbaWriteSVGString");
//        String filename = "";
//        CCBorda ccba = null;

//        Pointer expResult = null;
//        Pointer result = instance.ccbaWriteSVGString(filename, ccba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThin method, of class Leptonica.
//     */
//    @Test
//    public void testPixThin() {
//        System.out.println("pixThin");
//        Pix pixs = null;
//        int type = 0;
//        int connectivity = 0;
//        int maxiters = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThin(pixs, type, connectivity, maxiters);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThinGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixThinGeneral() {
//        System.out.println("pixThinGeneral");
//        Pix pixs = null;
//        int type = 0;
//        Sela sela = null;
//        int maxiters = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThinGeneral(pixs, type, sela, maxiters);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThinExamples method, of class Leptonica.
//     */
//    @Test
//    public void testPixThinExamples() {
//        System.out.println("pixThinExamples");
//        Pix pixs = null;
//        int type = 0;
//        int index = 0;
//        int maxiters = 0;
//        String selfile = "";

//        Pix expResult = null;
//        Pix result = instance.pixThinExamples(pixs, type, index, maxiters, selfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbCorrelation method, of class Leptonica.
//     */
//    @Test
//    public void testJbCorrelation() {
//        System.out.println("jbCorrelation");
//        String dirin = "";
//        float thresh = 0.0F;
//        float weight = 0.0F;
//        int components = 0;
//        String rootname = "";
//        int firstpage = 0;
//        int npages = 0;
//        int renderflag = 0;

//        int expResult = 0;
//        int result = instance.jbCorrelation(dirin, thresh, weight, components, rootname, firstpage, npages, renderflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbRankHaus method, of class Leptonica.
//     */
//    @Test
//    public void testJbRankHaus() {
//        System.out.println("jbRankHaus");
//        String dirin = "";
//        int size = 0;
//        float rank = 0.0F;
//        int components = 0;
//        String rootname = "";
//        int firstpage = 0;
//        int npages = 0;
//        int renderflag = 0;

//        int expResult = 0;
//        int result = instance.jbRankHaus(dirin, size, rank, components, rootname, firstpage, npages, renderflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbWordsInTextlines method, of class Leptonica.
//     */
//    @Test
//    public void testJbWordsInTextlines_9args_1() {
//        System.out.println("jbWordsInTextlines");
//        String dirin = "";
//        int reduction = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        float thresh = 0.0F;
//        float weight = 0.0F;
//        Numa.ByReference[] pnatl = null;
//        int firstpage = 0;
//        int npages = 0;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbWordsInTextlines(dirin, reduction, maxwidth, maxheight, thresh, weight, pnatl, firstpage, npages);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbWordsInTextlines method, of class Leptonica.
//     */
//    @Test
//    public void testJbWordsInTextlines_9args_2() {
//        System.out.println("jbWordsInTextlines");
//        Pointer dirin = null;
//        int reduction = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        float thresh = 0.0F;
//        float weight = 0.0F;
//        Numa.ByReference[] pnatl = null;
//        int firstpage = 0;
//        int npages = 0;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbWordsInTextlines(dirin, reduction, maxwidth, maxheight, thresh, weight, pnatl, firstpage, npages);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetWordsInTextlines method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetWordsInTextlines() {
//        System.out.println("pixGetWordsInTextlines");
//        Pix pixs = null;
//        int reduction = 0;
//        int minwidth = 0;
//        int minheight = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        Boxa.ByReference[] pboxad = null;
//        Pixa.ByReference[] ppixad = null;
//        Numa.ByReference[] pnai = null;

//        int expResult = 0;
//        int result = instance.pixGetWordsInTextlines(pixs, reduction, minwidth, minheight, maxwidth, maxheight, pboxad, ppixad, pnai);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetWordBoxesInTextlines method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetWordBoxesInTextlines() {
//        System.out.println("pixGetWordBoxesInTextlines");
//        Pix pixs = null;
//        int reduction = 0;
//        int minwidth = 0;
//        int minheight = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        Boxa.ByReference[] pboxad = null;
//        Numa.ByReference[] pnai = null;

//        int expResult = 0;
//        int result = instance.pixGetWordBoxesInTextlines(pixs, reduction, minwidth, minheight, maxwidth, maxheight, pboxad, pnai);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaExtractSortedPattern method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaExtractSortedPattern() {
//        System.out.println("boxaExtractSortedPattern");
//        Boxa boxa = null;
//        Numa na = null;

//        Numaa expResult = null;
//        Numaa result = instance.boxaExtractSortedPattern(boxa, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaCompareImagesByBoxes method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaCompareImagesByBoxes() {
//        System.out.println("numaaCompareImagesByBoxes");
//        Numaa naa1 = null;
//        Numaa naa2 = null;
//        int nperline = 0;
//        int nreq = 0;
//        int maxshiftx = 0;
//        int maxshifty = 0;
//        int delx = 0;
//        int dely = 0;
//        IntBuffer psame = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.numaaCompareImagesByBoxes(naa1, naa2, nperline, nreq, maxshiftx, maxshifty, delx, dely, psame, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorContent method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorContent() {
//        System.out.println("pixColorContent");
//        Pix pixs = null;
//        int rwhite = 0;
//        int gwhite = 0;
//        int bwhite = 0;
//        int mingray = 0;
//        Pix.ByReference[] ppixr = null;
//        Pix.ByReference[] ppixg = null;
//        Pix.ByReference[] ppixb = null;

//        int expResult = 0;
//        int result = instance.pixColorContent(pixs, rwhite, gwhite, bwhite, mingray, ppixr, ppixg, ppixb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorMagnitude method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorMagnitude() {
//        System.out.println("pixColorMagnitude");
//        Pix pixs = null;
//        int rwhite = 0;
//        int gwhite = 0;
//        int bwhite = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorMagnitude(pixs, rwhite, gwhite, bwhite, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMaskOverColorPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPixMaskOverColorPixels() {
//        System.out.println("pixMaskOverColorPixels");
//        Pix pixs = null;
//        int threshdiff = 0;
//        int mindist = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMaskOverColorPixels(pixs, threshdiff, mindist);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorFraction() {
//        System.out.println("pixColorFraction");
//        Pix pixs = null;
//        int darkthresh = 0;
//        int lightthresh = 0;
//        int diffthresh = 0;
//        int factor = 0;
//        FloatBuffer ppixfract = null;
//        FloatBuffer pcolorfract = null;

//        int expResult = 0;
//        int result = instance.pixColorFraction(pixs, darkthresh, lightthresh, diffthresh, factor, ppixfract, pcolorfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixNumSignificantGrayColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixNumSignificantGrayColors() {
//        System.out.println("pixNumSignificantGrayColors");
//        Pix pixs = null;
//        int darkthresh = 0;
//        int lightthresh = 0;
//        float minfract = 0.0F;
//        int factor = 0;
//        IntBuffer pncolors = null;

//        int expResult = 0;
//        int result = instance.pixNumSignificantGrayColors(pixs, darkthresh, lightthresh, minfract, factor, pncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorsForQuantization method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorsForQuantization() {
//        System.out.println("pixColorsForQuantization");
//        Pix pixs = null;
//        int thresh = 0;
//        IntBuffer pncolors = null;
//        IntBuffer piscolor = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixColorsForQuantization(pixs, thresh, pncolors, piscolor, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixNumColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixNumColors() {
//        System.out.println("pixNumColors");
//        Pix pixs = null;
//        int factor = 0;
//        IntBuffer pncolors = null;

//        int expResult = 0;
//        int result = instance.pixNumColors(pixs, factor, pncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetMostPopulatedColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetMostPopulatedColors() {
//        System.out.println("pixGetMostPopulatedColors");
//        Pix pixs = null;
//        int sigbits = 0;
//        int factor = 0;
//        int ncolors = 0;
//        PointerByReference parray = null;
//        PixColormap.ByReference[] pcmap = null;

//        int expResult = 0;
//        int result = instance.pixGetMostPopulatedColors(pixs, sigbits, factor, ncolors, parray, pcmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSimpleColorQuantize method, of class Leptonica.
//     */
//    @Test
//    public void testPixSimpleColorQuantize() {
//        System.out.println("pixSimpleColorQuantize");
//        Pix pixs = null;
//        int sigbits = 0;
//        int factor = 0;
//        int ncolors = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSimpleColorQuantize(pixs, sigbits, factor, ncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRGBHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRGBHistogram() {
//        System.out.println("pixGetRGBHistogram");
//        Pix pixs = null;
//        int sigbits = 0;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetRGBHistogram(pixs, sigbits, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeRGBIndexTables method, of class Leptonica.
//     */
//    @Test
//    public void testMakeRGBIndexTables() {
//        System.out.println("makeRGBIndexTables");
//        PointerByReference prtab = null;
//        PointerByReference pgtab = null;
//        PointerByReference pbtab = null;
//        int sigbits = 0;

//        int expResult = 0;
//        int result = instance.makeRGBIndexTables(prtab, pgtab, pbtab, sigbits);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getRGBFromIndex method, of class Leptonica.
//     */
//    @Test
//    public void testGetRGBFromIndex() {
//        System.out.println("getRGBFromIndex");
//        int index = 0;
//        int sigbits = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.getRGBFromIndex(index, sigbits, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHasHighlightRed method, of class Leptonica.
//     */
//    @Test
//    public void testPixHasHighlightRed_7args_1() {
//        System.out.println("pixHasHighlightRed");
//        Pix pixs = null;
//        int factor = 0;
//        float fract = 0.0F;
//        float fthresh = 0.0F;
//        IntBuffer phasred = null;
//        FloatBuffer pratio = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.pixHasHighlightRed(pixs, factor, fract, fthresh, phasred, pratio, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHasHighlightRed method, of class Leptonica.
//     */
//    @Test
//    public void testPixHasHighlightRed_7args_2() {
//        System.out.println("pixHasHighlightRed");
//        Pix pixs = null;
//        int factor = 0;
//        float fract = 0.0F;
//        float fthresh = 0.0F;
//        IntByReference phasred = null;
//        FloatByReference pratio = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.pixHasHighlightRed(pixs, factor, fract, fthresh, phasred, pratio, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorGrayRegions method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorGrayRegions() {
//        System.out.println("pixColorGrayRegions");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int type = 0;
//        int thresh = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorGrayRegions(pixs, boxa, type, thresh, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorGray() {
//        System.out.println("pixColorGray");
//        Pix pixs = null;
//        Box box = null;
//        int type = 0;
//        int thresh = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixColorGray(pixs, box, type, thresh, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSnapColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixSnapColor() {
//        System.out.println("pixSnapColor");
//        Pix pixd = null;
//        Pix pixs = null;
//        int srcval = 0;
//        int dstval = 0;
//        int diff = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSnapColor(pixd, pixs, srcval, dstval, diff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSnapColorCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixSnapColorCmap() {
//        System.out.println("pixSnapColorCmap");
//        Pix pixd = null;
//        Pix pixs = null;
//        int srcval = 0;
//        int dstval = 0;
//        int diff = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSnapColorCmap(pixd, pixs, srcval, dstval, diff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixLinearMapToTargetColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixLinearMapToTargetColor() {
//        System.out.println("pixLinearMapToTargetColor");
//        Pix pixd = null;
//        Pix pixs = null;
//        int srcval = 0;
//        int dstval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixLinearMapToTargetColor(pixd, pixs, srcval, dstval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixelLinearMapToTargetColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixelLinearMapToTargetColor() {
//        System.out.println("pixelLinearMapToTargetColor");
//        int scolor = 0;
//        int srcmap = 0;
//        int dstmap = 0;
//        IntBuffer pdcolor = null;

//        int expResult = 0;
//        int result = instance.pixelLinearMapToTargetColor(scolor, srcmap, dstmap, pdcolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixShiftByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixShiftByComponent() {
//        System.out.println("pixShiftByComponent");
//        Pix pixd = null;
//        Pix pixs = null;
//        int srcval = 0;
//        int dstval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixShiftByComponent(pixd, pixs, srcval, dstval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixelShiftByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixelShiftByComponent() {
//        System.out.println("pixelShiftByComponent");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        int srcval = 0;
//        int dstval = 0;
//        IntBuffer ppixel = null;

//        int expResult = 0;
//        int result = instance.pixelShiftByComponent(rval, gval, bval, srcval, dstval, ppixel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixelFractionalShift method, of class Leptonica.
//     */
//    @Test
//    public void testPixelFractionalShift() {
//        System.out.println("pixelFractionalShift");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        float fraction = 0.0F;
//        IntBuffer ppixel = null;

//        int expResult = 0;
//        int result = instance.pixelFractionalShift(rval, gval, bval, fraction, ppixel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapCreate() {
//        System.out.println("pixcmapCreate");
//        int depth = 0;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapCreate(depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapCreateRandom method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapCreateRandom() {
//        System.out.println("pixcmapCreateRandom");
//        int depth = 0;
//        int hasblack = 0;
//        int haswhite = 0;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapCreateRandom(depth, hasblack, haswhite);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapCreateLinear method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapCreateLinear() {
//        System.out.println("pixcmapCreateLinear");
//        int d = 0;
//        int nlevels = 0;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapCreateLinear(d, nlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapCopy method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapCopy() {
//        System.out.println("pixcmapCopy");
//        PixColormap cmaps = null;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapCopy(cmaps);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapDestroy() {
//        System.out.println("pixcmapDestroy");
//        PixColormap.ByReference[] pcmap = null;

//        instance.pixcmapDestroy(pcmap);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapAddColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapAddColor() {
//        System.out.println("pixcmapAddColor");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixcmapAddColor(cmap, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapAddRGBA method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapAddRGBA() {
//        System.out.println("pixcmapAddRGBA");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        int aval = 0;

//        int expResult = 0;
//        int result = instance.pixcmapAddRGBA(cmap, rval, gval, bval, aval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapAddNewColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapAddNewColor() {
//        System.out.println("pixcmapAddNewColor");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapAddNewColor(cmap, rval, gval, bval, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapAddNearestColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapAddNearestColor() {
//        System.out.println("pixcmapAddNearestColor");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapAddNearestColor(cmap, rval, gval, bval, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapUsableColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapUsableColor() {
//        System.out.println("pixcmapUsableColor");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pusable = null;

//        int expResult = 0;
//        int result = instance.pixcmapUsableColor(cmap, rval, gval, bval, pusable);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapAddBlackOrWhite method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapAddBlackOrWhite() {
//        System.out.println("pixcmapAddBlackOrWhite");
//        PixColormap cmap = null;
//        int color = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapAddBlackOrWhite(cmap, color, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapSetBlackAndWhite method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapSetBlackAndWhite() {
//        System.out.println("pixcmapSetBlackAndWhite");
//        PixColormap cmap = null;
//        int setblack = 0;
//        int setwhite = 0;

//        int expResult = 0;
//        int result = instance.pixcmapSetBlackAndWhite(cmap, setblack, setwhite);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetCount() {
//        System.out.println("pixcmapGetCount");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetCount(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetFreeCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetFreeCount() {
//        System.out.println("pixcmapGetFreeCount");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetFreeCount(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetDepth() {
//        System.out.println("pixcmapGetDepth");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetDepth(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetMinDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetMinDepth() {
//        System.out.println("pixcmapGetMinDepth");
//        PixColormap cmap = null;
//        IntBuffer pmindepth = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetMinDepth(cmap, pmindepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapClear method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapClear() {
//        System.out.println("pixcmapClear");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapClear(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetColor() {
//        System.out.println("pixcmapGetColor");
//        PixColormap cmap = null;
//        int index = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetColor(cmap, index, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetColor32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetColor32() {
//        System.out.println("pixcmapGetColor32");
//        PixColormap cmap = null;
//        int index = 0;
//        IntBuffer pval32 = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetColor32(cmap, index, pval32);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetRGBA method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetRGBA() {
//        System.out.println("pixcmapGetRGBA");
//        PixColormap cmap = null;
//        int index = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;
//        IntBuffer paval = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetRGBA(cmap, index, prval, pgval, pbval, paval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetRGBA32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetRGBA32() {
//        System.out.println("pixcmapGetRGBA32");
//        PixColormap cmap = null;
//        int index = 0;
//        IntBuffer pval32 = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetRGBA32(cmap, index, pval32);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapResetColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapResetColor() {
//        System.out.println("pixcmapResetColor");
//        PixColormap cmap = null;
//        int index = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixcmapResetColor(cmap, index, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetIndex() {
//        System.out.println("pixcmapGetIndex");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetIndex(cmap, rval, gval, bval, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapHasColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapHasColor() {
//        System.out.println("pixcmapHasColor");
//        PixColormap cmap = null;
//        IntBuffer pcolor = null;

//        int expResult = 0;
//        int result = instance.pixcmapHasColor(cmap, pcolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapIsOpaque method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapIsOpaque() {
//        System.out.println("pixcmapIsOpaque");
//        PixColormap cmap = null;
//        IntBuffer popaque = null;

//        int expResult = 0;
//        int result = instance.pixcmapIsOpaque(cmap, popaque);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapCountGrayColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapCountGrayColors() {
//        System.out.println("pixcmapCountGrayColors");
//        PixColormap cmap = null;
//        IntBuffer pngray = null;

//        int expResult = 0;
//        int result = instance.pixcmapCountGrayColors(cmap, pngray);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetRankIntensity method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetRankIntensity() {
//        System.out.println("pixcmapGetRankIntensity");
//        PixColormap cmap = null;
//        float rankval = 0.0F;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetRankIntensity(cmap, rankval, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetNearestIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetNearestIndex() {
//        System.out.println("pixcmapGetNearestIndex");
//        PixColormap cmap = null;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetNearestIndex(cmap, rval, gval, bval, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetNearestGrayIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetNearestGrayIndex() {
//        System.out.println("pixcmapGetNearestGrayIndex");
//        PixColormap cmap = null;
//        int val = 0;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetNearestGrayIndex(cmap, val, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetComponentRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetComponentRange() {
//        System.out.println("pixcmapGetComponentRange");
//        PixColormap cmap = null;
//        int color = 0;
//        IntBuffer pminval = null;
//        IntBuffer pmaxval = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetComponentRange(cmap, color, pminval, pmaxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGetExtremeValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGetExtremeValue() {
//        System.out.println("pixcmapGetExtremeValue");
//        PixColormap cmap = null;
//        int type = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.pixcmapGetExtremeValue(cmap, type, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGrayToColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGrayToColor() {
//        System.out.println("pixcmapGrayToColor");
//        int color = 0;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapGrayToColor(color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapColorToGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapColorToGray() {
//        System.out.println("pixcmapColorToGray");
//        PixColormap cmaps = null;
//        float rwt = 0.0F;
//        float gwt = 0.0F;
//        float bwt = 0.0F;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapColorToGray(cmaps, rwt, gwt, bwt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapReadStream() {
//        System.out.println("pixcmapReadStream");
//        PointerByReference fp = null;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapWriteStream() {
//        System.out.println("pixcmapWriteStream");
//        PointerByReference fp = null;
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapWriteStream(fp, cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapToArrays method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapToArrays() {
//        System.out.println("pixcmapToArrays");
//        PixColormap cmap = null;
//        PointerByReference prmap = null;
//        PointerByReference pgmap = null;
//        PointerByReference pbmap = null;
//        PointerByReference pamap = null;

//        int expResult = 0;
//        int result = instance.pixcmapToArrays(cmap, prmap, pgmap, pbmap, pamap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapToRGBTable method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapToRGBTable() {
//        System.out.println("pixcmapToRGBTable");
//        PixColormap cmap = null;
//        PointerByReference ptab = null;
//        IntBuffer pncolors = null;

//        int expResult = 0;
//        int result = instance.pixcmapToRGBTable(cmap, ptab, pncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapSerializeToMemory method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapSerializeToMemory() {
//        System.out.println("pixcmapSerializeToMemory");
//        PixColormap cmap = null;
//        int cpc = 0;
//        IntBuffer pncolors = null;
//        PointerByReference pdata = null;

//        int expResult = 0;
//        int result = instance.pixcmapSerializeToMemory(cmap, cpc, pncolors, pdata);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapDeserializeFromMemory method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapDeserializeFromMemory() {
//        System.out.println("pixcmapDeserializeFromMemory");
//        ByteBuffer data = null;
//        int cpc = 0;
//        int ncolors = 0;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixcmapDeserializeFromMemory(data, cpc, ncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapConvertToHex method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapConvertToHex() {
//        System.out.println("pixcmapConvertToHex");
//        ByteBuffer data = null;
//        int ncolors = 0;

//        Pointer expResult = null;
//        Pointer result = instance.pixcmapConvertToHex(data, ncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapGammaTRC method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapGammaTRC() {
//        System.out.println("pixcmapGammaTRC");
//        PixColormap cmap = null;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        int expResult = 0;
//        int result = instance.pixcmapGammaTRC(cmap, gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapContrastTRC method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapContrastTRC() {
//        System.out.println("pixcmapContrastTRC");
//        PixColormap cmap = null;
//        float factor = 0.0F;

//        int expResult = 0;
//        int result = instance.pixcmapContrastTRC(cmap, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapShiftIntensity method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapShiftIntensity() {
//        System.out.println("pixcmapShiftIntensity");
//        PixColormap cmap = null;
//        float fraction = 0.0F;

//        int expResult = 0;
//        int result = instance.pixcmapShiftIntensity(cmap, fraction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapShiftByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapShiftByComponent() {
//        System.out.println("pixcmapShiftByComponent");
//        PixColormap cmap = null;
//        int srcval = 0;
//        int dstval = 0;

//        int expResult = 0;
//        int result = instance.pixcmapShiftByComponent(cmap, srcval, dstval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorMorph() {
//        System.out.println("pixColorMorph");
//        Pix pixs = null;
//        int type = 0;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorMorph(pixs, type, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctreeColorQuant method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctreeColorQuant() {
//        System.out.println("pixOctreeColorQuant");
//        Pix pixs = null;
//        int colors = 0;
//        int ditherflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOctreeColorQuant(pixs, colors, ditherflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctreeColorQuantGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctreeColorQuantGeneral() {
//        System.out.println("pixOctreeColorQuantGeneral");
//        Pix pixs = null;
//        int colors = 0;
//        int ditherflag = 0;
//        float validthresh = 0.0F;
//        float colorthresh = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixOctreeColorQuantGeneral(pixs, colors, ditherflag, validthresh, colorthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeRGBToIndexTables method, of class Leptonica.
//     */
//    @Test
//    public void testMakeRGBToIndexTables() {
//        System.out.println("makeRGBToIndexTables");
//        PointerByReference prtab = null;
//        PointerByReference pgtab = null;
//        PointerByReference pbtab = null;
//        int cqlevels = 0;

//        int expResult = 0;
//        int result = instance.makeRGBToIndexTables(prtab, pgtab, pbtab, cqlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getOctcubeIndexFromRGB method, of class Leptonica.
//     */
//    @Test
//    public void testGetOctcubeIndexFromRGB() {
//        System.out.println("getOctcubeIndexFromRGB");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer rtab = null;
//        IntBuffer gtab = null;
//        IntBuffer btab = null;
//        IntBuffer pindex = null;

//        instance.getOctcubeIndexFromRGB(rval, gval, bval, rtab, gtab, btab, pindex);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctreeQuantByPopulation method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctreeQuantByPopulation() {
//        System.out.println("pixOctreeQuantByPopulation");
//        Pix pixs = null;
//        int level = 0;
//        int ditherflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOctreeQuantByPopulation(pixs, level, ditherflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctreeQuantNumColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctreeQuantNumColors() {
//        System.out.println("pixOctreeQuantNumColors");
//        Pix pixs = null;
//        int maxcolors = 0;
//        int subsample = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOctreeQuantNumColors(pixs, maxcolors, subsample);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctcubeQuantMixedWithGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctcubeQuantMixedWithGray() {
//        System.out.println("pixOctcubeQuantMixedWithGray");
//        Pix pixs = null;
//        int depth = 0;
//        int graylevels = 0;
//        int delta = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOctcubeQuantMixedWithGray(pixs, depth, graylevels, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFixedOctcubeQuant256 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFixedOctcubeQuant256() {
//        System.out.println("pixFixedOctcubeQuant256");
//        Pix pixs = null;
//        int ditherflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFixedOctcubeQuant256(pixs, ditherflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFewColorsOctcubeQuant1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFewColorsOctcubeQuant1() {
//        System.out.println("pixFewColorsOctcubeQuant1");
//        Pix pixs = null;
//        int level = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFewColorsOctcubeQuant1(pixs, level);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFewColorsOctcubeQuant2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFewColorsOctcubeQuant2() {
//        System.out.println("pixFewColorsOctcubeQuant2");
//        Pix pixs = null;
//        int level = 0;
//        Numa na = null;
//        int ncolors = 0;
//        IntBuffer pnerrors = null;

//        Pix expResult = null;
//        Pix result = instance.pixFewColorsOctcubeQuant2(pixs, level, na, ncolors, pnerrors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFewColorsOctcubeQuantMixed method, of class Leptonica.
//     */
//    @Test
//    public void testPixFewColorsOctcubeQuantMixed() {
//        System.out.println("pixFewColorsOctcubeQuantMixed");
//        Pix pixs = null;
//        int level = 0;
//        int darkthresh = 0;
//        int lightthresh = 0;
//        int diffthresh = 0;
//        float minfract = 0.0F;
//        int maxspan = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFewColorsOctcubeQuantMixed(pixs, level, darkthresh, lightthresh, diffthresh, minfract, maxspan);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFixedOctcubeQuantGenRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixFixedOctcubeQuantGenRGB() {
//        System.out.println("pixFixedOctcubeQuantGenRGB");
//        Pix pixs = null;
//        int level = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFixedOctcubeQuantGenRGB(pixs, level);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuantFromCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuantFromCmap() {
//        System.out.println("pixQuantFromCmap");
//        Pix pixs = null;
//        PixColormap cmap = null;
//        int mindepth = 0;
//        int level = 0;
//        int metric = 0;

//        Pix expResult = null;
//        Pix result = instance.pixQuantFromCmap(pixs, cmap, mindepth, level, metric);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctcubeQuantFromCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctcubeQuantFromCmap() {
//        System.out.println("pixOctcubeQuantFromCmap");
//        Pix pixs = null;
//        PixColormap cmap = null;
//        int mindepth = 0;
//        int level = 0;
//        int metric = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOctcubeQuantFromCmap(pixs, cmap, mindepth, level, metric);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctcubeQuantFromCmapLUT method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctcubeQuantFromCmapLUT() {
//        System.out.println("pixOctcubeQuantFromCmapLUT");
//        Pix pixs = null;
//        PixColormap cmap = null;
//        int mindepth = 0;
//        IntBuffer cmaptab = null;
//        IntBuffer rtab = null;
//        IntBuffer gtab = null;
//        IntBuffer btab = null;

//        Pix expResult = null;
//        Pix result = instance.pixOctcubeQuantFromCmapLUT(pixs, cmap, mindepth, cmaptab, rtab, gtab, btab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOctcubeHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixOctcubeHistogram() {
//        System.out.println("pixOctcubeHistogram");
//        Pix pixs = null;
//        int level = 0;
//        IntBuffer pncolors = null;

//        Numa expResult = null;
//        Numa result = instance.pixOctcubeHistogram(pixs, level, pncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapToOctcubeLUT method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapToOctcubeLUT() {
//        System.out.println("pixcmapToOctcubeLUT");
//        PixColormap cmap = null;
//        int level = 0;
//        int metric = 0;

//        IntByReference expResult = null;
//        IntByReference result = instance.pixcmapToOctcubeLUT(cmap, level, metric);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveUnusedColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveUnusedColors() {
//        System.out.println("pixRemoveUnusedColors");
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixRemoveUnusedColors(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixNumberOccupiedOctcubes method, of class Leptonica.
//     */
//    @Test
//    public void testPixNumberOccupiedOctcubes() {
//        System.out.println("pixNumberOccupiedOctcubes");
//        Pix pix = null;
//        int level = 0;
//        int mincount = 0;
//        float minfract = 0.0F;
//        IntBuffer pncolors = null;

//        int expResult = 0;
//        int result = instance.pixNumberOccupiedOctcubes(pix, level, mincount, minfract, pncolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMedianCutQuant method, of class Leptonica.
//     */
//    @Test
//    public void testPixMedianCutQuant() {
//        System.out.println("pixMedianCutQuant");
//        Pix pixs = null;
//        int ditherflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMedianCutQuant(pixs, ditherflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMedianCutQuantGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixMedianCutQuantGeneral() {
//        System.out.println("pixMedianCutQuantGeneral");
//        Pix pixs = null;
//        int ditherflag = 0;
//        int outdepth = 0;
//        int maxcolors = 0;
//        int sigbits = 0;
//        int maxsub = 0;
//        int checkbw = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMedianCutQuantGeneral(pixs, ditherflag, outdepth, maxcolors, sigbits, maxsub, checkbw);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMedianCutQuantMixed method, of class Leptonica.
//     */
//    @Test
//    public void testPixMedianCutQuantMixed() {
//        System.out.println("pixMedianCutQuantMixed");
//        Pix pixs = null;
//        int ncolor = 0;
//        int ngray = 0;
//        int darkthresh = 0;
//        int lightthresh = 0;
//        int diffthresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMedianCutQuantMixed(pixs, ncolor, ngray, darkthresh, lightthresh, diffthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFewColorsMedianCutQuantMixed method, of class Leptonica.
//     */
//    @Test
//    public void testPixFewColorsMedianCutQuantMixed() {
//        System.out.println("pixFewColorsMedianCutQuantMixed");
//        Pix pixs = null;
//        int ncolor = 0;
//        int ngray = 0;
//        int maxncolors = 0;
//        int darkthresh = 0;
//        int lightthresh = 0;
//        int diffthresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFewColorsMedianCutQuantMixed(pixs, ncolor, ngray, maxncolors, darkthresh, lightthresh, diffthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMedianCutHisto method, of class Leptonica.
//     */
//    @Test
//    public void testPixMedianCutHisto() {
//        System.out.println("pixMedianCutHisto");
//        Pix pixs = null;
//        int sigbits = 0;
//        int subsample = 0;

//        IntByReference expResult = null;
//        IntByReference result = instance.pixMedianCutHisto(pixs, sigbits, subsample);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorSegment method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorSegment() {
//        System.out.println("pixColorSegment");
//        Pix pixs = null;
//        int maxdist = 0;
//        int maxcolors = 0;
//        int selsize = 0;
//        int finalcolors = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorSegment(pixs, maxdist, maxcolors, selsize, finalcolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorSegmentCluster method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorSegmentCluster() {
//        System.out.println("pixColorSegmentCluster");
//        Pix pixs = null;
//        int maxdist = 0;
//        int maxcolors = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorSegmentCluster(pixs, maxdist, maxcolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAssignToNearestColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixAssignToNearestColor() {
//        System.out.println("pixAssignToNearestColor");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        int level = 0;
//        IntBuffer countarray = null;

//        int expResult = 0;
//        int result = instance.pixAssignToNearestColor(pixd, pixs, pixm, level, countarray);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorSegmentClean method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorSegmentClean() {
//        System.out.println("pixColorSegmentClean");
//        Pix pixs = null;
//        int selsize = 0;
//        IntBuffer countarray = null;

//        int expResult = 0;
//        int result = instance.pixColorSegmentClean(pixs, selsize, countarray);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorSegmentRemoveColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorSegmentRemoveColors() {
//        System.out.println("pixColorSegmentRemoveColors");
//        Pix pixd = null;
//        Pix pixs = null;
//        int finalcolors = 0;

//        int expResult = 0;
//        int result = instance.pixColorSegmentRemoveColors(pixd, pixs, finalcolors);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToHSV method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToHSV() {
//        System.out.println("pixConvertRGBToHSV");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToHSV(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertHSVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertHSVToRGB() {
//        System.out.println("pixConvertHSVToRGB");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertHSVToRGB(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertRGBToHSV method, of class Leptonica.
//     */
//    @Test
//    public void testConvertRGBToHSV() {
//        System.out.println("convertRGBToHSV");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer phval = null;
//        IntBuffer psval = null;
//        IntBuffer pvval = null;

//        int expResult = 0;
//        int result = instance.convertRGBToHSV(rval, gval, bval, phval, psval, pvval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertHSVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testConvertHSVToRGB() {
//        System.out.println("convertHSVToRGB");
//        int hval = 0;
//        int sval = 0;
//        int vval = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.convertHSVToRGB(hval, sval, vval, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapConvertRGBToHSV method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapConvertRGBToHSV() {
//        System.out.println("pixcmapConvertRGBToHSV");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapConvertRGBToHSV(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapConvertHSVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapConvertHSVToRGB() {
//        System.out.println("pixcmapConvertHSVToRGB");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapConvertHSVToRGB(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToHue method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToHue() {
//        System.out.println("pixConvertRGBToHue");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToHue(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToSaturation method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToSaturation() {
//        System.out.println("pixConvertRGBToSaturation");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToSaturation(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToValue() {
//        System.out.println("pixConvertRGBToValue");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToValue(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeRangeMaskHS method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeRangeMaskHS() {
//        System.out.println("pixMakeRangeMaskHS");
//        Pix pixs = null;
//        int huecenter = 0;
//        int huehw = 0;
//        int satcenter = 0;
//        int sathw = 0;
//        int regionflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMakeRangeMaskHS(pixs, huecenter, huehw, satcenter, sathw, regionflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeRangeMaskHV method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeRangeMaskHV() {
//        System.out.println("pixMakeRangeMaskHV");
//        Pix pixs = null;
//        int huecenter = 0;
//        int huehw = 0;
//        int valcenter = 0;
//        int valhw = 0;
//        int regionflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMakeRangeMaskHV(pixs, huecenter, huehw, valcenter, valhw, regionflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeRangeMaskSV method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeRangeMaskSV() {
//        System.out.println("pixMakeRangeMaskSV");
//        Pix pixs = null;
//        int satcenter = 0;
//        int sathw = 0;
//        int valcenter = 0;
//        int valhw = 0;
//        int regionflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMakeRangeMaskSV(pixs, satcenter, sathw, valcenter, valhw, regionflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeHistoHS method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeHistoHS() {
//        System.out.println("pixMakeHistoHS");
//        Pix pixs = null;
//        int factor = 0;
//        Numa.ByReference[] pnahue = null;
//        Numa.ByReference[] pnasat = null;

//        Pix expResult = null;
//        Pix result = instance.pixMakeHistoHS(pixs, factor, pnahue, pnasat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeHistoHV method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeHistoHV() {
//        System.out.println("pixMakeHistoHV");
//        Pix pixs = null;
//        int factor = 0;
//        Numa.ByReference[] pnahue = null;
//        Numa.ByReference[] pnaval = null;

//        Pix expResult = null;
//        Pix result = instance.pixMakeHistoHV(pixs, factor, pnahue, pnaval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeHistoSV method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeHistoSV() {
//        System.out.println("pixMakeHistoSV");
//        Pix pixs = null;
//        int factor = 0;
//        Numa.ByReference[] pnasat = null;
//        Numa.ByReference[] pnaval = null;

//        Pix expResult = null;
//        Pix result = instance.pixMakeHistoSV(pixs, factor, pnasat, pnaval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindHistoPeaksHSV method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindHistoPeaksHSV() {
//        System.out.println("pixFindHistoPeaksHSV");
//        Pix pixs = null;
//        int type = 0;
//        int width = 0;
//        int height = 0;
//        int npeaks = 0;
//        float erasefactor = 0.0F;
//        Pta.ByReference[] ppta = null;
//        Numa.ByReference[] pnatot = null;
//        Pixa.ByReference[] ppixa = null;

//        int expResult = 0;
//        int result = instance.pixFindHistoPeaksHSV(pixs, type, width, height, npeaks, erasefactor, ppta, pnatot, ppixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of displayHSVColorRange method, of class Leptonica.
//     */
//    @Test
//    public void testDisplayHSVColorRange() {
//        System.out.println("displayHSVColorRange");
//        int hval = 0;
//        int sval = 0;
//        int vval = 0;
//        int huehw = 0;
//        int sathw = 0;
//        int nsamp = 0;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.displayHSVColorRange(hval, sval, vval, huehw, sathw, nsamp, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToYUV method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToYUV() {
//        System.out.println("pixConvertRGBToYUV");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToYUV(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertYUVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertYUVToRGB() {
//        System.out.println("pixConvertYUVToRGB");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertYUVToRGB(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertRGBToYUV method, of class Leptonica.
//     */
//    @Test
//    public void testConvertRGBToYUV() {
//        System.out.println("convertRGBToYUV");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer pyval = null;
//        IntBuffer puval = null;
//        IntBuffer pvval = null;

//        int expResult = 0;
//        int result = instance.convertRGBToYUV(rval, gval, bval, pyval, puval, pvval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertYUVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testConvertYUVToRGB() {
//        System.out.println("convertYUVToRGB");
//        int yval = 0;
//        int uval = 0;
//        int vval = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.convertYUVToRGB(yval, uval, vval, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapConvertRGBToYUV method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapConvertRGBToYUV() {
//        System.out.println("pixcmapConvertRGBToYUV");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapConvertRGBToYUV(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcmapConvertYUVToRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixcmapConvertYUVToRGB() {
//        System.out.println("pixcmapConvertYUVToRGB");
//        PixColormap cmap = null;

//        int expResult = 0;
//        int result = instance.pixcmapConvertYUVToRGB(cmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEqual method, of class Leptonica.
//     */
//    @Test
//    public void testPixEqual() {
//        System.out.println("pixEqual");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.pixEqual(pix1, pix2, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEqualWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixEqualWithAlpha() {
//        System.out.println("pixEqualWithAlpha");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int use_alpha = 0;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.pixEqualWithAlpha(pix1, pix2, use_alpha, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEqualWithCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixEqualWithCmap() {
//        System.out.println("pixEqualWithCmap");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.pixEqualWithCmap(pix1, pix2, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUsesCmapColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixUsesCmapColor() {
//        System.out.println("pixUsesCmapColor");
//        Pix pixs = null;
//        IntBuffer pcolor = null;

//        int expResult = 0;
//        int result = instance.pixUsesCmapColor(pixs, pcolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCorrelationBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixCorrelationBinary() {
//        System.out.println("pixCorrelationBinary");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.pixCorrelationBinary(pix1, pix2, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayDiffBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayDiffBinary() {
//        System.out.println("pixDisplayDiffBinary");
//        Pix pix1 = null;
//        Pix pix2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayDiffBinary(pix1, pix2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareBinary_5args_1() {
//        System.out.println("pixCompareBinary");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        FloatBuffer pfract = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareBinary(pix1, pix2, comptype, pfract, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareBinary_5args_2() {
//        System.out.println("pixCompareBinary");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        FloatByReference pfract = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareBinary(pix1, pix2, comptype, pfract, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareGrayOrRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareGrayOrRGB_8args_1() {
//        System.out.println("pixCompareGrayOrRGB");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntBuffer psame = null;
//        FloatBuffer pdiff = null;
//        FloatBuffer prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareGrayOrRGB(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareGrayOrRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareGrayOrRGB_8args_2() {
//        System.out.println("pixCompareGrayOrRGB");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntByReference psame = null;
//        FloatByReference pdiff = null;
//        FloatByReference prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareGrayOrRGB(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareGray_8args_1() {
//        System.out.println("pixCompareGray");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntBuffer psame = null;
//        FloatBuffer pdiff = null;
//        FloatBuffer prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareGray(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareGray_8args_2() {
//        System.out.println("pixCompareGray");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntByReference psame = null;
//        FloatByReference pdiff = null;
//        FloatByReference prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareGray(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareRGB_8args_1() {
//        System.out.println("pixCompareRGB");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntBuffer psame = null;
//        FloatBuffer pdiff = null;
//        FloatBuffer prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareRGB(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareRGB_8args_2() {
//        System.out.println("pixCompareRGB");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int comptype = 0;
//        int plottype = 0;
//        IntByReference psame = null;
//        FloatByReference pdiff = null;
//        FloatByReference prmsdiff = null;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareRGB(pix1, pix2, comptype, plottype, psame, pdiff, prmsdiff, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareTiled() {
//        System.out.println("pixCompareTiled");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int sx = 0;
//        int sy = 0;
//        int type = 0;
//        Pix.ByReference[] ppixdiff = null;

//        int expResult = 0;
//        int result = instance.pixCompareTiled(pix1, pix2, sx, sy, type, ppixdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareRankDifference method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareRankDifference() {
//        System.out.println("pixCompareRankDifference");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixCompareRankDifference(pix1, pix2, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTestForSimilarity method, of class Leptonica.
//     */
//    @Test
//    public void testPixTestForSimilarity() {
//        System.out.println("pixTestForSimilarity");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int factor = 0;
//        int mindiff = 0;
//        float maxfract = 0.0F;
//        float maxave = 0.0F;
//        IntBuffer psimilar = null;
//        int printstats = 0;

//        int expResult = 0;
//        int result = instance.pixTestForSimilarity(pix1, pix2, factor, mindiff, maxfract, maxave, psimilar, printstats);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetDifferenceStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetDifferenceStats() {
//        System.out.println("pixGetDifferenceStats");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int factor = 0;
//        int mindiff = 0;
//        FloatBuffer pfractdiff = null;
//        FloatBuffer pavediff = null;
//        int printstats = 0;

//        int expResult = 0;
//        int result = instance.pixGetDifferenceStats(pix1, pix2, factor, mindiff, pfractdiff, pavediff, printstats);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetDifferenceHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetDifferenceHistogram() {
//        System.out.println("pixGetDifferenceHistogram");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetDifferenceHistogram(pix1, pix2, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetPerceptualDiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetPerceptualDiff_8args_1() {
//        System.out.println("pixGetPerceptualDiff");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int sampling = 0;
//        int dilation = 0;
//        int mindiff = 0;
//        FloatBuffer pfract = null;
//        Pix.ByReference[] ppixdiff1 = null;
//        Pix.ByReference[] ppixdiff2 = null;

//        int expResult = 0;
//        int result = instance.pixGetPerceptualDiff(pixs1, pixs2, sampling, dilation, mindiff, pfract, ppixdiff1, ppixdiff2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetPerceptualDiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetPerceptualDiff_8args_2() {
//        System.out.println("pixGetPerceptualDiff");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int sampling = 0;
//        int dilation = 0;
//        int mindiff = 0;
//        FloatByReference pfract = null;
//        Pix.ByReference[] ppixdiff1 = null;
//        Pix.ByReference[] ppixdiff2 = null;

//        int expResult = 0;
//        int result = instance.pixGetPerceptualDiff(pixs1, pixs2, sampling, dilation, mindiff, pfract, ppixdiff1, ppixdiff2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetPSNR method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetPSNR() {
//        System.out.println("pixGetPSNR");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int factor = 0;
//        FloatBuffer ppsnr = null;

//        int expResult = 0;
//        int result = instance.pixGetPSNR(pix1, pix2, factor, ppsnr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCompareWithTranslation method, of class Leptonica.
//     */
//    @Test
//    public void testPixCompareWithTranslation() {
//        System.out.println("pixCompareWithTranslation");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int thresh = 0;
//        IntBuffer pdelx = null;
//        IntBuffer pdely = null;
//        FloatBuffer pscore = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixCompareWithTranslation(pix1, pix2, thresh, pdelx, pdely, pscore, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBestCorrelation method, of class Leptonica.
//     */
//    @Test
//    public void testPixBestCorrelation() {
//        System.out.println("pixBestCorrelation");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int area1 = 0;
//        int area2 = 0;
//        int etransx = 0;
//        int etransy = 0;
//        int maxshift = 0;
//        IntBuffer tab8 = null;
//        IntBuffer pdelx = null;
//        IntBuffer pdely = null;
//        FloatBuffer pscore = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixBestCorrelation(pix1, pix2, area1, area2, etransx, etransy, maxshift, tab8, pdelx, pdely, pscore, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixConnComp() {
//        System.out.println("pixConnComp");
//        Pix pixs = null;
//        Pixa.ByReference[] ppixa = null;
//        int connectivity = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixConnComp(pixs, ppixa, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConnCompPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixConnCompPixa() {
//        System.out.println("pixConnCompPixa");
//        Pix pixs = null;
//        Pixa.ByReference[] ppixa = null;
//        int connectivity = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixConnCompPixa(pixs, ppixa, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConnCompBB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConnCompBB() {
//        System.out.println("pixConnCompBB");
//        Pix pixs = null;
//        int connectivity = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixConnCompBB(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountConnComp() {
//        System.out.println("pixCountConnComp");
//        Pix pixs = null;
//        int connectivity = 0;
//        IntBuffer pcount = null;

//        int expResult = 0;
//        int result = instance.pixCountConnComp(pixs, connectivity, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of nextOnPixelInRaster method, of class Leptonica.
//     */
//    @Test
//    public void testNextOnPixelInRaster() {
//        System.out.println("nextOnPixelInRaster");
//        Pix pixs = null;
//        int xstart = 0;
//        int ystart = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;

//        int expResult = 0;
//        int result = instance.nextOnPixelInRaster(pixs, xstart, ystart, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of nextOnPixelInRasterLow method, of class Leptonica.
//     */
//    @Test
//    public void testNextOnPixelInRasterLow() {
//        System.out.println("nextOnPixelInRasterLow");
//        IntBuffer data = null;
//        int w = 0;
//        int h = 0;
//        int wpl = 0;
//        int xstart = 0;
//        int ystart = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;

//        int expResult = 0;
//        int result = instance.nextOnPixelInRasterLow(data, w, h, wpl, xstart, ystart, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillBB method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillBB() {
//        System.out.println("pixSeedfillBB");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;
//        int connectivity = 0;

//        Box expResult = null;
//        Box result = instance.pixSeedfillBB(pixs, stack, x, y, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfill4BB method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfill4BB() {
//        System.out.println("pixSeedfill4BB");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;

//        Box expResult = null;
//        Box result = instance.pixSeedfill4BB(pixs, stack, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfill8BB method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfill8BB() {
//        System.out.println("pixSeedfill8BB");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;

//        Box expResult = null;
//        Box result = instance.pixSeedfill8BB(pixs, stack, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfill method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfill() {
//        System.out.println("pixSeedfill");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;
//        int connectivity = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfill(pixs, stack, x, y, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfill4 method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfill4() {
//        System.out.println("pixSeedfill4");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfill4(pixs, stack, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfill8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfill8() {
//        System.out.println("pixSeedfill8");
//        Pix pixs = null;
//        L_Stack stack = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfill8(pixs, stack, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFilesTo1bpp method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFilesTo1bpp() {
//        System.out.println("convertFilesTo1bpp");
//        String dirin = "";
//        String substr = "";
//        int upscaling = 0;
//        int thresh = 0;
//        int firstpage = 0;
//        int npages = 0;
//        String dirout = "";
//        int outformat = 0;

//        int expResult = 0;
//        int result = instance.convertFilesTo1bpp(dirin, substr, upscaling, thresh, firstpage, npages, dirout, outformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconv method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconv() {
//        System.out.println("pixBlockconv");
//        Pix pix = null;
//        int wc = 0;
//        int hc = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconv(pix, wc, hc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconvGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconvGray() {
//        System.out.println("pixBlockconvGray");
//        Pix pixs = null;
//        Pix pixacc = null;
//        int wc = 0;
//        int hc = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconvGray(pixs, pixacc, wc, hc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconvAccum method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconvAccum() {
//        System.out.println("pixBlockconvAccum");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconvAccum(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconvGrayUnnormalized method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconvGrayUnnormalized() {
//        System.out.println("pixBlockconvGrayUnnormalized");
//        Pix pixs = null;
//        int wc = 0;
//        int hc = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconvGrayUnnormalized(pixs, wc, hc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconvTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconvTiled() {
//        System.out.println("pixBlockconvTiled");
//        Pix pix = null;
//        int wc = 0;
//        int hc = 0;
//        int nx = 0;
//        int ny = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconvTiled(pix, wc, hc, nx, ny);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockconvGrayTile method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockconvGrayTile() {
//        System.out.println("pixBlockconvGrayTile");
//        Pix pixs = null;
//        Pix pixacc = null;
//        int wc = 0;
//        int hc = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlockconvGrayTile(pixs, pixacc, wc, hc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWindowedStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixWindowedStats() {
//        System.out.println("pixWindowedStats");
//        Pix pixs = null;
//        int wc = 0;
//        int hc = 0;
//        int hasborder = 0;
//        Pix.ByReference[] ppixm = null;
//        Pix.ByReference[] ppixms = null;
//        FPix.ByReference[] pfpixv = null;
//        FPix.ByReference[] pfpixrv = null;

//        int expResult = 0;
//        int result = instance.pixWindowedStats(pixs, wc, hc, hasborder, ppixm, ppixms, pfpixv, pfpixrv);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWindowedMean method, of class Leptonica.
//     */
//    @Test
//    public void testPixWindowedMean() {
//        System.out.println("pixWindowedMean");
//        Pix pixs = null;
//        int wc = 0;
//        int hc = 0;
//        int hasborder = 0;
//        int normflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixWindowedMean(pixs, wc, hc, hasborder, normflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWindowedMeanSquare method, of class Leptonica.
//     */
//    @Test
//    public void testPixWindowedMeanSquare() {
//        System.out.println("pixWindowedMeanSquare");
//        Pix pixs = null;
//        int wc = 0;
//        int hc = 0;
//        int hasborder = 0;

//        Pix expResult = null;
//        Pix result = instance.pixWindowedMeanSquare(pixs, wc, hc, hasborder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWindowedVariance method, of class Leptonica.
//     */
//    @Test
//    public void testPixWindowedVariance() {
//        System.out.println("pixWindowedVariance");
//        Pix pixm = null;
//        Pix pixms = null;
//        FPix.ByReference[] pfpixv = null;
//        FPix.ByReference[] pfpixrv = null;

//        int expResult = 0;
//        int result = instance.pixWindowedVariance(pixm, pixms, pfpixv, pfpixrv);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMeanSquareAccum method, of class Leptonica.
//     */
//    @Test
//    public void testPixMeanSquareAccum() {
//        System.out.println("pixMeanSquareAccum");
//        Pix pixs = null;

//        DPix expResult = null;
//        DPix result = instance.pixMeanSquareAccum(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlockrank method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlockrank() {
//        System.out.println("pixBlockrank");
//        Pix pixs = null;
//        Pix pixacc = null;
//        int wc = 0;
//        int hc = 0;
//        float rank = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixBlockrank(pixs, pixacc, wc, hc, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlocksum method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlocksum() {
//        System.out.println("pixBlocksum");
//        Pix pixs = null;
//        Pix pixacc = null;
//        int wc = 0;
//        int hc = 0;

//        Pix expResult = null;
//        Pix result = instance.pixBlocksum(pixs, pixacc, wc, hc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCensusTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixCensusTransform() {
//        System.out.println("pixCensusTransform");
//        Pix pixs = null;
//        int halfsize = 0;
//        Pix pixacc = null;

//        Pix expResult = null;
//        Pix result = instance.pixCensusTransform(pixs, halfsize, pixacc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvolve method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvolve() {
//        System.out.println("pixConvolve");
//        Pix pixs = null;
//        L_Kernel kel = null;
//        int outdepth = 0;
//        int normflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvolve(pixs, kel, outdepth, normflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvolveSep method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvolveSep() {
//        System.out.println("pixConvolveSep");
//        Pix pixs = null;
//        L_Kernel kelx = null;
//        L_Kernel kely = null;
//        int outdepth = 0;
//        int normflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvolveSep(pixs, kelx, kely, outdepth, normflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvolveRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvolveRGB() {
//        System.out.println("pixConvolveRGB");
//        Pix pixs = null;
//        L_Kernel kel = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvolveRGB(pixs, kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvolveRGBSep method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvolveRGBSep() {
//        System.out.println("pixConvolveRGBSep");
//        Pix pixs = null;
//        L_Kernel kelx = null;
//        L_Kernel kely = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvolveRGBSep(pixs, kelx, kely);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixConvolve method, of class Leptonica.
//     */
//    @Test
//    public void testFpixConvolve() {
//        System.out.println("fpixConvolve");
//        FPix fpixs = null;
//        L_Kernel kel = null;
//        int normflag = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixConvolve(fpixs, kel, normflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixConvolveSep method, of class Leptonica.
//     */
//    @Test
//    public void testFpixConvolveSep() {
//        System.out.println("fpixConvolveSep");
//        FPix fpixs = null;
//        L_Kernel kelx = null;
//        L_Kernel kely = null;
//        int normflag = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixConvolveSep(fpixs, kelx, kely, normflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvolveWithBias method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvolveWithBias() {
//        System.out.println("pixConvolveWithBias");
//        Pix pixs = null;
//        L_Kernel kel1 = null;
//        L_Kernel kel2 = null;
//        int force8 = 0;
//        IntBuffer pbias = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvolveWithBias(pixs, kel1, kel2, force8, pbias);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setConvolveSampling method, of class Leptonica.
//     */
//    @Test
//    public void testL_setConvolveSampling() {
//        System.out.println("l_setConvolveSampling");
//        int xfact = 0;
//        int yfact = 0;

//        instance.l_setConvolveSampling(xfact, yfact);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddGaussianNoise method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddGaussianNoise() {
//        System.out.println("pixAddGaussianNoise");
//        Pix pixs = null;
//        float stdev = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixAddGaussianNoise(pixs, stdev);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gaussDistribSampling method, of class Leptonica.
//     */
//    @Test
//    public void testGaussDistribSampling() {
//        System.out.println("gaussDistribSampling");

//        float expResult = 0.0F;
//        float result = instance.gaussDistribSampling();
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCorrelationScore method, of class Leptonica.
//     */
//    @Test
//    public void testPixCorrelationScore() {
//        System.out.println("pixCorrelationScore");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int area1 = 0;
//        int area2 = 0;
//        float delx = 0.0F;
//        float dely = 0.0F;
//        int maxdiffw = 0;
//        int maxdiffh = 0;
//        IntBuffer tab = null;
//        FloatBuffer pscore = null;

//        int expResult = 0;
//        int result = instance.pixCorrelationScore(pix1, pix2, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, pscore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCorrelationScoreThresholded method, of class Leptonica.
//     */
//    @Test
//    public void testPixCorrelationScoreThresholded() {
//        System.out.println("pixCorrelationScoreThresholded");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int area1 = 0;
//        int area2 = 0;
//        float delx = 0.0F;
//        float dely = 0.0F;
//        int maxdiffw = 0;
//        int maxdiffh = 0;
//        IntBuffer tab = null;
//        IntBuffer downcount = null;
//        float score_threshold = 0.0F;

//        int expResult = 0;
//        int result = instance.pixCorrelationScoreThresholded(pix1, pix2, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, downcount, score_threshold);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCorrelationScoreSimple method, of class Leptonica.
//     */
//    @Test
//    public void testPixCorrelationScoreSimple() {
//        System.out.println("pixCorrelationScoreSimple");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int area1 = 0;
//        int area2 = 0;
//        float delx = 0.0F;
//        float dely = 0.0F;
//        int maxdiffw = 0;
//        int maxdiffh = 0;
//        IntBuffer tab = null;
//        FloatBuffer pscore = null;

//        int expResult = 0;
//        int result = instance.pixCorrelationScoreSimple(pix1, pix2, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, pscore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCorrelationScoreShifted method, of class Leptonica.
//     */
//    @Test
//    public void testPixCorrelationScoreShifted() {
//        System.out.println("pixCorrelationScoreShifted");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int area1 = 0;
//        int area2 = 0;
//        int delx = 0;
//        int dely = 0;
//        IntBuffer tab = null;
//        FloatBuffer pscore = null;

//        int expResult = 0;
//        int result = instance.pixCorrelationScoreShifted(pix1, pix2, area1, area2, delx, dely, tab, pscore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpCreate method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpCreate() {
//        System.out.println("dewarpCreate");
//        Pix pixs = null;
//        int pageno = 0;

//        L_Dewarp expResult = null;
//        L_Dewarp result = instance.dewarpCreate(pixs, pageno);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpCreateRef method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpCreateRef() {
//        System.out.println("dewarpCreateRef");
//        int pageno = 0;
//        int refpage = 0;

//        L_Dewarp expResult = null;
//        L_Dewarp result = instance.dewarpCreateRef(pageno, refpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpDestroy() {
//        System.out.println("dewarpDestroy");
//        L_Dewarp.ByReference[] pdew = null;

//        instance.dewarpDestroy(pdew);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaCreate() {
//        System.out.println("dewarpaCreate");
//        int nptrs = 0;
//        int sampling = 0;
//        int redfactor = 0;
//        int minlines = 0;
//        int maxdist = 0;

//        L_Dewarpa expResult = null;
//        L_Dewarpa result = instance.dewarpaCreate(nptrs, sampling, redfactor, minlines, maxdist);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaCreateFromPixacomp method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaCreateFromPixacomp() {
//        System.out.println("dewarpaCreateFromPixacomp");
//        PixaComp pixac = null;
//        int useboth = 0;
//        int sampling = 0;
//        int minlines = 0;
//        int maxdist = 0;

//        L_Dewarpa expResult = null;
//        L_Dewarpa result = instance.dewarpaCreateFromPixacomp(pixac, useboth, sampling, minlines, maxdist);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaDestroy() {
//        System.out.println("dewarpaDestroy");
//        L_Dewarpa.ByReference[] pdewa = null;

//        instance.dewarpaDestroy(pdewa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaDestroyDewarp method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaDestroyDewarp() {
//        System.out.println("dewarpaDestroyDewarp");
//        L_Dewarpa dewa = null;
//        int pageno = 0;

//        int expResult = 0;
//        int result = instance.dewarpaDestroyDewarp(dewa, pageno);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaInsertDewarp method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaInsertDewarp() {
//        System.out.println("dewarpaInsertDewarp");
//        L_Dewarpa dewa = null;
//        L_Dewarp dew = null;

//        int expResult = 0;
//        int result = instance.dewarpaInsertDewarp(dewa, dew);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaGetDewarp method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaGetDewarp() {
//        System.out.println("dewarpaGetDewarp");
//        L_Dewarpa dewa = null;
//        int index = 0;

//        L_Dewarp expResult = null;
//        L_Dewarp result = instance.dewarpaGetDewarp(dewa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaSetCurvatures method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaSetCurvatures() {
//        System.out.println("dewarpaSetCurvatures");
//        L_Dewarpa dewa = null;
//        int max_linecurv = 0;
//        int min_diff_linecurv = 0;
//        int max_diff_linecurv = 0;
//        int max_edgecurv = 0;
//        int max_diff_edgecurv = 0;
//        int max_edgeslope = 0;

//        int expResult = 0;
//        int result = instance.dewarpaSetCurvatures(dewa, max_linecurv, min_diff_linecurv, max_diff_linecurv, max_edgecurv, max_diff_edgecurv, max_edgeslope);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaUseBothArrays method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaUseBothArrays() {
//        System.out.println("dewarpaUseBothArrays");
//        L_Dewarpa dewa = null;
//        int useboth = 0;

//        int expResult = 0;
//        int result = instance.dewarpaUseBothArrays(dewa, useboth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaSetMaxDistance method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaSetMaxDistance() {
//        System.out.println("dewarpaSetMaxDistance");
//        L_Dewarpa dewa = null;
//        int maxdist = 0;

//        int expResult = 0;
//        int result = instance.dewarpaSetMaxDistance(dewa, maxdist);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpRead method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpRead() {
//        System.out.println("dewarpRead");
//        String filename = "";

//        L_Dewarp expResult = null;
//        L_Dewarp result = instance.dewarpRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpReadStream() {
//        System.out.println("dewarpReadStream");
//        PointerByReference fp = null;

//        L_Dewarp expResult = null;
//        L_Dewarp result = instance.dewarpReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpWrite method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpWrite() {
//        System.out.println("dewarpWrite");
//        String filename = "";
//        L_Dewarp dew = null;

//        int expResult = 0;
//        int result = instance.dewarpWrite(filename, dew);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpWriteStream() {
//        System.out.println("dewarpWriteStream");
//        PointerByReference fp = null;
//        L_Dewarp dew = null;

//        int expResult = 0;
//        int result = instance.dewarpWriteStream(fp, dew);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaRead method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaRead() {
//        System.out.println("dewarpaRead");
//        String filename = "";

//        L_Dewarpa expResult = null;
//        L_Dewarpa result = instance.dewarpaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaReadStream() {
//        System.out.println("dewarpaReadStream");
//        PointerByReference fp = null;

//        L_Dewarpa expResult = null;
//        L_Dewarpa result = instance.dewarpaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaWrite() {
//        System.out.println("dewarpaWrite");
//        String filename = "";
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaWrite(filename, dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaWriteStream() {
//        System.out.println("dewarpaWriteStream");
//        PointerByReference fp = null;
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaWriteStream(fp, dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpBuildPageModel method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpBuildPageModel() {
//        System.out.println("dewarpBuildPageModel");
//        L_Dewarp dew = null;
//        String debugfile = "";

//        int expResult = 0;
//        int result = instance.dewarpBuildPageModel(dew, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpFindVertDisparity method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpFindVertDisparity() {
//        System.out.println("dewarpFindVertDisparity");
//        L_Dewarp dew = null;
//        Ptaa ptaa = null;
//        int rotflag = 0;

//        int expResult = 0;
//        int result = instance.dewarpFindVertDisparity(dew, ptaa, rotflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpFindHorizDisparity method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpFindHorizDisparity() {
//        System.out.println("dewarpFindHorizDisparity");
//        L_Dewarp dew = null;
//        Ptaa ptaa = null;

//        int expResult = 0;
//        int result = instance.dewarpFindHorizDisparity(dew, ptaa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpGetTextlineCenters method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpGetTextlineCenters() {
//        System.out.println("dewarpGetTextlineCenters");
//        Pix pixs = null;
//        int debugflag = 0;

//        Ptaa expResult = null;
//        Ptaa result = instance.dewarpGetTextlineCenters(pixs, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpRemoveShortLines method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpRemoveShortLines() {
//        System.out.println("dewarpRemoveShortLines");
//        Pix pixs = null;
//        Ptaa ptaas = null;
//        float fract = 0.0F;
//        int debugflag = 0;

//        Ptaa expResult = null;
//        Ptaa result = instance.dewarpRemoveShortLines(pixs, ptaas, fract, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpBuildLineModel method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpBuildLineModel() {
//        System.out.println("dewarpBuildLineModel");
//        L_Dewarp dew = null;
//        int opensize = 0;
//        String debugfile = "";

//        int expResult = 0;
//        int result = instance.dewarpBuildLineModel(dew, opensize, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaModelStatus method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaModelStatus() {
//        System.out.println("dewarpaModelStatus");
//        L_Dewarpa dewa = null;
//        int pageno = 0;
//        IntBuffer pvsuccess = null;
//        IntBuffer phsuccess = null;

//        int expResult = 0;
//        int result = instance.dewarpaModelStatus(dewa, pageno, pvsuccess, phsuccess);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaApplyDisparity method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaApplyDisparity_8args_1() {
//        System.out.println("dewarpaApplyDisparity");
//        L_Dewarpa dewa = null;
//        int pageno = 0;
//        Pix pixs = null;
//        int grayin = 0;
//        int x = 0;
//        int y = 0;
//        Pix.ByReference[] ppixd = null;
//        String debugfile = "";

//        int expResult = 0;
//        int result = instance.dewarpaApplyDisparity(dewa, pageno, pixs, grayin, x, y, ppixd, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaApplyDisparity method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaApplyDisparity_8args_2() {
//        System.out.println("dewarpaApplyDisparity");
//        L_Dewarpa dewa = null;
//        int pageno = 0;
//        Pix pixs = null;
//        int grayin = 0;
//        int x = 0;
//        int y = 0;
//        Pix.ByReference[] ppixd = null;
//        Pointer debugfile = null;

//        int expResult = 0;
//        int result = instance.dewarpaApplyDisparity(dewa, pageno, pixs, grayin, x, y, ppixd, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpMinimize method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpMinimize() {
//        System.out.println("dewarpMinimize");
//        L_Dewarp dew = null;

//        int expResult = 0;
//        int result = instance.dewarpMinimize(dew);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpPopulateFullRes method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpPopulateFullRes() {
//        System.out.println("dewarpPopulateFullRes");
//        L_Dewarp dew = null;
//        Pix pix = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.dewarpPopulateFullRes(dew, pix, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpSinglePage method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpSinglePage() {
//        System.out.println("dewarpSinglePage");
//        Pix pixs = null;
//        int thresh = 0;
//        int adaptive = 0;
//        int use_both = 0;
//        Pix.ByReference[] ppixd = null;
//        L_Dewarpa.ByReference[] pdewa = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.dewarpSinglePage(pixs, thresh, adaptive, use_both, ppixd, pdewa, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaListPages method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaListPages() {
//        System.out.println("dewarpaListPages");
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaListPages(dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaSetValidModels method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaSetValidModels() {
//        System.out.println("dewarpaSetValidModels");
//        L_Dewarpa dewa = null;
//        int notests = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.dewarpaSetValidModels(dewa, notests, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaInsertRefModels method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaInsertRefModels() {
//        System.out.println("dewarpaInsertRefModels");
//        L_Dewarpa dewa = null;
//        int notests = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.dewarpaInsertRefModels(dewa, notests, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaStripRefModels method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaStripRefModels() {
//        System.out.println("dewarpaStripRefModels");
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaStripRefModels(dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaRestoreModels method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaRestoreModels() {
//        System.out.println("dewarpaRestoreModels");
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaRestoreModels(dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaInfo method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaInfo() {
//        System.out.println("dewarpaInfo");
//        PointerByReference fp = null;
//        L_Dewarpa dewa = null;

//        int expResult = 0;
//        int result = instance.dewarpaInfo(fp, dewa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaModelStats method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaModelStats() {
//        System.out.println("dewarpaModelStats");
//        L_Dewarpa dewa = null;
//        IntBuffer pnnone = null;
//        IntBuffer pnvsuccess = null;
//        IntBuffer pnvvalid = null;
//        IntBuffer pnhsuccess = null;
//        IntBuffer pnhvalid = null;
//        IntBuffer pnref = null;

//        int expResult = 0;
//        int result = instance.dewarpaModelStats(dewa, pnnone, pnvsuccess, pnvvalid, pnhsuccess, pnhvalid, pnref);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpaShowArrays method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpaShowArrays() {
//        System.out.println("dewarpaShowArrays");
//        L_Dewarpa dewa = null;
//        float scalefact = 0.0F;
//        int first = 0;
//        int last = 0;
//        String fontdir = "";

//        int expResult = 0;
//        int result = instance.dewarpaShowArrays(dewa, scalefact, first, last, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpDebug method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpDebug() {
//        System.out.println("dewarpDebug");
//        L_Dewarp dew = null;
//        String subdir = "";
//        int index = 0;

//        int expResult = 0;
//        int result = instance.dewarpDebug(dew, subdir, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dewarpShowResults method, of class Leptonica.
//     */
//    @Test
//    public void testDewarpShowResults() {
//        System.out.println("dewarpShowResults");
//        L_Dewarpa dewa = null;
//        Sarray sa = null;
//        Boxa boxa = null;
//        int firstpage = 0;
//        int lastpage = 0;
//        String fontdir = "";
//        String pdfout = "";

//        int expResult = 0;
//        int result = instance.dewarpShowResults(dewa, sa, boxa, firstpage, lastpage, fontdir, pdfout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaCreate() {
//        System.out.println("l_dnaCreate");
//        int n = 0;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaCreateFromIArray method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaCreateFromIArray() {
//        System.out.println("l_dnaCreateFromIArray");
//        IntBuffer iarray = null;
//        int size = 0;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaCreateFromIArray(iarray, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaCreateFromDArray method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaCreateFromDArray() {
//        System.out.println("l_dnaCreateFromDArray");
//        DoubleBuffer darray = null;
//        int size = 0;
//        int copyflag = 0;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaCreateFromDArray(darray, size, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaMakeSequence method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaMakeSequence() {
//        System.out.println("l_dnaMakeSequence");
//        double startval = 0.0;
//        double increment = 0.0;
//        int size = 0;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaMakeSequence(startval, increment, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaDestroy() {
//        System.out.println("l_dnaDestroy");
//        L_Dna.ByReference[] pda = null;

//        instance.l_dnaDestroy(pda);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaCopy() {
//        System.out.println("l_dnaCopy");
//        L_Dna da = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaCopy(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaClone method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaClone() {
//        System.out.println("l_dnaClone");
//        L_Dna da = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaClone(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaEmpty method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaEmpty() {
//        System.out.println("l_dnaEmpty");
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaEmpty(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaAddNumber method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaAddNumber() {
//        System.out.println("l_dnaAddNumber");
//        L_Dna da = null;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaAddNumber(da, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaInsertNumber method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaInsertNumber() {
//        System.out.println("l_dnaInsertNumber");
//        L_Dna da = null;
//        int index = 0;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaInsertNumber(da, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaRemoveNumber method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaRemoveNumber() {
//        System.out.println("l_dnaRemoveNumber");
//        L_Dna da = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.l_dnaRemoveNumber(da, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaReplaceNumber method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaReplaceNumber() {
//        System.out.println("l_dnaReplaceNumber");
//        L_Dna da = null;
//        int index = 0;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaReplaceNumber(da, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetCount() {
//        System.out.println("l_dnaGetCount");
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaGetCount(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaSetCount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaSetCount() {
//        System.out.println("l_dnaSetCount");
//        L_Dna da = null;
//        int newcount = 0;

//        int expResult = 0;
//        int result = instance.l_dnaSetCount(da, newcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetDValue method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetDValue() {
//        System.out.println("l_dnaGetDValue");
//        L_Dna da = null;
//        int index = 0;
//        DoubleBuffer pval = null;

//        int expResult = 0;
//        int result = instance.l_dnaGetDValue(da, index, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetIValue method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetIValue() {
//        System.out.println("l_dnaGetIValue");
//        L_Dna da = null;
//        int index = 0;
//        IntBuffer pival = null;

//        int expResult = 0;
//        int result = instance.l_dnaGetIValue(da, index, pival);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaSetValue method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaSetValue() {
//        System.out.println("l_dnaSetValue");
//        L_Dna da = null;
//        int index = 0;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaSetValue(da, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaShiftValue method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaShiftValue() {
//        System.out.println("l_dnaShiftValue");
//        L_Dna da = null;
//        int index = 0;
//        double diff = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaShiftValue(da, index, diff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetIArray method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetIArray() {
//        System.out.println("l_dnaGetIArray");
//        L_Dna da = null;

//        IntByReference expResult = null;
//        IntByReference result = instance.l_dnaGetIArray(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetDArray method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetDArray() {
//        System.out.println("l_dnaGetDArray");
//        L_Dna da = null;
//        int copyflag = 0;

//        DoubleByReference expResult = null;
//        DoubleByReference result = instance.l_dnaGetDArray(da, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetRefcount() {
//        System.out.println("l_dnaGetRefcount");
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaGetRefcount(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaChangeRefcount() {
//        System.out.println("l_dnaChangeRefcount");
//        L_Dna da = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.l_dnaChangeRefcount(da, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaGetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaGetParameters() {
//        System.out.println("l_dnaGetParameters");
//        L_Dna da = null;
//        DoubleBuffer pstartx = null;
//        DoubleBuffer pdelx = null;

//        int expResult = 0;
//        int result = instance.l_dnaGetParameters(da, pstartx, pdelx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaSetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaSetParameters() {
//        System.out.println("l_dnaSetParameters");
//        L_Dna da = null;
//        double startx = 0.0;
//        double delx = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaSetParameters(da, startx, delx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaCopyParameters method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaCopyParameters() {
//        System.out.println("l_dnaCopyParameters");
//        L_Dna dad = null;
//        L_Dna das = null;

//        int expResult = 0;
//        int result = instance.l_dnaCopyParameters(dad, das);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaRead method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaRead() {
//        System.out.println("l_dnaRead");
//        String filename = "";

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaReadStream() {
//        System.out.println("l_dnaReadStream");
//        PointerByReference fp = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaWrite() {
//        System.out.println("l_dnaWrite");
//        String filename = "";
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaWrite(filename, da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaWriteStream() {
//        System.out.println("l_dnaWriteStream");
//        PointerByReference fp = null;
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaWriteStream(fp, da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaCreate() {
//        System.out.println("l_dnaaCreate");
//        int n = 0;

//        L_Dnaa expResult = null;
//        L_Dnaa result = instance.l_dnaaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaDestroy() {
//        System.out.println("l_dnaaDestroy");
//        L_Dnaa.ByReference[] pdaa = null;

//        instance.l_dnaaDestroy(pdaa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaAddDna method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaAddDna() {
//        System.out.println("l_dnaaAddDna");
//        L_Dnaa daa = null;
//        L_Dna da = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.l_dnaaAddDna(daa, da, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaGetCount() {
//        System.out.println("l_dnaaGetCount");
//        L_Dnaa daa = null;

//        int expResult = 0;
//        int result = instance.l_dnaaGetCount(daa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaGetDnaCount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaGetDnaCount() {
//        System.out.println("l_dnaaGetDnaCount");
//        L_Dnaa daa = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.l_dnaaGetDnaCount(daa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaGetNumberCount method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaGetNumberCount() {
//        System.out.println("l_dnaaGetNumberCount");
//        L_Dnaa daa = null;

//        int expResult = 0;
//        int result = instance.l_dnaaGetNumberCount(daa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaGetDna method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaGetDna() {
//        System.out.println("l_dnaaGetDna");
//        L_Dnaa daa = null;
//        int index = 0;
//        int accessflag = 0;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaaGetDna(daa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaReplaceDna method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaReplaceDna() {
//        System.out.println("l_dnaaReplaceDna");
//        L_Dnaa daa = null;
//        int index = 0;
//        L_Dna da = null;

//        int expResult = 0;
//        int result = instance.l_dnaaReplaceDna(daa, index, da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaGetValue method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaGetValue() {
//        System.out.println("l_dnaaGetValue");
//        L_Dnaa daa = null;
//        int i = 0;
//        int j = 0;
//        DoubleBuffer pval = null;

//        int expResult = 0;
//        int result = instance.l_dnaaGetValue(daa, i, j, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaAddNumber method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaAddNumber() {
//        System.out.println("l_dnaaAddNumber");
//        L_Dnaa daa = null;
//        int index = 0;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.l_dnaaAddNumber(daa, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaRead method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaRead() {
//        System.out.println("l_dnaaRead");
//        String filename = "";

//        L_Dnaa expResult = null;
//        L_Dnaa result = instance.l_dnaaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaReadStream() {
//        System.out.println("l_dnaaReadStream");
//        PointerByReference fp = null;

//        L_Dnaa expResult = null;
//        L_Dnaa result = instance.l_dnaaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaWrite() {
//        System.out.println("l_dnaaWrite");
//        String filename = "";
//        L_Dnaa daa = null;

//        int expResult = 0;
//        int result = instance.l_dnaaWrite(filename, daa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaaWriteStream() {
//        System.out.println("l_dnaaWriteStream");
//        PointerByReference fp = null;
//        L_Dnaa daa = null;

//        int expResult = 0;
//        int result = instance.l_dnaaWriteStream(fp, daa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaMakeDelta method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaMakeDelta() {
//        System.out.println("l_dnaMakeDelta");
//        L_Dna das = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.l_dnaMakeDelta(das);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaConvertToNuma method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaConvertToNuma() {
//        System.out.println("l_dnaConvertToNuma");
//        L_Dna da = null;

//        Numa expResult = null;
//        Numa result = instance.l_dnaConvertToNuma(da);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaConvertToDna method, of class Leptonica.
//     */
//    @Test
//    public void testNumaConvertToDna() {
//        System.out.println("numaConvertToDna");
//        Numa na = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.numaConvertToDna(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_dnaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testL_dnaJoin() {
//        System.out.println("l_dnaJoin");
//        L_Dna dad = null;
//        L_Dna das = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.l_dnaJoin(dad, das, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphDwa_2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphDwa_2() {
//        System.out.println("pixMorphDwa_2");
//        Pix pixd = null;
//        Pix pixs = null;
//        int operation = 0;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphDwa_2(pixd, pixs, operation, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFMorphopGen_2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFMorphopGen_2() {
//        System.out.println("pixFMorphopGen_2");
//        Pix pixd = null;
//        Pix pixs = null;
//        int operation = 0;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixFMorphopGen_2(pixd, pixs, operation, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fmorphopgen_low_2 method, of class Leptonica.
//     */
//    @Test
//    public void testFmorphopgen_low_2() {
//        System.out.println("fmorphopgen_low_2");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.fmorphopgen_low_2(datad, w, h, wpld, datas, wpls, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSobelEdgeFilter method, of class Leptonica.
//     */
//    @Test
//    public void testPixSobelEdgeFilter() {
//        System.out.println("pixSobelEdgeFilter");
//        Pix pixs = null;
//        int orientflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSobelEdgeFilter(pixs, orientflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTwoSidedEdgeFilter method, of class Leptonica.
//     */
//    @Test
//    public void testPixTwoSidedEdgeFilter() {
//        System.out.println("pixTwoSidedEdgeFilter");
//        Pix pixs = null;
//        int orientflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixTwoSidedEdgeFilter(pixs, orientflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMeasureEdgeSmoothness method, of class Leptonica.
//     */
//    @Test
//    public void testPixMeasureEdgeSmoothness() {
//        System.out.println("pixMeasureEdgeSmoothness");
//        Pix pixs = null;
//        int side = 0;
//        int minjump = 0;
//        int minreversal = 0;
//        FloatBuffer pjpl = null;
//        FloatBuffer pjspl = null;
//        FloatBuffer prpl = null;
//        String debugfile = "";

//        int expResult = 0;
//        int result = instance.pixMeasureEdgeSmoothness(pixs, side, minjump, minreversal, pjpl, pjspl, prpl, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetEdgeProfile method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetEdgeProfile() {
//        System.out.println("pixGetEdgeProfile");
//        Pix pixs = null;
//        int side = 0;
//        String debugfile = "";

//        Numa expResult = null;
//        Numa result = instance.pixGetEdgeProfile(pixs, side, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetLastOffPixelInRun method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetLastOffPixelInRun() {
//        System.out.println("pixGetLastOffPixelInRun");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;
//        int direction = 0;
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.pixGetLastOffPixelInRun(pixs, x, y, direction, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetLastOnPixelInRun method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetLastOnPixelInRun() {
//        System.out.println("pixGetLastOnPixelInRun");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;
//        int direction = 0;
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.pixGetLastOnPixelInRun(pixs, x, y, direction, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGammaTRC method, of class Leptonica.
//     */
//    @Test
//    public void testPixGammaTRC() {
//        System.out.println("pixGammaTRC");
//        Pix pixd = null;
//        Pix pixs = null;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGammaTRC(pixd, pixs, gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGammaTRCMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGammaTRCMasked() {
//        System.out.println("pixGammaTRCMasked");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGammaTRCMasked(pixd, pixs, pixm, gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGammaTRCWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixGammaTRCWithAlpha() {
//        System.out.println("pixGammaTRCWithAlpha");
//        Pix pixd = null;
//        Pix pixs = null;
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGammaTRCWithAlpha(pixd, pixs, gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGammaTRC method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGammaTRC() {
//        System.out.println("numaGammaTRC");
//        float gamma = 0.0F;
//        int minval = 0;
//        int maxval = 0;

//        Numa expResult = null;
//        Numa result = instance.numaGammaTRC(gamma, minval, maxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixContrastTRC method, of class Leptonica.
//     */
//    @Test
//    public void testPixContrastTRC() {
//        System.out.println("pixContrastTRC");
//        Pix pixd = null;
//        Pix pixs = null;
//        float factor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixContrastTRC(pixd, pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixContrastTRCMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixContrastTRCMasked() {
//        System.out.println("pixContrastTRCMasked");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        float factor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixContrastTRCMasked(pixd, pixs, pixm, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaContrastTRC method, of class Leptonica.
//     */
//    @Test
//    public void testNumaContrastTRC() {
//        System.out.println("numaContrastTRC");
//        float factor = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaContrastTRC(factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEqualizeTRC method, of class Leptonica.
//     */
//    @Test
//    public void testPixEqualizeTRC() {
//        System.out.println("pixEqualizeTRC");
//        Pix pixd = null;
//        Pix pixs = null;
//        float fract = 0.0F;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixEqualizeTRC(pixd, pixs, fract, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaEqualizeTRC method, of class Leptonica.
//     */
//    @Test
//    public void testNumaEqualizeTRC() {
//        System.out.println("numaEqualizeTRC");
//        Pix pix = null;
//        float fract = 0.0F;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.numaEqualizeTRC(pix, fract, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTRCMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixTRCMap() {
//        System.out.println("pixTRCMap");
//        Pix pixs = null;
//        Pix pixm = null;
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.pixTRCMap(pixs, pixm, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMasking method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMasking() {
//        System.out.println("pixUnsharpMasking");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMasking(pixs, halfwidth, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMaskingGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMaskingGray() {
//        System.out.println("pixUnsharpMaskingGray");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMaskingGray(pixs, halfwidth, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMaskingFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMaskingFast() {
//        System.out.println("pixUnsharpMaskingFast");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;
//        int direction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMaskingFast(pixs, halfwidth, fract, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMaskingGrayFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMaskingGrayFast() {
//        System.out.println("pixUnsharpMaskingGrayFast");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;
//        int direction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMaskingGrayFast(pixs, halfwidth, fract, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMaskingGray1D method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMaskingGray1D() {
//        System.out.println("pixUnsharpMaskingGray1D");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;
//        int direction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMaskingGray1D(pixs, halfwidth, fract, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnsharpMaskingGray2D method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnsharpMaskingGray2D() {
//        System.out.println("pixUnsharpMaskingGray2D");
//        Pix pixs = null;
//        int halfwidth = 0;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixUnsharpMaskingGray2D(pixs, halfwidth, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixModifyHue method, of class Leptonica.
//     */
//    @Test
//    public void testPixModifyHue() {
//        System.out.println("pixModifyHue");
//        Pix pixd = null;
//        Pix pixs = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixModifyHue(pixd, pixs, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixModifySaturation method, of class Leptonica.
//     */
//    @Test
//    public void testPixModifySaturation() {
//        System.out.println("pixModifySaturation");
//        Pix pixd = null;
//        Pix pixs = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixModifySaturation(pixd, pixs, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMeasureSaturation method, of class Leptonica.
//     */
//    @Test
//    public void testPixMeasureSaturation() {
//        System.out.println("pixMeasureSaturation");
//        Pix pixs = null;
//        int factor = 0;
//        FloatBuffer psat = null;

//        int expResult = 0;
//        int result = instance.pixMeasureSaturation(pixs, factor, psat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixModifyBrightness method, of class Leptonica.
//     */
//    @Test
//    public void testPixModifyBrightness() {
//        System.out.println("pixModifyBrightness");
//        Pix pixd = null;
//        Pix pixs = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixModifyBrightness(pixd, pixs, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorShiftRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorShiftRGB() {
//        System.out.println("pixColorShiftRGB");
//        Pix pixs = null;
//        float rfract = 0.0F;
//        float gfract = 0.0F;
//        float bfract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixColorShiftRGB(pixs, rfract, gfract, bfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMultConstantColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixMultConstantColor() {
//        System.out.println("pixMultConstantColor");
//        Pix pixs = null;
//        float rfact = 0.0F;
//        float gfact = 0.0F;
//        float bfact = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixMultConstantColor(pixs, rfact, gfact, bfact);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMultMatrixColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixMultMatrixColor() {
//        System.out.println("pixMultMatrixColor");
//        Pix pixs = null;
//        L_Kernel kel = null;

//        Pix expResult = null;
//        Pix result = instance.pixMultMatrixColor(pixs, kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHalfEdgeByBandpass method, of class Leptonica.
//     */
//    @Test
//    public void testPixHalfEdgeByBandpass() {
//        System.out.println("pixHalfEdgeByBandpass");
//        Pix pixs = null;
//        int sm1h = 0;
//        int sm1v = 0;
//        int sm2h = 0;
//        int sm2v = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHalfEdgeByBandpass(pixs, sm1h, sm1v, sm2h, sm2v);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fhmtautogen method, of class Leptonica.
//     */
//    @Test
//    public void testFhmtautogen() {
//        System.out.println("fhmtautogen");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fhmtautogen(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fhmtautogen1 method, of class Leptonica.
//     */
//    @Test
//    public void testFhmtautogen1() {
//        System.out.println("fhmtautogen1");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fhmtautogen1(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fhmtautogen2 method, of class Leptonica.
//     */
//    @Test
//    public void testFhmtautogen2() {
//        System.out.println("fhmtautogen2");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fhmtautogen2(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHMTDwa_1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixHMTDwa_1() {
//        System.out.println("pixHMTDwa_1");
//        Pix pixd = null;
//        Pix pixs = null;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixHMTDwa_1(pixd, pixs, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFHMTGen_1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFHMTGen_1() {
//        System.out.println("pixFHMTGen_1");
//        Pix pixd = null;
//        Pix pixs = null;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixFHMTGen_1(pixd, pixs, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fhmtgen_low_1 method, of class Leptonica.
//     */
//    @Test
//    public void testFhmtgen_low_1() {
//        System.out.println("fhmtgen_low_1");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.fhmtgen_low_1(datad, w, h, wpld, datas, wpls, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixItalicWords method, of class Leptonica.
//     */
//    @Test
//    public void testPixItalicWords() {
//        System.out.println("pixItalicWords");
//        Pix pixs = null;
//        Boxa boxaw = null;
//        Pix pixw = null;
//        Boxa.ByReference[] pboxa = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixItalicWords(pixs, boxaw, pixw, pboxa, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOrientDetect method, of class Leptonica.
//     */
//    @Test
//    public void testPixOrientDetect() {
//        System.out.println("pixOrientDetect");
//        Pix pixs = null;
//        FloatBuffer pupconf = null;
//        FloatBuffer pleftconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixOrientDetect(pixs, pupconf, pleftconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeOrientDecision method, of class Leptonica.
//     */
//    @Test
//    public void testMakeOrientDecision() {
//        System.out.println("makeOrientDecision");
//        float upconf = 0.0F;
//        float leftconf = 0.0F;
//        float minupconf = 0.0F;
//        float minratio = 0.0F;
//        IntBuffer porient = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.makeOrientDecision(upconf, leftconf, minupconf, minratio, porient, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUpDownDetect method, of class Leptonica.
//     */
//    @Test
//    public void testPixUpDownDetect() {
//        System.out.println("pixUpDownDetect");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixUpDownDetect(pixs, pconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUpDownDetectGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixUpDownDetectGeneral() {
//        System.out.println("pixUpDownDetectGeneral");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int npixels = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixUpDownDetectGeneral(pixs, pconf, mincount, npixels, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOrientDetectDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixOrientDetectDwa() {
//        System.out.println("pixOrientDetectDwa");
//        Pix pixs = null;
//        FloatBuffer pupconf = null;
//        FloatBuffer pleftconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixOrientDetectDwa(pixs, pupconf, pleftconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUpDownDetectDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixUpDownDetectDwa() {
//        System.out.println("pixUpDownDetectDwa");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixUpDownDetectDwa(pixs, pconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUpDownDetectGeneralDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixUpDownDetectGeneralDwa() {
//        System.out.println("pixUpDownDetectGeneralDwa");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int npixels = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixUpDownDetectGeneralDwa(pixs, pconf, mincount, npixels, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMirrorDetect method, of class Leptonica.
//     */
//    @Test
//    public void testPixMirrorDetect() {
//        System.out.println("pixMirrorDetect");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixMirrorDetect(pixs, pconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMirrorDetectDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixMirrorDetectDwa() {
//        System.out.println("pixMirrorDetectDwa");
//        Pix pixs = null;
//        FloatBuffer pconf = null;
//        int mincount = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixMirrorDetectDwa(pixs, pconf, mincount, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFlipFHMTGen method, of class Leptonica.
//     */
//    @Test
//    public void testPixFlipFHMTGen() {
//        System.out.println("pixFlipFHMTGen");
//        Pix pixd = null;
//        Pix pixs = null;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixFlipFHMTGen(pixd, pixs, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fmorphautogen method, of class Leptonica.
//     */
//    @Test
//    public void testFmorphautogen() {
//        System.out.println("fmorphautogen");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fmorphautogen(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fmorphautogen1 method, of class Leptonica.
//     */
//    @Test
//    public void testFmorphautogen1() {
//        System.out.println("fmorphautogen1");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fmorphautogen1(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fmorphautogen2 method, of class Leptonica.
//     */
//    @Test
//    public void testFmorphautogen2() {
//        System.out.println("fmorphautogen2");
//        Sela sela = null;
//        int fileindex = 0;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.fmorphautogen2(sela, fileindex, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphDwa_1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphDwa_1() {
//        System.out.println("pixMorphDwa_1");
//        Pix pixd = null;
//        Pix pixs = null;
//        int operation = 0;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphDwa_1(pixd, pixs, operation, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFMorphopGen_1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixFMorphopGen_1() {
//        System.out.println("pixFMorphopGen_1");
//        Pix pixd = null;
//        Pix pixs = null;
//        int operation = 0;
//        ByteBuffer selname = null;

//        Pix expResult = null;
//        Pix result = instance.pixFMorphopGen_1(pixd, pixs, operation, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fmorphopgen_low_1 method, of class Leptonica.
//     */
//    @Test
//    public void testFmorphopgen_low_1() {
//        System.out.println("fmorphopgen_low_1");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.fmorphopgen_low_1(datad, w, h, wpld, datas, wpls, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixCreate method, of class Leptonica.
//     */
//    @Test
//    public void testFpixCreate() {
//        System.out.println("fpixCreate");
//        int width = 0;
//        int height = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixCreate(width, height);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixCreateTemplate method, of class Leptonica.
//     */
//    @Test
//    public void testFpixCreateTemplate() {
//        System.out.println("fpixCreateTemplate");
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixCreateTemplate(fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixClone method, of class Leptonica.
//     */
//    @Test
//    public void testFpixClone() {
//        System.out.println("fpixClone");
//        FPix fpix = null;

//        FPix expResult = null;
//        FPix result = instance.fpixClone(fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixCopy method, of class Leptonica.
//     */
//    @Test
//    public void testFpixCopy() {
//        System.out.println("fpixCopy");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixCopy(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixResizeImageData method, of class Leptonica.
//     */
//    @Test
//    public void testFpixResizeImageData() {
//        System.out.println("fpixResizeImageData");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        int expResult = 0;
//        int result = instance.fpixResizeImageData(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testFpixDestroy() {
//        System.out.println("fpixDestroy");
//        FPix.ByReference[] pfpix = null;

//        instance.fpixDestroy(pfpix);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetDimensions() {
//        System.out.println("fpixGetDimensions");
//        FPix fpix = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.fpixGetDimensions(fpix, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetDimensions() {
//        System.out.println("fpixSetDimensions");
//        FPix fpix = null;
//        int w = 0;
//        int h = 0;

//        int expResult = 0;
//        int result = instance.fpixSetDimensions(fpix, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetWpl() {
//        System.out.println("fpixGetWpl");
//        FPix fpix = null;

//        int expResult = 0;
//        int result = instance.fpixGetWpl(fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetWpl() {
//        System.out.println("fpixSetWpl");
//        FPix fpix = null;
//        int wpl = 0;

//        int expResult = 0;
//        int result = instance.fpixSetWpl(fpix, wpl);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetRefcount() {
//        System.out.println("fpixGetRefcount");
//        FPix fpix = null;

//        int expResult = 0;
//        int result = instance.fpixGetRefcount(fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testFpixChangeRefcount() {
//        System.out.println("fpixChangeRefcount");
//        FPix fpix = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.fpixChangeRefcount(fpix, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetResolution() {
//        System.out.println("fpixGetResolution");
//        FPix fpix = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.fpixGetResolution(fpix, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetResolution() {
//        System.out.println("fpixSetResolution");
//        FPix fpix = null;
//        int xres = 0;
//        int yres = 0;

//        int expResult = 0;
//        int result = instance.fpixSetResolution(fpix, xres, yres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixCopyResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFpixCopyResolution() {
//        System.out.println("fpixCopyResolution");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        int expResult = 0;
//        int result = instance.fpixCopyResolution(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetData method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetData() {
//        System.out.println("fpixGetData");
//        FPix fpix = null;

//        FloatByReference expResult = null;
//        FloatByReference result = instance.fpixGetData(fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetData method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetData() {
//        System.out.println("fpixSetData");
//        FPix fpix = null;
//        FloatBuffer data = null;

//        int expResult = 0;
//        int result = instance.fpixSetData(fpix, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetPixel() {
//        System.out.println("fpixGetPixel");
//        FPix fpix = null;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.fpixGetPixel(fpix, x, y, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetPixel() {
//        System.out.println("fpixSetPixel");
//        FPix fpix = null;
//        int x = 0;
//        int y = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.fpixSetPixel(fpix, x, y, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaCreate() {
//        System.out.println("fpixaCreate");
//        int n = 0;

//        FPixa expResult = null;
//        FPixa result = instance.fpixaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaCopy() {
//        System.out.println("fpixaCopy");
//        FPixa fpixa = null;
//        int copyflag = 0;

//        FPixa expResult = null;
//        FPixa result = instance.fpixaCopy(fpixa, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaDestroy() {
//        System.out.println("fpixaDestroy");
//        FPixa.ByReference[] pfpixa = null;

//        instance.fpixaDestroy(pfpixa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaAddFPix method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaAddFPix() {
//        System.out.println("fpixaAddFPix");
//        FPixa fpixa = null;
//        FPix fpix = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.fpixaAddFPix(fpixa, fpix, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaGetCount() {
//        System.out.println("fpixaGetCount");
//        FPixa fpixa = null;

//        int expResult = 0;
//        int result = instance.fpixaGetCount(fpixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaChangeRefcount() {
//        System.out.println("fpixaChangeRefcount");
//        FPixa fpixa = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.fpixaChangeRefcount(fpixa, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaGetFPix method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaGetFPix() {
//        System.out.println("fpixaGetFPix");
//        FPixa fpixa = null;
//        int index = 0;
//        int accesstype = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixaGetFPix(fpixa, index, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaGetFPixDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaGetFPixDimensions() {
//        System.out.println("fpixaGetFPixDimensions");
//        FPixa fpixa = null;
//        int index = 0;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.fpixaGetFPixDimensions(fpixa, index, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaGetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaGetPixel() {
//        System.out.println("fpixaGetPixel");
//        FPixa fpixa = null;
//        int index = 0;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.fpixaGetPixel(fpixa, index, x, y, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaSetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaSetPixel() {
//        System.out.println("fpixaSetPixel");
//        FPixa fpixa = null;
//        int index = 0;
//        int x = 0;
//        int y = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.fpixaSetPixel(fpixa, index, x, y, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixCreate method, of class Leptonica.
//     */
//    @Test
//    public void testDpixCreate() {
//        System.out.println("dpixCreate");
//        int width = 0;
//        int height = 0;

//        DPix expResult = null;
//        DPix result = instance.dpixCreate(width, height);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixCreateTemplate method, of class Leptonica.
//     */
//    @Test
//    public void testDpixCreateTemplate() {
//        System.out.println("dpixCreateTemplate");
//        DPix dpixs = null;

//        DPix expResult = null;
//        DPix result = instance.dpixCreateTemplate(dpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixClone method, of class Leptonica.
//     */
//    @Test
//    public void testDpixClone() {
//        System.out.println("dpixClone");
//        DPix dpix = null;

//        DPix expResult = null;
//        DPix result = instance.dpixClone(dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixCopy method, of class Leptonica.
//     */
//    @Test
//    public void testDpixCopy() {
//        System.out.println("dpixCopy");
//        DPix dpixd = null;
//        DPix dpixs = null;

//        DPix expResult = null;
//        DPix result = instance.dpixCopy(dpixd, dpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixResizeImageData method, of class Leptonica.
//     */
//    @Test
//    public void testDpixResizeImageData() {
//        System.out.println("dpixResizeImageData");
//        DPix dpixd = null;
//        DPix dpixs = null;

//        int expResult = 0;
//        int result = instance.dpixResizeImageData(dpixd, dpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testDpixDestroy() {
//        System.out.println("dpixDestroy");
//        DPix.ByReference[] pdpix = null;

//        instance.dpixDestroy(pdpix);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetDimensions() {
//        System.out.println("dpixGetDimensions");
//        DPix dpix = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.dpixGetDimensions(dpix, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetDimensions() {
//        System.out.println("dpixSetDimensions");
//        DPix dpix = null;
//        int w = 0;
//        int h = 0;

//        int expResult = 0;
//        int result = instance.dpixSetDimensions(dpix, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetWpl() {
//        System.out.println("dpixGetWpl");
//        DPix dpix = null;

//        int expResult = 0;
//        int result = instance.dpixGetWpl(dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetWpl() {
//        System.out.println("dpixSetWpl");
//        DPix dpix = null;
//        int wpl = 0;

//        int expResult = 0;
//        int result = instance.dpixSetWpl(dpix, wpl);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetRefcount() {
//        System.out.println("dpixGetRefcount");
//        DPix dpix = null;

//        int expResult = 0;
//        int result = instance.dpixGetRefcount(dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testDpixChangeRefcount() {
//        System.out.println("dpixChangeRefcount");
//        DPix dpix = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.dpixChangeRefcount(dpix, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetResolution() {
//        System.out.println("dpixGetResolution");
//        DPix dpix = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.dpixGetResolution(dpix, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetResolution() {
//        System.out.println("dpixSetResolution");
//        DPix dpix = null;
//        int xres = 0;
//        int yres = 0;

//        int expResult = 0;
//        int result = instance.dpixSetResolution(dpix, xres, yres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixCopyResolution method, of class Leptonica.
//     */
//    @Test
//    public void testDpixCopyResolution() {
//        System.out.println("dpixCopyResolution");
//        DPix dpixd = null;
//        DPix dpixs = null;

//        int expResult = 0;
//        int result = instance.dpixCopyResolution(dpixd, dpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetData method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetData() {
//        System.out.println("dpixGetData");
//        DPix dpix = null;

//        DoubleByReference expResult = null;
//        DoubleByReference result = instance.dpixGetData(dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetData method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetData() {
//        System.out.println("dpixSetData");
//        DPix dpix = null;
//        DoubleBuffer data = null;

//        int expResult = 0;
//        int result = instance.dpixSetData(dpix, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetPixel() {
//        System.out.println("dpixGetPixel");
//        DPix dpix = null;
//        int x = 0;
//        int y = 0;
//        DoubleBuffer pval = null;

//        int expResult = 0;
//        int result = instance.dpixGetPixel(dpix, x, y, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetPixel() {
//        System.out.println("dpixSetPixel");
//        DPix dpix = null;
//        int x = 0;
//        int y = 0;
//        double val = 0.0;

//        int expResult = 0;
//        int result = instance.dpixSetPixel(dpix, x, y, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRead method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRead() {
//        System.out.println("fpixRead");
//        String filename = "";

//        FPix expResult = null;
//        FPix result = instance.fpixRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testFpixReadStream() {
//        System.out.println("fpixReadStream");
//        PointerByReference fp = null;

//        FPix expResult = null;
//        FPix result = instance.fpixReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixWrite method, of class Leptonica.
//     */
//    @Test
//    public void testFpixWrite() {
//        System.out.println("fpixWrite");
//        String filename = "";
//        FPix fpix = null;

//        int expResult = 0;
//        int result = instance.fpixWrite(filename, fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testFpixWriteStream() {
//        System.out.println("fpixWriteStream");
//        PointerByReference fp = null;
//        FPix fpix = null;

//        int expResult = 0;
//        int result = instance.fpixWriteStream(fp, fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixEndianByteSwap method, of class Leptonica.
//     */
//    @Test
//    public void testFpixEndianByteSwap() {
//        System.out.println("fpixEndianByteSwap");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixEndianByteSwap(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixRead method, of class Leptonica.
//     */
//    @Test
//    public void testDpixRead() {
//        System.out.println("dpixRead");
//        String filename = "";

//        DPix expResult = null;
//        DPix result = instance.dpixRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testDpixReadStream() {
//        System.out.println("dpixReadStream");
//        PointerByReference fp = null;

//        DPix expResult = null;
//        DPix result = instance.dpixReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixWrite method, of class Leptonica.
//     */
//    @Test
//    public void testDpixWrite() {
//        System.out.println("dpixWrite");
//        String filename = "";
//        DPix dpix = null;

//        int expResult = 0;
//        int result = instance.dpixWrite(filename, dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testDpixWriteStream() {
//        System.out.println("dpixWriteStream");
//        PointerByReference fp = null;
//        DPix dpix = null;

//        int expResult = 0;
//        int result = instance.dpixWriteStream(fp, dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixEndianByteSwap method, of class Leptonica.
//     */
//    @Test
//    public void testDpixEndianByteSwap() {
//        System.out.println("dpixEndianByteSwap");
//        DPix dpixd = null;
//        DPix dpixs = null;

//        DPix expResult = null;
//        DPix result = instance.dpixEndianByteSwap(dpixd, dpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixPrintStream method, of class Leptonica.
//     */
//    @Test
//    public void testFpixPrintStream() {
//        System.out.println("fpixPrintStream");
//        PointerByReference fp = null;
//        FPix fpix = null;
//        int factor = 0;

//        int expResult = 0;
//        int result = instance.fpixPrintStream(fp, fpix, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToFPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToFPix() {
//        System.out.println("pixConvertToFPix");
//        Pix pixs = null;
//        int ncomps = 0;

//        FPix expResult = null;
//        FPix result = instance.pixConvertToFPix(pixs, ncomps);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToDPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToDPix() {
//        System.out.println("pixConvertToDPix");
//        Pix pixs = null;
//        int ncomps = 0;

//        DPix expResult = null;
//        DPix result = instance.pixConvertToDPix(pixs, ncomps);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixConvertToPix method, of class Leptonica.
//     */
//    @Test
//    public void testFpixConvertToPix() {
//        System.out.println("fpixConvertToPix");
//        FPix fpixs = null;
//        int outdepth = 0;
//        int negvals = 0;
//        int errorflag = 0;

//        Pix expResult = null;
//        Pix result = instance.fpixConvertToPix(fpixs, outdepth, negvals, errorflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixDisplayMaxDynamicRange method, of class Leptonica.
//     */
//    @Test
//    public void testFpixDisplayMaxDynamicRange() {
//        System.out.println("fpixDisplayMaxDynamicRange");
//        FPix fpixs = null;

//        Pix expResult = null;
//        Pix result = instance.fpixDisplayMaxDynamicRange(fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixConvertToDPix method, of class Leptonica.
//     */
//    @Test
//    public void testFpixConvertToDPix() {
//        System.out.println("fpixConvertToDPix");
//        FPix fpix = null;

//        DPix expResult = null;
//        DPix result = instance.fpixConvertToDPix(fpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixConvertToPix method, of class Leptonica.
//     */
//    @Test
//    public void testDpixConvertToPix() {
//        System.out.println("dpixConvertToPix");
//        DPix dpixs = null;
//        int outdepth = 0;
//        int negvals = 0;
//        int errorflag = 0;

//        Pix expResult = null;
//        Pix result = instance.dpixConvertToPix(dpixs, outdepth, negvals, errorflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixConvertToFPix method, of class Leptonica.
//     */
//    @Test
//    public void testDpixConvertToFPix() {
//        System.out.println("dpixConvertToFPix");
//        DPix dpix = null;

//        FPix expResult = null;
//        FPix result = instance.dpixConvertToFPix(dpix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetMin method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetMin() {
//        System.out.println("fpixGetMin");
//        FPix fpix = null;
//        FloatBuffer pminval = null;
//        IntBuffer pxminloc = null;
//        IntBuffer pyminloc = null;

//        int expResult = 0;
//        int result = instance.fpixGetMin(fpix, pminval, pxminloc, pyminloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixGetMax method, of class Leptonica.
//     */
//    @Test
//    public void testFpixGetMax() {
//        System.out.println("fpixGetMax");
//        FPix fpix = null;
//        FloatBuffer pmaxval = null;
//        IntBuffer pxmaxloc = null;
//        IntBuffer pymaxloc = null;

//        int expResult = 0;
//        int result = instance.fpixGetMax(fpix, pmaxval, pxmaxloc, pymaxloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetMin method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetMin() {
//        System.out.println("dpixGetMin");
//        DPix dpix = null;
//        DoubleBuffer pminval = null;
//        IntBuffer pxminloc = null;
//        IntBuffer pyminloc = null;

//        int expResult = 0;
//        int result = instance.dpixGetMin(dpix, pminval, pxminloc, pyminloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixGetMax method, of class Leptonica.
//     */
//    @Test
//    public void testDpixGetMax() {
//        System.out.println("dpixGetMax");
//        DPix dpix = null;
//        DoubleBuffer pmaxval = null;
//        IntBuffer pxmaxloc = null;
//        IntBuffer pymaxloc = null;

//        int expResult = 0;
//        int result = instance.dpixGetMax(dpix, pmaxval, pxmaxloc, pymaxloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixScaleByInteger method, of class Leptonica.
//     */
//    @Test
//    public void testFpixScaleByInteger() {
//        System.out.println("fpixScaleByInteger");
//        FPix fpixs = null;
//        int factor = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixScaleByInteger(fpixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixScaleByInteger method, of class Leptonica.
//     */
//    @Test
//    public void testDpixScaleByInteger() {
//        System.out.println("dpixScaleByInteger");
//        DPix dpixs = null;
//        int factor = 0;

//        DPix expResult = null;
//        DPix result = instance.dpixScaleByInteger(dpixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixLinearCombination method, of class Leptonica.
//     */
//    @Test
//    public void testFpixLinearCombination() {
//        System.out.println("fpixLinearCombination");
//        FPix fpixd = null;
//        FPix fpixs1 = null;
//        FPix fpixs2 = null;
//        float a = 0.0F;
//        float b = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.fpixLinearCombination(fpixd, fpixs1, fpixs2, a, b);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAddMultConstant method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAddMultConstant() {
//        System.out.println("fpixAddMultConstant");
//        FPix fpix = null;
//        float addc = 0.0F;
//        float multc = 0.0F;

//        int expResult = 0;
//        int result = instance.fpixAddMultConstant(fpix, addc, multc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixLinearCombination method, of class Leptonica.
//     */
//    @Test
//    public void testDpixLinearCombination() {
//        System.out.println("dpixLinearCombination");
//        DPix dpixd = null;
//        DPix dpixs1 = null;
//        DPix dpixs2 = null;
//        float a = 0.0F;
//        float b = 0.0F;

//        DPix expResult = null;
//        DPix result = instance.dpixLinearCombination(dpixd, dpixs1, dpixs2, a, b);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixAddMultConstant method, of class Leptonica.
//     */
//    @Test
//    public void testDpixAddMultConstant() {
//        System.out.println("dpixAddMultConstant");
//        DPix dpix = null;
//        double addc = 0.0;
//        double multc = 0.0;

//        int expResult = 0;
//        int result = instance.dpixAddMultConstant(dpix, addc, multc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixSetAllArbitrary method, of class Leptonica.
//     */
//    @Test
//    public void testFpixSetAllArbitrary() {
//        System.out.println("fpixSetAllArbitrary");
//        FPix fpix = null;
//        float inval = 0.0F;

//        int expResult = 0;
//        int result = instance.fpixSetAllArbitrary(fpix, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of dpixSetAllArbitrary method, of class Leptonica.
//     */
//    @Test
//    public void testDpixSetAllArbitrary() {
//        System.out.println("dpixSetAllArbitrary");
//        DPix dpix = null;
//        double inval = 0.0;

//        int expResult = 0;
//        int result = instance.dpixSetAllArbitrary(dpix, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAddBorder method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAddBorder() {
//        System.out.println("fpixAddBorder");
//        FPix fpixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixAddBorder(fpixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRemoveBorder method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRemoveBorder() {
//        System.out.println("fpixRemoveBorder");
//        FPix fpixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixRemoveBorder(fpixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAddMirroredBorder method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAddMirroredBorder() {
//        System.out.println("fpixAddMirroredBorder");
//        FPix fpixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixAddMirroredBorder(fpixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAddContinuedBorder method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAddContinuedBorder() {
//        System.out.println("fpixAddContinuedBorder");
//        FPix fpixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixAddContinuedBorder(fpixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAddSlopeBorder method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAddSlopeBorder() {
//        System.out.println("fpixAddSlopeBorder");
//        FPix fpixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixAddSlopeBorder(fpixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRasterop method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRasterop() {
//        System.out.println("fpixRasterop");
//        FPix fpixd = null;
//        int dx = 0;
//        int dy = 0;
//        int dw = 0;
//        int dh = 0;
//        FPix fpixs = null;
//        int sx = 0;
//        int sy = 0;

//        int expResult = 0;
//        int result = instance.fpixRasterop(fpixd, dx, dy, dw, dh, fpixs, sx, sy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRotateOrth method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRotateOrth() {
//        System.out.println("fpixRotateOrth");
//        FPix fpixs = null;
//        int quads = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixRotateOrth(fpixs, quads);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRotate180 method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRotate180() {
//        System.out.println("fpixRotate180");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixRotate180(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRotate90 method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRotate90() {
//        System.out.println("fpixRotate90");
//        FPix fpixs = null;
//        int direction = 0;

//        FPix expResult = null;
//        FPix result = instance.fpixRotate90(fpixs, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixFlipLR method, of class Leptonica.
//     */
//    @Test
//    public void testFpixFlipLR() {
//        System.out.println("fpixFlipLR");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixFlipLR(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixFlipTB method, of class Leptonica.
//     */
//    @Test
//    public void testFpixFlipTB() {
//        System.out.println("fpixFlipTB");
//        FPix fpixd = null;
//        FPix fpixs = null;

//        FPix expResult = null;
//        FPix result = instance.fpixFlipTB(fpixd, fpixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAffinePta method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAffinePta() {
//        System.out.println("fpixAffinePta");
//        FPix fpixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int border = 0;
//        float inval = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.fpixAffinePta(fpixs, ptad, ptas, border, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAffine method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAffine() {
//        System.out.println("fpixAffine");
//        FPix fpixs = null;
//        FloatBuffer vc = null;
//        float inval = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.fpixAffine(fpixs, vc, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixProjectivePta method, of class Leptonica.
//     */
//    @Test
//    public void testFpixProjectivePta() {
//        System.out.println("fpixProjectivePta");
//        FPix fpixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int border = 0;
//        float inval = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.fpixProjectivePta(fpixs, ptad, ptas, border, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixProjective method, of class Leptonica.
//     */
//    @Test
//    public void testFpixProjective() {
//        System.out.println("fpixProjective");
//        FPix fpixs = null;
//        FloatBuffer vc = null;
//        float inval = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.fpixProjective(fpixs, vc, inval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of linearInterpolatePixelFloat method, of class Leptonica.
//     */
//    @Test
//    public void testLinearInterpolatePixelFloat() {
//        System.out.println("linearInterpolatePixelFloat");
//        FloatBuffer datas = null;
//        int w = 0;
//        int h = 0;
//        float x = 0.0F;
//        float y = 0.0F;
//        float inval = 0.0F;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.linearInterpolatePixelFloat(datas, w, h, x, y, inval, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixThresholdToPix method, of class Leptonica.
//     */
//    @Test
//    public void testFpixThresholdToPix() {
//        System.out.println("fpixThresholdToPix");
//        FPix fpix = null;
//        float thresh = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.fpixThresholdToPix(fpix, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixComponentFunction method, of class Leptonica.
//     */
//    @Test
//    public void testPixComponentFunction() {
//        System.out.println("pixComponentFunction");
//        Pix pix = null;
//        float rnum = 0.0F;
//        float gnum = 0.0F;
//        float bnum = 0.0F;
//        float rdenom = 0.0F;
//        float gdenom = 0.0F;
//        float bdenom = 0.0F;

//        FPix expResult = null;
//        FPix result = instance.pixComponentFunction(pix, rnum, gnum, bnum, rdenom, gdenom, bdenom);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamGif method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamGif() {
//        System.out.println("pixReadStreamGif");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamGif(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamGif method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamGif() {
//        System.out.println("pixWriteStreamGif");
//        PointerByReference fp = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamGif(fp, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemGif method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemGif() {
//        System.out.println("pixReadMemGif");
//        ByteBuffer cdata = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemGif(cdata, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemGif method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemGif() {
//        System.out.println("pixWriteMemGif");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteMemGif(pdata, psize, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotCreate method, of class Leptonica.
//     */
//    @Test
//    public void testGplotCreate() {
//        System.out.println("gplotCreate");
//        String rootname = "";
//        int outformat = 0;
//        String title = "";
//        String xlabel = "";
//        String ylabel = "";

//        GPlot expResult = null;
//        GPlot result = instance.gplotCreate(rootname, outformat, title, xlabel, ylabel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testGplotDestroy() {
//        System.out.println("gplotDestroy");
//        GPlot.ByReference[] pgplot = null;

//        instance.gplotDestroy(pgplot);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotAddPlot method, of class Leptonica.
//     */
//    @Test
//    public void testGplotAddPlot() {
//        System.out.println("gplotAddPlot");
//        GPlot gplot = null;
//        Numa nax = null;
//        Numa nay = null;
//        int plotstyle = 0;
//        String plottitle = "";

//        int expResult = 0;
//        int result = instance.gplotAddPlot(gplot, nax, nay, plotstyle, plottitle);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSetScaling method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSetScaling() {
//        System.out.println("gplotSetScaling");
//        GPlot gplot = null;
//        int scaling = 0;

//        int expResult = 0;
//        int result = instance.gplotSetScaling(gplot, scaling);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotMakeOutput method, of class Leptonica.
//     */
//    @Test
//    public void testGplotMakeOutput() {
//        System.out.println("gplotMakeOutput");
//        GPlot gplot = null;

//        int expResult = 0;
//        int result = instance.gplotMakeOutput(gplot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotGenCommandFile method, of class Leptonica.
//     */
//    @Test
//    public void testGplotGenCommandFile() {
//        System.out.println("gplotGenCommandFile");
//        GPlot gplot = null;

//        int expResult = 0;
//        int result = instance.gplotGenCommandFile(gplot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotGenDataFiles method, of class Leptonica.
//     */
//    @Test
//    public void testGplotGenDataFiles() {
//        System.out.println("gplotGenDataFiles");
//        GPlot gplot = null;

//        int expResult = 0;
//        int result = instance.gplotGenDataFiles(gplot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimple1 method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimple1() {
//        System.out.println("gplotSimple1");
//        Numa na = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimple1(na, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimple2 method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimple2() {
//        System.out.println("gplotSimple2");
//        Numa na1 = null;
//        Numa na2 = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimple2(na1, na2, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimpleN method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimpleN() {
//        System.out.println("gplotSimpleN");
//        Numaa naa = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimpleN(naa, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimpleXY1 method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimpleXY1() {
//        System.out.println("gplotSimpleXY1");
//        Numa nax = null;
//        Numa nay = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimpleXY1(nax, nay, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimpleXY2 method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimpleXY2() {
//        System.out.println("gplotSimpleXY2");
//        Numa nax = null;
//        Numa nay1 = null;
//        Numa nay2 = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimpleXY2(nax, nay1, nay2, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotSimpleXYN method, of class Leptonica.
//     */
//    @Test
//    public void testGplotSimpleXYN() {
//        System.out.println("gplotSimpleXYN");
//        Numa nax = null;
//        Numaa naay = null;
//        int outformat = 0;
//        String outroot = "";
//        String title = "";

//        int expResult = 0;
//        int result = instance.gplotSimpleXYN(nax, naay, outformat, outroot, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotRead method, of class Leptonica.
//     */
//    @Test
//    public void testGplotRead() {
//        System.out.println("gplotRead");
//        String filename = "";

//        GPlot expResult = null;
//        GPlot result = instance.gplotRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of gplotWrite method, of class Leptonica.
//     */
//    @Test
//    public void testGplotWrite() {
//        System.out.println("gplotWrite");
//        String filename = "";
//        GPlot gplot = null;

//        int expResult = 0;
//        int result = instance.gplotWrite(filename, gplot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaLine method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaLine() {
//        System.out.println("generatePtaLine");
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaLine(x1, y1, x2, y2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaWideLine method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaWideLine() {
//        System.out.println("generatePtaWideLine");
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int width = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaWideLine(x1, y1, x2, y2, width);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaBox method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaBox() {
//        System.out.println("generatePtaBox");
//        Box box = null;
//        int width = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaBox(box, width);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaBoxa() {
//        System.out.println("generatePtaBoxa");
//        Boxa boxa = null;
//        int width = 0;
//        int removedups = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaBoxa(boxa, width, removedups);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaHashBox method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaHashBox() {
//        System.out.println("generatePtaHashBox");
//        Box box = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaHashBox(box, spacing, width, orient, outline);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaHashBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaHashBoxa() {
//        System.out.println("generatePtaHashBoxa");
//        Boxa boxa = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int removedups = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaHashBoxa(boxa, spacing, width, orient, outline, removedups);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaaBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaaBoxa() {
//        System.out.println("generatePtaaBoxa");
//        Boxa boxa = null;

//        Ptaa expResult = null;
//        Ptaa result = instance.generatePtaaBoxa(boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaaHashBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaaHashBoxa() {
//        System.out.println("generatePtaaHashBoxa");
//        Boxa boxa = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;

//        Ptaa expResult = null;
//        Ptaa result = instance.generatePtaaHashBoxa(boxa, spacing, width, orient, outline);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaPolyline method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaPolyline() {
//        System.out.println("generatePtaPolyline");
//        Pta ptas = null;
//        int width = 0;
//        int closeflag = 0;
//        int removedups = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaPolyline(ptas, width, closeflag, removedups);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertPtaLineTo4cc method, of class Leptonica.
//     */
//    @Test
//    public void testConvertPtaLineTo4cc() {
//        System.out.println("convertPtaLineTo4cc");
//        Pta ptas = null;

//        Pta expResult = null;
//        Pta result = instance.convertPtaLineTo4cc(ptas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaFilledCircle method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaFilledCircle() {
//        System.out.println("generatePtaFilledCircle");
//        int radius = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaFilledCircle(radius);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaFilledSquare method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaFilledSquare() {
//        System.out.println("generatePtaFilledSquare");
//        int side = 0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaFilledSquare(side);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generatePtaLineFromPt method, of class Leptonica.
//     */
//    @Test
//    public void testGeneratePtaLineFromPt() {
//        System.out.println("generatePtaLineFromPt");
//        int x = 0;
//        int y = 0;
//        double length = 0.0;
//        double radang = 0.0;

//        Pta expResult = null;
//        Pta result = instance.generatePtaLineFromPt(x, y, length, radang);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of locatePtRadially method, of class Leptonica.
//     */
//    @Test
//    public void testLocatePtRadially() {
//        System.out.println("locatePtRadially");
//        int xr = 0;
//        int yr = 0;
//        double dist = 0.0;
//        double radang = 0.0;
//        DoubleBuffer px = null;
//        DoubleBuffer py = null;

//        int expResult = 0;
//        int result = instance.locatePtRadially(xr, yr, dist, radang, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPlotFromNuma method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPlotFromNuma() {
//        System.out.println("pixRenderPlotFromNuma");
//        Pix.ByReference[] ppix = null;
//        Numa na = null;
//        int plotloc = 0;
//        int linewidth = 0;
//        int max = 0;
//        int color = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPlotFromNuma(ppix, na, plotloc, linewidth, max, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makePlotPtaFromNuma method, of class Leptonica.
//     */
//    @Test
//    public void testMakePlotPtaFromNuma() {
//        System.out.println("makePlotPtaFromNuma");
//        Numa na = null;
//        int size = 0;
//        int plotloc = 0;
//        int linewidth = 0;
//        int max = 0;

//        Pta expResult = null;
//        Pta result = instance.makePlotPtaFromNuma(na, size, plotloc, linewidth, max);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPlotFromNumaGen method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPlotFromNumaGen() {
//        System.out.println("pixRenderPlotFromNumaGen");
//        Pix.ByReference[] ppix = null;
//        Numa na = null;
//        int orient = 0;
//        int linewidth = 0;
//        int refpos = 0;
//        int max = 0;
//        int drawref = 0;
//        int color = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPlotFromNumaGen(ppix, na, orient, linewidth, refpos, max, drawref, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makePlotPtaFromNumaGen method, of class Leptonica.
//     */
//    @Test
//    public void testMakePlotPtaFromNumaGen() {
//        System.out.println("makePlotPtaFromNumaGen");
//        Numa na = null;
//        int orient = 0;
//        int linewidth = 0;
//        int refpos = 0;
//        int max = 0;
//        int drawref = 0;

//        Pta expResult = null;
//        Pta result = instance.makePlotPtaFromNumaGen(na, orient, linewidth, refpos, max, drawref);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPta() {
//        System.out.println("pixRenderPta");
//        Pix pix = null;
//        Pta pta = null;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPta(pix, pta, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPtaArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPtaArb() {
//        System.out.println("pixRenderPtaArb");
//        Pix pix = null;
//        Pta pta = null;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPtaArb(pix, pta, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPtaBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPtaBlend() {
//        System.out.println("pixRenderPtaBlend");
//        Pix pix = null;
//        Pta pta = null;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixRenderPtaBlend(pix, pta, rval, gval, bval, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderLine() {
//        System.out.println("pixRenderLine");
//        Pix pix = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int width = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderLine(pix, x1, y1, x2, y2, width, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderLineArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderLineArb() {
//        System.out.println("pixRenderLineArb");
//        Pix pix = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderLineArb(pix, x1, y1, x2, y2, width, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderLineBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderLineBlend() {
//        System.out.println("pixRenderLineBlend");
//        Pix pix = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixRenderLineBlend(pix, x1, y1, x2, y2, width, rval, gval, bval, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBox() {
//        System.out.println("pixRenderBox");
//        Pix pix = null;
//        Box box = null;
//        int width = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderBox(pix, box, width, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBoxArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBoxArb() {
//        System.out.println("pixRenderBoxArb");
//        Pix pix = null;
//        Box box = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderBoxArb(pix, box, width, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBoxBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBoxBlend() {
//        System.out.println("pixRenderBoxBlend");
//        Pix pix = null;
//        Box box = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixRenderBoxBlend(pix, box, width, rval, gval, bval, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBoxa() {
//        System.out.println("pixRenderBoxa");
//        Pix pix = null;
//        Boxa boxa = null;
//        int width = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderBoxa(pix, boxa, width, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBoxaArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBoxaArb() {
//        System.out.println("pixRenderBoxaArb");
//        Pix pix = null;
//        Boxa boxa = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderBoxaArb(pix, boxa, width, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderBoxaBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderBoxaBlend() {
//        System.out.println("pixRenderBoxaBlend");
//        Pix pix = null;
//        Boxa boxa = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        float fract = 0.0F;
//        int removedups = 0;

//        int expResult = 0;
//        int result = instance.pixRenderBoxaBlend(pix, boxa, width, rval, gval, bval, fract, removedups);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBox() {
//        System.out.println("pixRenderHashBox");
//        Pix pix = null;
//        Box box = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderHashBox(pix, box, spacing, width, orient, outline, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBoxArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBoxArb() {
//        System.out.println("pixRenderHashBoxArb");
//        Pix pix = null;
//        Box box = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderHashBoxArb(pix, box, spacing, width, orient, outline, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBoxBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBoxBlend() {
//        System.out.println("pixRenderHashBoxBlend");
//        Pix pix = null;
//        Box box = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixRenderHashBoxBlend(pix, box, spacing, width, orient, outline, rval, gval, bval, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBoxa() {
//        System.out.println("pixRenderHashBoxa");
//        Pix pix = null;
//        Boxa boxa = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRenderHashBoxa(pix, boxa, spacing, width, orient, outline, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBoxaArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBoxaArb() {
//        System.out.println("pixRenderHashBoxaArb");
//        Pix pix = null;
//        Boxa boxa = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixRenderHashBoxaArb(pix, boxa, spacing, width, orient, outline, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderHashBoxaBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderHashBoxaBlend() {
//        System.out.println("pixRenderHashBoxaBlend");
//        Pix pix = null;
//        Boxa boxa = null;
//        int spacing = 0;
//        int width = 0;
//        int orient = 0;
//        int outline = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixRenderHashBoxaBlend(pix, boxa, spacing, width, orient, outline, rval, gval, bval, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPolyline method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPolyline() {
//        System.out.println("pixRenderPolyline");
//        Pix pix = null;
//        Pta ptas = null;
//        int width = 0;
//        int op = 0;
//        int closeflag = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPolyline(pix, ptas, width, op, closeflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPolylineArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPolylineArb() {
//        System.out.println("pixRenderPolylineArb");
//        Pix pix = null;
//        Pta ptas = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        int closeflag = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPolylineArb(pix, ptas, width, rval, gval, bval, closeflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPolylineBlend method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPolylineBlend() {
//        System.out.println("pixRenderPolylineBlend");
//        Pix pix = null;
//        Pta ptas = null;
//        int width = 0;
//        byte rval = 0;
//        byte gval = 0;
//        byte bval = 0;
//        float fract = 0.0F;
//        int closeflag = 0;
//        int removedups = 0;

//        int expResult = 0;
//        int result = instance.pixRenderPolylineBlend(pix, ptas, width, rval, gval, bval, fract, closeflag, removedups);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderRandomCmapPtaa method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderRandomCmapPtaa() {
//        System.out.println("pixRenderRandomCmapPtaa");
//        Pix pix = null;
//        Ptaa ptaa = null;
//        int polyflag = 0;
//        int width = 0;
//        int closeflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRenderRandomCmapPtaa(pix, ptaa, polyflag, width, closeflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderPolygon method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderPolygon() {
//        System.out.println("pixRenderPolygon");
//        Pta ptas = null;
//        int width = 0;
//        IntBuffer pxmin = null;
//        IntBuffer pymin = null;

//        Pix expResult = null;
//        Pix result = instance.pixRenderPolygon(ptas, width, pxmin, pymin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFillPolygon method, of class Leptonica.
//     */
//    @Test
//    public void testPixFillPolygon() {
//        System.out.println("pixFillPolygon");
//        Pix pixs = null;
//        Pta pta = null;
//        int xmin = 0;
//        int ymin = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFillPolygon(pixs, pta, xmin, ymin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRenderContours method, of class Leptonica.
//     */
//    @Test
//    public void testPixRenderContours() {
//        System.out.println("pixRenderContours");
//        Pix pixs = null;
//        int startval = 0;
//        int incr = 0;
//        int outdepth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRenderContours(pixs, startval, incr, outdepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixAutoRenderContours method, of class Leptonica.
//     */
//    @Test
//    public void testFpixAutoRenderContours() {
//        System.out.println("fpixAutoRenderContours");
//        FPix fpix = null;
//        int ncontours = 0;

//        Pix expResult = null;
//        Pix result = instance.fpixAutoRenderContours(fpix, ncontours);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixRenderContours method, of class Leptonica.
//     */
//    @Test
//    public void testFpixRenderContours() {
//        System.out.println("fpixRenderContours");
//        FPix fpixs = null;
//        float incr = 0.0F;
//        float proxim = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.fpixRenderContours(fpixs, incr, proxim);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeGray() {
//        System.out.println("pixErodeGray");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeGray(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateGray() {
//        System.out.println("pixDilateGray");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateGray(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenGray() {
//        System.out.println("pixOpenGray");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenGray(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseGray() {
//        System.out.println("pixCloseGray");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseGray(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeGray3 method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeGray3() {
//        System.out.println("pixErodeGray3");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeGray3(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateGray3 method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateGray3() {
//        System.out.println("pixDilateGray3");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateGray3(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenGray3 method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenGray3() {
//        System.out.println("pixOpenGray3");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenGray3(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseGray3 method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseGray3() {
//        System.out.println("pixCloseGray3");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseGray3(pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDitherToBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixDitherToBinary() {
//        System.out.println("pixDitherToBinary");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixDitherToBinary(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDitherToBinarySpec method, of class Leptonica.
//     */
//    @Test
//    public void testPixDitherToBinarySpec() {
//        System.out.println("pixDitherToBinarySpec");
//        Pix pixs = null;
//        int lowerclip = 0;
//        int upperclip = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDitherToBinarySpec(pixs, lowerclip, upperclip);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdToBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdToBinary() {
//        System.out.println("pixThresholdToBinary");
//        Pix pixs = null;
//        int thresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdToBinary(pixs, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVarThresholdToBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixVarThresholdToBinary() {
//        System.out.println("pixVarThresholdToBinary");
//        Pix pixs = null;
//        Pix pixg = null;

//        Pix expResult = null;
//        Pix result = instance.pixVarThresholdToBinary(pixs, pixg);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAdaptThresholdToBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixAdaptThresholdToBinary() {
//        System.out.println("pixAdaptThresholdToBinary");
//        Pix pixs = null;
//        Pix pixm = null;
//        float gamma = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixAdaptThresholdToBinary(pixs, pixm, gamma);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAdaptThresholdToBinaryGen method, of class Leptonica.
//     */
//    @Test
//    public void testPixAdaptThresholdToBinaryGen() {
//        System.out.println("pixAdaptThresholdToBinaryGen");
//        Pix pixs = null;
//        Pix pixm = null;
//        float gamma = 0.0F;
//        int blackval = 0;
//        int whiteval = 0;
//        int thresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAdaptThresholdToBinaryGen(pixs, pixm, gamma, blackval, whiteval, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDitherToBinaryLUT method, of class Leptonica.
//     */
//    @Test
//    public void testPixDitherToBinaryLUT() {
//        System.out.println("pixDitherToBinaryLUT");
//        Pix pixs = null;
//        int lowerclip = 0;
//        int upperclip = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDitherToBinaryLUT(pixs, lowerclip, upperclip);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateMaskByValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateMaskByValue() {
//        System.out.println("pixGenerateMaskByValue");
//        Pix pixs = null;
//        int val = 0;
//        int usecmap = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenerateMaskByValue(pixs, val, usecmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateMaskByBand method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateMaskByBand() {
//        System.out.println("pixGenerateMaskByBand");
//        Pix pixs = null;
//        int lower = 0;
//        int upper = 0;
//        int inband = 0;
//        int usecmap = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenerateMaskByBand(pixs, lower, upper, inband, usecmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDitherTo2bpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixDitherTo2bpp() {
//        System.out.println("pixDitherTo2bpp");
//        Pix pixs = null;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDitherTo2bpp(pixs, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDitherTo2bppSpec method, of class Leptonica.
//     */
//    @Test
//    public void testPixDitherTo2bppSpec() {
//        System.out.println("pixDitherTo2bppSpec");
//        Pix pixs = null;
//        int lowerclip = 0;
//        int upperclip = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDitherTo2bppSpec(pixs, lowerclip, upperclip, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdTo2bpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdTo2bpp() {
//        System.out.println("pixThresholdTo2bpp");
//        Pix pixs = null;
//        int nlevels = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdTo2bpp(pixs, nlevels, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdTo4bpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdTo4bpp() {
//        System.out.println("pixThresholdTo4bpp");
//        Pix pixs = null;
//        int nlevels = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdTo4bpp(pixs, nlevels, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdOn8bpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdOn8bpp() {
//        System.out.println("pixThresholdOn8bpp");
//        Pix pixs = null;
//        int nlevels = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdOn8bpp(pixs, nlevels, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdGrayArb method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdGrayArb() {
//        System.out.println("pixThresholdGrayArb");
//        Pix pixs = null;
//        String edgevals = "";
//        int outdepth = 0;
//        int use_average = 0;
//        int setblack = 0;
//        int setwhite = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdGrayArb(pixs, edgevals, outdepth, use_average, setblack, setwhite);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeGrayQuantIndexTable method, of class Leptonica.
//     */
//    @Test
//    public void testMakeGrayQuantIndexTable() {
//        System.out.println("makeGrayQuantIndexTable");
//        int nlevels = 0;

//        IntByReference expResult = null;
//        IntByReference result = instance.makeGrayQuantIndexTable(nlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeGrayQuantTableArb method, of class Leptonica.
//     */
//    @Test
//    public void testMakeGrayQuantTableArb() {
//        System.out.println("makeGrayQuantTableArb");
//        Numa na = null;
//        int outdepth = 0;
//        PointerByReference ptab = null;
//        PixColormap.ByReference[] pcmap = null;

//        int expResult = 0;
//        int result = instance.makeGrayQuantTableArb(na, outdepth, ptab, pcmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateMaskByBand32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateMaskByBand32() {
//        System.out.println("pixGenerateMaskByBand32");
//        Pix pixs = null;
//        int refval = 0;
//        int delm = 0;
//        int delp = 0;
//        float fractm = 0.0F;
//        float fractp = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixGenerateMaskByBand32(pixs, refval, delm, delp, fractm, fractp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateMaskByDiscr32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateMaskByDiscr32() {
//        System.out.println("pixGenerateMaskByDiscr32");
//        Pix pixs = null;
//        int refval1 = 0;
//        int refval2 = 0;
//        int distflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenerateMaskByDiscr32(pixs, refval1, refval2, distflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGrayQuantFromHisto method, of class Leptonica.
//     */
//    @Test
//    public void testPixGrayQuantFromHisto() {
//        System.out.println("pixGrayQuantFromHisto");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        float minfract = 0.0F;
//        int maxsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGrayQuantFromHisto(pixd, pixs, pixm, minfract, maxsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGrayQuantFromCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGrayQuantFromCmap() {
//        System.out.println("pixGrayQuantFromCmap");
//        Pix pixs = null;
//        PixColormap cmap = null;
//        int mindepth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGrayQuantFromCmap(pixs, cmap, mindepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ditherToBinaryLineLow method, of class Leptonica.
//     */
//    @Test
//    public void testDitherToBinaryLineLow() {
//        System.out.println("ditherToBinaryLineLow");
//        IntBuffer lined = null;
//        int w = 0;
//        IntBuffer bufs1 = null;
//        IntBuffer bufs2 = null;
//        int lowerclip = 0;
//        int upperclip = 0;
//        int lastlineflag = 0;

//        instance.ditherToBinaryLineLow(lined, w, bufs1, bufs2, lowerclip, upperclip, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of thresholdToBinaryLow method, of class Leptonica.
//     */
//    @Test
//    public void testThresholdToBinaryLow() {
//        System.out.println("thresholdToBinaryLow");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int d = 0;
//        int wpls = 0;
//        int thresh = 0;

//        instance.thresholdToBinaryLow(datad, w, h, wpld, datas, d, wpls, thresh);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of thresholdToBinaryLineLow method, of class Leptonica.
//     */
//    @Test
//    public void testThresholdToBinaryLineLow() {
//        System.out.println("thresholdToBinaryLineLow");
//        IntBuffer lined = null;
//        int w = 0;
//        IntBuffer lines = null;
//        int d = 0;
//        int thresh = 0;

//        instance.thresholdToBinaryLineLow(lined, w, lines, d, thresh);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ditherToBinaryLUTLow method, of class Leptonica.
//     */
//    @Test
//    public void testDitherToBinaryLUTLow() {
//        System.out.println("ditherToBinaryLUTLow");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        IntBuffer bufs1 = null;
//        IntBuffer bufs2 = null;
//        IntBuffer tabval = null;
//        IntBuffer tab38 = null;
//        IntBuffer tab14 = null;

//        instance.ditherToBinaryLUTLow(datad, w, h, wpld, datas, wpls, bufs1, bufs2, tabval, tab38, tab14);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ditherToBinaryLineLUTLow method, of class Leptonica.
//     */
//    @Test
//    public void testDitherToBinaryLineLUTLow() {
//        System.out.println("ditherToBinaryLineLUTLow");
//        IntBuffer lined = null;
//        int w = 0;
//        IntBuffer bufs1 = null;
//        IntBuffer bufs2 = null;
//        IntBuffer tabval = null;
//        IntBuffer tab38 = null;
//        IntBuffer tab14 = null;
//        int lastlineflag = 0;

//        instance.ditherToBinaryLineLUTLow(lined, w, bufs1, bufs2, tabval, tab38, tab14, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of make8To1DitherTables method, of class Leptonica.
//     */
//    @Test
//    public void testMake8To1DitherTables() {
//        System.out.println("make8To1DitherTables");
//        PointerByReference ptabval = null;
//        PointerByReference ptab38 = null;
//        PointerByReference ptab14 = null;
//        int lowerclip = 0;
//        int upperclip = 0;

//        int expResult = 0;
//        int result = instance.make8To1DitherTables(ptabval, ptab38, ptab14, lowerclip, upperclip);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ditherTo2bppLineLow method, of class Leptonica.
//     */
//    @Test
//    public void testDitherTo2bppLineLow() {
//        System.out.println("ditherTo2bppLineLow");
//        IntBuffer lined = null;
//        int w = 0;
//        IntBuffer bufs1 = null;
//        IntBuffer bufs2 = null;
//        IntBuffer tabval = null;
//        IntBuffer tab38 = null;
//        IntBuffer tab14 = null;
//        int lastlineflag = 0;

//        instance.ditherTo2bppLineLow(lined, w, bufs1, bufs2, tabval, tab38, tab14, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of make8To2DitherTables method, of class Leptonica.
//     */
//    @Test
//    public void testMake8To2DitherTables() {
//        System.out.println("make8To2DitherTables");
//        PointerByReference ptabval = null;
//        PointerByReference ptab38 = null;
//        PointerByReference ptab14 = null;
//        int cliptoblack = 0;
//        int cliptowhite = 0;

//        int expResult = 0;
//        int result = instance.make8To2DitherTables(ptabval, ptab38, ptab14, cliptoblack, cliptowhite);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of thresholdTo2bppLow method, of class Leptonica.
//     */
//    @Test
//    public void testThresholdTo2bppLow() {
//        System.out.println("thresholdTo2bppLow");
//        IntBuffer datad = null;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        IntBuffer tab = null;

//        instance.thresholdTo2bppLow(datad, h, wpld, datas, wpls, tab);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of thresholdTo4bppLow method, of class Leptonica.
//     */
//    @Test
//    public void testThresholdTo4bppLow() {
//        System.out.println("thresholdTo4bppLow");
//        IntBuffer datad = null;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        IntBuffer tab = null;

//        instance.thresholdTo4bppLow(datad, h, wpld, datas, wpls, tab);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapCreate method, of class Leptonica.
//     */
//    @Test
//    public void testLheapCreate() {
//        System.out.println("lheapCreate");
//        int nalloc = 0;
//        int direction = 0;

//        L_Heap expResult = null;
//        L_Heap result = instance.lheapCreate(nalloc, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testLheapDestroy() {
//        System.out.println("lheapDestroy");
//        L_Heap.ByReference[] plh = null;
//        int freeflag = 0;

//        instance.lheapDestroy(plh, freeflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapAdd method, of class Leptonica.
//     */
//    @Test
//    public void testLheapAdd() {
//        System.out.println("lheapAdd");
//        L_Heap lh = null;
//        Pointer item = null;

//        int expResult = 0;
//        int result = instance.lheapAdd(lh, item);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapRemove method, of class Leptonica.
//     */
//    @Test
//    public void testLheapRemove() {
//        System.out.println("lheapRemove");
//        L_Heap lh = null;

//        Pointer expResult = null;
//        Pointer result = instance.lheapRemove(lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testLheapGetCount() {
//        System.out.println("lheapGetCount");
//        L_Heap lh = null;

//        int expResult = 0;
//        int result = instance.lheapGetCount(lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapSwapUp method, of class Leptonica.
//     */
//    @Test
//    public void testLheapSwapUp() {
//        System.out.println("lheapSwapUp");
//        L_Heap lh = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.lheapSwapUp(lh, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapSwapDown method, of class Leptonica.
//     */
//    @Test
//    public void testLheapSwapDown() {
//        System.out.println("lheapSwapDown");
//        L_Heap lh = null;

//        int expResult = 0;
//        int result = instance.lheapSwapDown(lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapSort method, of class Leptonica.
//     */
//    @Test
//    public void testLheapSort() {
//        System.out.println("lheapSort");
//        L_Heap lh = null;

//        int expResult = 0;
//        int result = instance.lheapSort(lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapSortStrictOrder method, of class Leptonica.
//     */
//    @Test
//    public void testLheapSortStrictOrder() {
//        System.out.println("lheapSortStrictOrder");
//        L_Heap lh = null;

//        int expResult = 0;
//        int result = instance.lheapSortStrictOrder(lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lheapPrint method, of class Leptonica.
//     */
//    @Test
//    public void testLheapPrint() {
//        System.out.println("lheapPrint");
//        PointerByReference fp = null;
//        L_Heap lh = null;

//        int expResult = 0;
//        int result = instance.lheapPrint(fp, lh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbRankHausInit method, of class Leptonica.
//     */
//    @Test
//    public void testJbRankHausInit() {
//        System.out.println("jbRankHausInit");
//        int components = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        int size = 0;
//        float rank = 0.0F;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbRankHausInit(components, maxwidth, maxheight, size, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbCorrelationInit method, of class Leptonica.
//     */
//    @Test
//    public void testJbCorrelationInit() {
//        System.out.println("jbCorrelationInit");
//        int components = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        float thresh = 0.0F;
//        float weightfactor = 0.0F;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbCorrelationInit(components, maxwidth, maxheight, thresh, weightfactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbCorrelationInitWithoutComponents method, of class Leptonica.
//     */
//    @Test
//    public void testJbCorrelationInitWithoutComponents() {
//        System.out.println("jbCorrelationInitWithoutComponents");
//        int components = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        float thresh = 0.0F;
//        float weightfactor = 0.0F;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbCorrelationInitWithoutComponents(components, maxwidth, maxheight, thresh, weightfactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbAddPages method, of class Leptonica.
//     */
//    @Test
//    public void testJbAddPages() {
//        System.out.println("jbAddPages");
//        JbClasser classer = null;
//        Sarray safiles = null;

//        int expResult = 0;
//        int result = instance.jbAddPages(classer, safiles);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbAddPage method, of class Leptonica.
//     */
//    @Test
//    public void testJbAddPage() {
//        System.out.println("jbAddPage");
//        JbClasser classer = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.jbAddPage(classer, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbAddPageComponents method, of class Leptonica.
//     */
//    @Test
//    public void testJbAddPageComponents() {
//        System.out.println("jbAddPageComponents");
//        JbClasser classer = null;
//        Pix pixs = null;
//        Boxa boxas = null;
//        Pixa pixas = null;

//        int expResult = 0;
//        int result = instance.jbAddPageComponents(classer, pixs, boxas, pixas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbClassifyRankHaus method, of class Leptonica.
//     */
//    @Test
//    public void testJbClassifyRankHaus() {
//        System.out.println("jbClassifyRankHaus");
//        JbClasser classer = null;
//        Boxa boxa = null;
//        Pixa pixas = null;

//        int expResult = 0;
//        int result = instance.jbClassifyRankHaus(classer, boxa, pixas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHaustest method, of class Leptonica.
//     */
//    @Test
//    public void testPixHaustest() {
//        System.out.println("pixHaustest");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        Pix pix3 = null;
//        Pix pix4 = null;
//        float delx = 0.0F;
//        float dely = 0.0F;
//        int maxdiffw = 0;
//        int maxdiffh = 0;

//        int expResult = 0;
//        int result = instance.pixHaustest(pix1, pix2, pix3, pix4, delx, dely, maxdiffw, maxdiffh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankHaustest method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankHaustest() {
//        System.out.println("pixRankHaustest");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        Pix pix3 = null;
//        Pix pix4 = null;
//        float delx = 0.0F;
//        float dely = 0.0F;
//        int maxdiffw = 0;
//        int maxdiffh = 0;
//        int area1 = 0;
//        int area3 = 0;
//        float rank = 0.0F;
//        IntBuffer tab8 = null;

//        int expResult = 0;
//        int result = instance.pixRankHaustest(pix1, pix2, pix3, pix4, delx, dely, maxdiffw, maxdiffh, area1, area3, rank, tab8);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbClassifyCorrelation method, of class Leptonica.
//     */
//    @Test
//    public void testJbClassifyCorrelation() {
//        System.out.println("jbClassifyCorrelation");
//        JbClasser classer = null;
//        Boxa boxa = null;
//        Pixa pixas = null;

//        int expResult = 0;
//        int result = instance.jbClassifyCorrelation(classer, boxa, pixas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbGetComponents method, of class Leptonica.
//     */
//    @Test
//    public void testJbGetComponents() {
//        System.out.println("jbGetComponents");
//        Pix pixs = null;
//        int components = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        Boxa.ByReference[] pboxad = null;
//        Pixa.ByReference[] ppixad = null;

//        int expResult = 0;
//        int result = instance.jbGetComponents(pixs, components, maxwidth, maxheight, pboxad, ppixad);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWordMaskByDilation method, of class Leptonica.
//     */
//    @Test
//    public void testPixWordMaskByDilation_4args_1() {
//        System.out.println("pixWordMaskByDilation");
//        Pix pixs = null;
//        int maxdil = 0;
//        Pix.ByReference[] ppixm = null;
//        IntBuffer psize = null;

//        int expResult = 0;
//        int result = instance.pixWordMaskByDilation(pixs, maxdil, ppixm, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWordMaskByDilation method, of class Leptonica.
//     */
//    @Test
//    public void testPixWordMaskByDilation_4args_2() {
//        System.out.println("pixWordMaskByDilation");
//        Pix pixs = null;
//        int maxdil = 0;
//        Pix.ByReference[] ppixm = null;
//        IntByReference psize = null;

//        int expResult = 0;
//        int result = instance.pixWordMaskByDilation(pixs, maxdil, ppixm, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWordBoxesByDilation method, of class Leptonica.
//     */
//    @Test
//    public void testPixWordBoxesByDilation_8args_1() {
//        System.out.println("pixWordBoxesByDilation");
//        Pix pixs = null;
//        int maxdil = 0;
//        int minwidth = 0;
//        int minheight = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        Boxa.ByReference[] pboxa = null;
//        IntBuffer psize = null;

//        int expResult = 0;
//        int result = instance.pixWordBoxesByDilation(pixs, maxdil, minwidth, minheight, maxwidth, maxheight, pboxa, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWordBoxesByDilation method, of class Leptonica.
//     */
//    @Test
//    public void testPixWordBoxesByDilation_8args_2() {
//        System.out.println("pixWordBoxesByDilation");
//        Pix pixs = null;
//        int maxdil = 0;
//        int minwidth = 0;
//        int minheight = 0;
//        int maxwidth = 0;
//        int maxheight = 0;
//        Boxa.ByReference[] pboxa = null;
//        IntByReference psize = null;

//        int expResult = 0;
//        int result = instance.pixWordBoxesByDilation(pixs, maxdil, minwidth, minheight, maxwidth, maxheight, pboxa, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbAccumulateComposites method, of class Leptonica.
//     */
//    @Test
//    public void testJbAccumulateComposites() {
//        System.out.println("jbAccumulateComposites");
//        Pixaa pixaa = null;
//        Numa.ByReference[] pna = null;
//        Pta.ByReference[] pptat = null;

//        Pixa expResult = null;
//        Pixa result = instance.jbAccumulateComposites(pixaa, pna, pptat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbTemplatesFromComposites method, of class Leptonica.
//     */
//    @Test
//    public void testJbTemplatesFromComposites() {
//        System.out.println("jbTemplatesFromComposites");
//        Pixa pixac = null;
//        Numa na = null;

//        Pixa expResult = null;
//        Pixa result = instance.jbTemplatesFromComposites(pixac, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbClasserCreate method, of class Leptonica.
//     */
//    @Test
//    public void testJbClasserCreate() {
//        System.out.println("jbClasserCreate");
//        int method = 0;
//        int components = 0;

//        JbClasser expResult = null;
//        JbClasser result = instance.jbClasserCreate(method, components);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbClasserDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testJbClasserDestroy() {
//        System.out.println("jbClasserDestroy");
//        JbClasser.ByReference[] pclasser = null;

//        instance.jbClasserDestroy(pclasser);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbDataSave method, of class Leptonica.
//     */
//    @Test
//    public void testJbDataSave() {
//        System.out.println("jbDataSave");
//        JbClasser classer = null;

//        JbData expResult = null;
//        JbData result = instance.jbDataSave(classer);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbDataDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testJbDataDestroy() {
//        System.out.println("jbDataDestroy");
//        JbData.ByReference[] pdata = null;

//        instance.jbDataDestroy(pdata);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbDataWrite method, of class Leptonica.
//     */
//    @Test
//    public void testJbDataWrite() {
//        System.out.println("jbDataWrite");
//        String rootout = "";
//        JbData jbdata = null;

//        int expResult = 0;
//        int result = instance.jbDataWrite(rootout, jbdata);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbDataRead method, of class Leptonica.
//     */
//    @Test
//    public void testJbDataRead() {
//        System.out.println("jbDataRead");
//        String rootname = "";

//        JbData expResult = null;
//        JbData result = instance.jbDataRead(rootname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbDataRender method, of class Leptonica.
//     */
//    @Test
//    public void testJbDataRender() {
//        System.out.println("jbDataRender");
//        JbData data = null;
//        int debugflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.jbDataRender(data, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbGetULCorners method, of class Leptonica.
//     */
//    @Test
//    public void testJbGetULCorners() {
//        System.out.println("jbGetULCorners");
//        JbClasser classer = null;
//        Pix pixs = null;
//        Boxa boxa = null;

//        int expResult = 0;
//        int result = instance.jbGetULCorners(classer, pixs, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of jbGetLLCorners method, of class Leptonica.
//     */
//    @Test
//    public void testJbGetLLCorners() {
//        System.out.println("jbGetLLCorners");
//        JbClasser classer = null;

//        int expResult = 0;
//        int result = instance.jbGetLLCorners(classer);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderJp2k() {
//        System.out.println("readHeaderJp2k");
//        String filename = "";
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderJp2k(filename, pw, ph, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderJp2k_5args_1() {
//        System.out.println("freadHeaderJp2k");
//        PointerByReference fp = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.freadHeaderJp2k(fp, pw, ph, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderJp2k_5args_2() {
//        System.out.println("freadHeaderJp2k");
//        PointerByReference fp = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        IntByReference pbps = null;
//        IntByReference pspp = null;

//        int expResult = 0;
//        int result = instance.freadHeaderJp2k(fp, pw, ph, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemJp2k() {
//        System.out.println("readHeaderMemJp2k");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemJp2k(data, size, pw, ph, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetJp2kResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetJp2kResolution_3args_1() {
//        System.out.println("fgetJp2kResolution");
//        PointerByReference fp = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.fgetJp2kResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetJp2kResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetJp2kResolution_3args_2() {
//        System.out.println("fgetJp2kResolution");
//        PointerByReference fp = null;
//        IntByReference pxres = null;
//        IntByReference pyres = null;

//        int expResult = 0;
//        int result = instance.fgetJp2kResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadJp2k() {
//        System.out.println("pixReadJp2k");
//        String filename = "";
//        int reduction = 0;
//        Box box = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadJp2k(filename, reduction, box, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamJp2k() {
//        System.out.println("pixReadStreamJp2k");
//        PointerByReference fp = null;
//        int reduction = 0;
//        Box box = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamJp2k(fp, reduction, box, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteJp2k() {
//        System.out.println("pixWriteJp2k");
//        String filename = "";
//        Pix pix = null;
//        int quality = 0;
//        int nlevels = 0;
//        int hint = 0;

//        int expResult = 0;
//        int result = instance.pixWriteJp2k(filename, pix, quality, nlevels, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamJp2k() {
//        System.out.println("pixWriteStreamJp2k");
//        PointerByReference fp = null;
//        Pix pix = null;
//        int quality = 0;
//        int nlevels = 0;
//        int hint = 0;

//        int expResult = 0;
//        int result = instance.pixWriteStreamJp2k(fp, pix, quality, nlevels, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemJp2k() {
//        System.out.println("pixReadMemJp2k");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        int reduction = 0;
//        Box box = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemJp2k(data, size, reduction, box, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemJp2k method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemJp2k() {
//        System.out.println("pixWriteMemJp2k");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        int quality = 0;
//        int nlevels = 0;
//        int hint = 0;

//        int expResult = 0;
//        int result = instance.pixWriteMemJp2k(pdata, psize, pix, quality, nlevels, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadJpeg() {
//        System.out.println("pixReadJpeg");
//        String filename = "";
//        int cmflag = 0;
//        int reduction = 0;
//        IntBuffer pnwarn = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadJpeg(filename, cmflag, reduction, pnwarn, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamJpeg_5args_1() {
//        System.out.println("pixReadStreamJpeg");
//        PointerByReference fp = null;
//        int cmflag = 0;
//        int reduction = 0;
//        IntBuffer pnwarn = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamJpeg(fp, cmflag, reduction, pnwarn, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamJpeg_5args_2() {
//        System.out.println("pixReadStreamJpeg");
//        PointerByReference fp = null;
//        int cmflag = 0;
//        int reduction = 0;
//        IntByReference pnwarn = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamJpeg(fp, cmflag, reduction, pnwarn, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderJpeg() {
//        System.out.println("readHeaderJpeg");
//        String filename = "";
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pspp = null;
//        IntBuffer pycck = null;
//        IntBuffer pcmyk = null;

//        int expResult = 0;
//        int result = instance.readHeaderJpeg(filename, pw, ph, pspp, pycck, pcmyk);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderJpeg_6args_1() {
//        System.out.println("freadHeaderJpeg");
//        PointerByReference fp = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pspp = null;
//        IntBuffer pycck = null;
//        IntBuffer pcmyk = null;

//        int expResult = 0;
//        int result = instance.freadHeaderJpeg(fp, pw, ph, pspp, pycck, pcmyk);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderJpeg_6args_2() {
//        System.out.println("freadHeaderJpeg");
//        PointerByReference fp = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        IntByReference pspp = null;
//        IntByReference pycck = null;
//        IntByReference pcmyk = null;

//        int expResult = 0;
//        int result = instance.freadHeaderJpeg(fp, pw, ph, pspp, pycck, pcmyk);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetJpegResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetJpegResolution_3args_1() {
//        System.out.println("fgetJpegResolution");
//        PointerByReference fp = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.fgetJpegResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetJpegResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetJpegResolution_3args_2() {
//        System.out.println("fgetJpegResolution");
//        PointerByReference fp = null;
//        IntByReference pxres = null;
//        IntByReference pyres = null;

//        int expResult = 0;
//        int result = instance.fgetJpegResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetJpegComment method, of class Leptonica.
//     */
//    @Test
//    public void testFgetJpegComment() {
//        System.out.println("fgetJpegComment");
//        PointerByReference fp = null;
//        PointerByReference pcomment = null;

//        int expResult = 0;
//        int result = instance.fgetJpegComment(fp, pcomment);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteJpeg() {
//        System.out.println("pixWriteJpeg");
//        String filename = "";
//        Pix pix = null;
//        int quality = 0;
//        int progressive = 0;

//        int expResult = 0;
//        int result = instance.pixWriteJpeg(filename, pix, quality, progressive);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamJpeg() {
//        System.out.println("pixWriteStreamJpeg");
//        PointerByReference fp = null;
//        Pix pixs = null;
//        int quality = 0;
//        int progressive = 0;

//        int expResult = 0;
//        int result = instance.pixWriteStreamJpeg(fp, pixs, quality, progressive);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemJpeg() {
//        System.out.println("pixReadMemJpeg");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        int cmflag = 0;
//        int reduction = 0;
//        IntBuffer pnwarn = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemJpeg(data, size, cmflag, reduction, pnwarn, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemJpeg() {
//        System.out.println("readHeaderMemJpeg");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pspp = null;
//        IntBuffer pycck = null;
//        IntBuffer pcmyk = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemJpeg(data, size, pw, ph, pspp, pycck, pcmyk);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemJpeg method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemJpeg() {
//        System.out.println("pixWriteMemJpeg");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        int quality = 0;
//        int progressive = 0;

//        int expResult = 0;
//        int result = instance.pixWriteMemJpeg(pdata, psize, pix, quality, progressive);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetChromaSampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetChromaSampling() {
//        System.out.println("pixSetChromaSampling");
//        Pix pix = null;
//        int sampling = 0;

//        int expResult = 0;
//        int result = instance.pixSetChromaSampling(pix, sampling);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelCreate method, of class Leptonica.
//     */
//    @Test
//    public void testKernelCreate() {
//        System.out.println("kernelCreate");
//        int height = 0;
//        int width = 0;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelCreate(height, width);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testKernelDestroy() {
//        System.out.println("kernelDestroy");
//        L_Kernel.ByReference[] pkel = null;

//        instance.kernelDestroy(pkel);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelCopy method, of class Leptonica.
//     */
//    @Test
//    public void testKernelCopy() {
//        System.out.println("kernelCopy");
//        L_Kernel kels = null;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelCopy(kels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelGetElement method, of class Leptonica.
//     */
//    @Test
//    public void testKernelGetElement() {
//        System.out.println("kernelGetElement");
//        L_Kernel kel = null;
//        int row = 0;
//        int col = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.kernelGetElement(kel, row, col, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelSetElement method, of class Leptonica.
//     */
//    @Test
//    public void testKernelSetElement() {
//        System.out.println("kernelSetElement");
//        L_Kernel kel = null;
//        int row = 0;
//        int col = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.kernelSetElement(kel, row, col, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelGetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testKernelGetParameters() {
//        System.out.println("kernelGetParameters");
//        L_Kernel kel = null;
//        IntBuffer psy = null;
//        IntBuffer psx = null;
//        IntBuffer pcy = null;
//        IntBuffer pcx = null;

//        int expResult = 0;
//        int result = instance.kernelGetParameters(kel, psy, psx, pcy, pcx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelSetOrigin method, of class Leptonica.
//     */
//    @Test
//    public void testKernelSetOrigin() {
//        System.out.println("kernelSetOrigin");
//        L_Kernel kel = null;
//        int cy = 0;
//        int cx = 0;

//        int expResult = 0;
//        int result = instance.kernelSetOrigin(kel, cy, cx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelGetSum method, of class Leptonica.
//     */
//    @Test
//    public void testKernelGetSum() {
//        System.out.println("kernelGetSum");
//        L_Kernel kel = null;
//        FloatBuffer psum = null;

//        int expResult = 0;
//        int result = instance.kernelGetSum(kel, psum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelGetMinMax method, of class Leptonica.
//     */
//    @Test
//    public void testKernelGetMinMax() {
//        System.out.println("kernelGetMinMax");
//        L_Kernel kel = null;
//        FloatBuffer pmin = null;
//        FloatBuffer pmax = null;

//        int expResult = 0;
//        int result = instance.kernelGetMinMax(kel, pmin, pmax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelNormalize method, of class Leptonica.
//     */
//    @Test
//    public void testKernelNormalize() {
//        System.out.println("kernelNormalize");
//        L_Kernel kels = null;
//        float normsum = 0.0F;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelNormalize(kels, normsum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelInvert method, of class Leptonica.
//     */
//    @Test
//    public void testKernelInvert() {
//        System.out.println("kernelInvert");
//        L_Kernel kels = null;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelInvert(kels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of create2dFloatArray method, of class Leptonica.
//     */
//    @Test
//    public void testCreate2dFloatArray() {
//        System.out.println("create2dFloatArray");
//        int sy = 0;
//        int sx = 0;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.create2dFloatArray(sy, sx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelRead method, of class Leptonica.
//     */
//    @Test
//    public void testKernelRead() {
//        System.out.println("kernelRead");
//        String fname = "";

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelRead(fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testKernelReadStream() {
//        System.out.println("kernelReadStream");
//        PointerByReference fp = null;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelWrite method, of class Leptonica.
//     */
//    @Test
//    public void testKernelWrite() {
//        System.out.println("kernelWrite");
//        String fname = "";
//        L_Kernel kel = null;

//        int expResult = 0;
//        int result = instance.kernelWrite(fname, kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testKernelWriteStream() {
//        System.out.println("kernelWriteStream");
//        PointerByReference fp = null;
//        L_Kernel kel = null;

//        int expResult = 0;
//        int result = instance.kernelWriteStream(fp, kel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelCreateFromString method, of class Leptonica.
//     */
//    @Test
//    public void testKernelCreateFromString() {
//        System.out.println("kernelCreateFromString");
//        int h = 0;
//        int w = 0;
//        int cy = 0;
//        int cx = 0;
//        String kdata = "";

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelCreateFromString(h, w, cy, cx, kdata);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelCreateFromFile method, of class Leptonica.
//     */
//    @Test
//    public void testKernelCreateFromFile() {
//        System.out.println("kernelCreateFromFile");
//        String filename = "";

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelCreateFromFile(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelCreateFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testKernelCreateFromPix() {
//        System.out.println("kernelCreateFromPix");
//        Pix pix = null;
//        int cy = 0;
//        int cx = 0;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.kernelCreateFromPix(pix, cy, cx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of kernelDisplayInPix method, of class Leptonica.
//     */
//    @Test
//    public void testKernelDisplayInPix() {
//        System.out.println("kernelDisplayInPix");
//        L_Kernel kel = null;
//        int size = 0;
//        int gthick = 0;

//        Pix expResult = null;
//        Pix result = instance.kernelDisplayInPix(kel, size, gthick);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of parseStringForNumbers method, of class Leptonica.
//     */
//    @Test
//    public void testParseStringForNumbers() {
//        System.out.println("parseStringForNumbers");
//        String str = "";
//        String seps = "";

//        Numa expResult = null;
//        Numa result = instance.parseStringForNumbers(str, seps);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeFlatKernel method, of class Leptonica.
//     */
//    @Test
//    public void testMakeFlatKernel() {
//        System.out.println("makeFlatKernel");
//        int height = 0;
//        int width = 0;
//        int cy = 0;
//        int cx = 0;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.makeFlatKernel(height, width, cy, cx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeGaussianKernel method, of class Leptonica.
//     */
//    @Test
//    public void testMakeGaussianKernel() {
//        System.out.println("makeGaussianKernel");
//        int halfheight = 0;
//        int halfwidth = 0;
//        float stdev = 0.0F;
//        float max = 0.0F;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.makeGaussianKernel(halfheight, halfwidth, stdev, max);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeGaussianKernelSep method, of class Leptonica.
//     */
//    @Test
//    public void testMakeGaussianKernelSep() {
//        System.out.println("makeGaussianKernelSep");
//        int halfheight = 0;
//        int halfwidth = 0;
//        float stdev = 0.0F;
//        float max = 0.0F;
//        L_Kernel.ByReference[] pkelx = null;
//        L_Kernel.ByReference[] pkely = null;

//        int expResult = 0;
//        int result = instance.makeGaussianKernelSep(halfheight, halfwidth, stdev, max, pkelx, pkely);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeDoGKernel method, of class Leptonica.
//     */
//    @Test
//    public void testMakeDoGKernel() {
//        System.out.println("makeDoGKernel");
//        int halfheight = 0;
//        int halfwidth = 0;
//        float stdev = 0.0F;
//        float ratio = 0.0F;

//        L_Kernel expResult = null;
//        L_Kernel result = instance.makeDoGKernel(halfheight, halfwidth, stdev, ratio);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getImagelibVersions method, of class Leptonica.
//     */
//    @Test
//    public void testGetImagelibVersions() {
//        System.out.println("getImagelibVersions");

//        Pointer expResult = null;
//        Pointer result = instance.getImagelibVersions();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testListDestroy() {
//        System.out.println("listDestroy");
//        DoubleLinkedList.ByReference[] phead = null;

//        instance.listDestroy(phead);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listAddToHead method, of class Leptonica.
//     */
//    @Test
//    public void testListAddToHead() {
//        System.out.println("listAddToHead");
//        DoubleLinkedList.ByReference[] phead = null;
//        Pointer data = null;

//        int expResult = 0;
//        int result = instance.listAddToHead(phead, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listAddToTail method, of class Leptonica.
//     */
//    @Test
//    public void testListAddToTail() {
//        System.out.println("listAddToTail");
//        DoubleLinkedList.ByReference[] phead = null;
//        DoubleLinkedList.ByReference[] ptail = null;
//        Pointer data = null;

//        int expResult = 0;
//        int result = instance.listAddToTail(phead, ptail, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listInsertBefore method, of class Leptonica.
//     */
//    @Test
//    public void testListInsertBefore() {
//        System.out.println("listInsertBefore");
//        DoubleLinkedList.ByReference[] phead = null;
//        DoubleLinkedList elem = null;
//        Pointer data = null;

//        int expResult = 0;
//        int result = instance.listInsertBefore(phead, elem, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listInsertAfter method, of class Leptonica.
//     */
//    @Test
//    public void testListInsertAfter() {
//        System.out.println("listInsertAfter");
//        DoubleLinkedList.ByReference[] phead = null;
//        DoubleLinkedList elem = null;
//        Pointer data = null;

//        int expResult = 0;
//        int result = instance.listInsertAfter(phead, elem, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listRemoveElement method, of class Leptonica.
//     */
//    @Test
//    public void testListRemoveElement() {
//        System.out.println("listRemoveElement");
//        DoubleLinkedList.ByReference[] phead = null;
//        DoubleLinkedList elem = null;

//        Pointer expResult = null;
//        Pointer result = instance.listRemoveElement(phead, elem);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listRemoveFromHead method, of class Leptonica.
//     */
//    @Test
//    public void testListRemoveFromHead() {
//        System.out.println("listRemoveFromHead");
//        DoubleLinkedList.ByReference[] phead = null;

//        Pointer expResult = null;
//        Pointer result = instance.listRemoveFromHead(phead);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listRemoveFromTail method, of class Leptonica.
//     */
//    @Test
//    public void testListRemoveFromTail() {
//        System.out.println("listRemoveFromTail");
//        DoubleLinkedList.ByReference[] phead = null;
//        DoubleLinkedList.ByReference[] ptail = null;

//        Pointer expResult = null;
//        Pointer result = instance.listRemoveFromTail(phead, ptail);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listFindElement method, of class Leptonica.
//     */
//    @Test
//    public void testListFindElement() {
//        System.out.println("listFindElement");
//        DoubleLinkedList head = null;
//        Pointer data = null;

//        DoubleLinkedList expResult = null;
//        DoubleLinkedList result = instance.listFindElement(head, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listFindTail method, of class Leptonica.
//     */
//    @Test
//    public void testListFindTail() {
//        System.out.println("listFindTail");
//        DoubleLinkedList head = null;

//        DoubleLinkedList expResult = null;
//        DoubleLinkedList result = instance.listFindTail(head);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testListGetCount() {
//        System.out.println("listGetCount");
//        DoubleLinkedList head = null;

//        int expResult = 0;
//        int result = instance.listGetCount(head);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listReverse method, of class Leptonica.
//     */
//    @Test
//    public void testListReverse() {
//        System.out.println("listReverse");
//        DoubleLinkedList.ByReference[] phead = null;

//        int expResult = 0;
//        int result = instance.listReverse(phead);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of listJoin method, of class Leptonica.
//     */
//    @Test
//    public void testListJoin() {
//        System.out.println("listJoin");
//        DoubleLinkedList.ByReference[] phead1 = null;
//        DoubleLinkedList.ByReference[] phead2 = null;

//        int expResult = 0;
//        int result = instance.listJoin(phead1, phead2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generateBinaryMaze method, of class Leptonica.
//     */
//    @Test
//    public void testGenerateBinaryMaze() {
//        System.out.println("generateBinaryMaze");
//        int w = 0;
//        int h = 0;
//        int xi = 0;
//        int yi = 0;
//        float wallps = 0.0F;
//        float ranis = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.generateBinaryMaze(w, h, xi, yi, wallps, ranis);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSearchBinaryMaze method, of class Leptonica.
//     */
//    @Test
//    public void testPixSearchBinaryMaze() {
//        System.out.println("pixSearchBinaryMaze");
//        Pix pixs = null;
//        int xi = 0;
//        int yi = 0;
//        int xf = 0;
//        int yf = 0;
//        Pix.ByReference[] ppixd = null;

//        Pta expResult = null;
//        Pta result = instance.pixSearchBinaryMaze(pixs, xi, yi, xf, yf, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSearchGrayMaze method, of class Leptonica.
//     */
//    @Test
//    public void testPixSearchGrayMaze() {
//        System.out.println("pixSearchGrayMaze");
//        Pix pixs = null;
//        int xi = 0;
//        int yi = 0;
//        int xf = 0;
//        int yf = 0;
//        Pix.ByReference[] ppixd = null;

//        Pta expResult = null;
//        Pta result = instance.pixSearchGrayMaze(pixs, xi, yi, xf, yf, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindLargestRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindLargestRectangle_4args_1() {
//        System.out.println("pixFindLargestRectangle");
//        Pix pixs = null;
//        int polarity = 0;
//        Box.ByReference[] pbox = null;
//        String debugfile = "";

//        int expResult = 0;
//        int result = instance.pixFindLargestRectangle(pixs, polarity, pbox, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindLargestRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindLargestRectangle_4args_2() {
//        System.out.println("pixFindLargestRectangle");
//        Pix pixs = null;
//        int polarity = 0;
//        Box.ByReference[] pbox = null;
//        Pointer debugfile = null;

//        int expResult = 0;
//        int result = instance.pixFindLargestRectangle(pixs, polarity, pbox, debugfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilate method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilate() {
//        System.out.println("pixDilate");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixDilate(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErode method, of class Leptonica.
//     */
//    @Test
//    public void testPixErode() {
//        System.out.println("pixErode");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixErode(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHMT method, of class Leptonica.
//     */
//    @Test
//    public void testPixHMT() {
//        System.out.println("pixHMT");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixHMT(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpen method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpen() {
//        System.out.println("pixOpen");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixOpen(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClose method, of class Leptonica.
//     */
//    @Test
//    public void testPixClose() {
//        System.out.println("pixClose");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixClose(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseSafe method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseSafe() {
//        System.out.println("pixCloseSafe");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixCloseSafe(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenGeneralized method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenGeneralized() {
//        System.out.println("pixOpenGeneralized");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixOpenGeneralized(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseGeneralized method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseGeneralized() {
//        System.out.println("pixCloseGeneralized");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pointer sel = null;

//        Pix expResult = null;
//        Pix result = instance.pixCloseGeneralized(pixd, pixs, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateBrick() {
//        System.out.println("pixDilateBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeBrick() {
//        System.out.println("pixErodeBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenBrick() {
//        System.out.println("pixOpenBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseBrick() {
//        System.out.println("pixCloseBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseSafeBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseSafeBrick() {
//        System.out.println("pixCloseSafeBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseSafeBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selectComposableSels method, of class Leptonica.
//     */
//    @Test
//    public void testSelectComposableSels() {
//        System.out.println("selectComposableSels");
//        int size = 0;
//        int direction = 0;
//        PointerByReference psel1 = null;
//        PointerByReference psel2 = null;

//        int expResult = 0;
//        int result = instance.selectComposableSels(size, direction, psel1, psel2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selectComposableSizes method, of class Leptonica.
//     */
//    @Test
//    public void testSelectComposableSizes() {
//        System.out.println("selectComposableSizes");
//        int size = 0;
//        IntBuffer pfactor1 = null;
//        IntBuffer pfactor2 = null;

//        int expResult = 0;
//        int result = instance.selectComposableSizes(size, pfactor1, pfactor2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateCompBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateCompBrick() {
//        System.out.println("pixDilateCompBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateCompBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeCompBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeCompBrick() {
//        System.out.println("pixErodeCompBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeCompBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenCompBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenCompBrick() {
//        System.out.println("pixOpenCompBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenCompBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseCompBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseCompBrick() {
//        System.out.println("pixCloseCompBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseCompBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseSafeCompBrick method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseSafeCompBrick() {
//        System.out.println("pixCloseSafeCompBrick");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseSafeCompBrick(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of resetMorphBoundaryCondition method, of class Leptonica.
//     */
//    @Test
//    public void testResetMorphBoundaryCondition() {
//        System.out.println("resetMorphBoundaryCondition");
//        int bc = 0;

//        instance.resetMorphBoundaryCondition(bc);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getMorphBorderPixelColor method, of class Leptonica.
//     */
//    @Test
//    public void testGetMorphBorderPixelColor() {
//        System.out.println("getMorphBorderPixelColor");
//        int type = 0;
//        int depth = 0;

//        int expResult = 0;
//        int result = instance.getMorphBorderPixelColor(type, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBoundary method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBoundary() {
//        System.out.println("pixExtractBoundary");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExtractBoundary(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceMasked() {
//        System.out.println("pixMorphSequenceMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        String sequence = "";
//        int dispsep = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceMasked(pixs, pixm, sequence, dispsep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceByComponent_6args_1() {
//        System.out.println("pixMorphSequenceByComponent");
//        Pix pixs = null;
//        String sequence = "";
//        int connectivity = 0;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceByComponent(pixs, sequence, connectivity, minw, minh, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceByComponent_6args_2() {
//        System.out.println("pixMorphSequenceByComponent");
//        Pix pixs = null;
//        Pointer sequence = null;
//        int connectivity = 0;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceByComponent(pixs, sequence, connectivity, minw, minh, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaMorphSequenceByComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixaMorphSequenceByComponent() {
//        System.out.println("pixaMorphSequenceByComponent");
//        Pixa pixas = null;
//        String sequence = "";
//        int minw = 0;
//        int minh = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaMorphSequenceByComponent(pixas, sequence, minw, minh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceByRegion method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceByRegion_7args_1() {
//        System.out.println("pixMorphSequenceByRegion");
//        Pix pixs = null;
//        Pix pixm = null;
//        String sequence = "";
//        int connectivity = 0;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceByRegion(pixs, pixm, sequence, connectivity, minw, minh, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceByRegion method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceByRegion_7args_2() {
//        System.out.println("pixMorphSequenceByRegion");
//        Pix pixs = null;
//        Pix pixm = null;
//        Pointer sequence = null;
//        int connectivity = 0;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceByRegion(pixs, pixm, sequence, connectivity, minw, minh, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaMorphSequenceByRegion method, of class Leptonica.
//     */
//    @Test
//    public void testPixaMorphSequenceByRegion() {
//        System.out.println("pixaMorphSequenceByRegion");
//        Pix pixs = null;
//        Pixa pixam = null;
//        String sequence = "";
//        int minw = 0;
//        int minh = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaMorphSequenceByRegion(pixs, pixam, sequence, minw, minh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnionOfMorphOps method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnionOfMorphOps() {
//        System.out.println("pixUnionOfMorphOps");
//        Pix pixs = null;
//        Sela sela = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixUnionOfMorphOps(pixs, sela, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixIntersectionOfMorphOps method, of class Leptonica.
//     */
//    @Test
//    public void testPixIntersectionOfMorphOps() {
//        System.out.println("pixIntersectionOfMorphOps");
//        Pix pixs = null;
//        Sela sela = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixIntersectionOfMorphOps(pixs, sela, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectiveConnCompFill method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectiveConnCompFill() {
//        System.out.println("pixSelectiveConnCompFill");
//        Pix pixs = null;
//        int connectivity = 0;
//        int minw = 0;
//        int minh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSelectiveConnCompFill(pixs, connectivity, minw, minh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveMatchedPattern method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveMatchedPattern() {
//        System.out.println("pixRemoveMatchedPattern");
//        Pix pixs = null;
//        Pix pixp = null;
//        Pix pixe = null;
//        int x0 = 0;
//        int y0 = 0;
//        int dsize = 0;

//        int expResult = 0;
//        int result = instance.pixRemoveMatchedPattern(pixs, pixp, pixe, x0, y0, dsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayMatchedPattern method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayMatchedPattern() {
//        System.out.println("pixDisplayMatchedPattern");
//        Pix pixs = null;
//        Pix pixp = null;
//        Pix pixe = null;
//        int x0 = 0;
//        int y0 = 0;
//        int color = 0;
//        float scale = 0.0F;
//        int nlevels = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayMatchedPattern(pixs, pixp, pixe, x0, y0, color, scale, nlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillMorph() {
//        System.out.println("pixSeedfillMorph");
//        Pix pixs = null;
//        Pix pixm = null;
//        int maxiters = 0;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSeedfillMorph(pixs, pixm, maxiters, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRunHistogramMorph method, of class Leptonica.
//     */
//    @Test
//    public void testPixRunHistogramMorph() {
//        System.out.println("pixRunHistogramMorph");
//        Pix pixs = null;
//        int runtype = 0;
//        int direction = 0;
//        int maxsize = 0;

//        Numa expResult = null;
//        Numa result = instance.pixRunHistogramMorph(pixs, runtype, direction, maxsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTophat method, of class Leptonica.
//     */
//    @Test
//    public void testPixTophat() {
//        System.out.println("pixTophat");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixTophat(pixs, hsize, vsize, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHDome method, of class Leptonica.
//     */
//    @Test
//    public void testPixHDome() {
//        System.out.println("pixHDome");
//        Pix pixs = null;
//        int height = 0;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHDome(pixs, height, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFastTophat method, of class Leptonica.
//     */
//    @Test
//    public void testPixFastTophat() {
//        System.out.println("pixFastTophat");
//        Pix pixs = null;
//        int xsize = 0;
//        int ysize = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFastTophat(pixs, xsize, ysize, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphGradient method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphGradient() {
//        System.out.println("pixMorphGradient");
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;
//        int smoothing = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphGradient(pixs, hsize, vsize, smoothing);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCentroids method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCentroids() {
//        System.out.println("pixaCentroids");
//        Pixa pixa = null;

//        Pta expResult = null;
//        Pta result = instance.pixaCentroids(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCentroid method, of class Leptonica.
//     */
//    @Test
//    public void testPixCentroid() {
//        System.out.println("pixCentroid");
//        Pix pix = null;
//        IntBuffer centtab = null;
//        IntBuffer sumtab = null;
//        FloatBuffer pxave = null;
//        FloatBuffer pyave = null;

//        int expResult = 0;
//        int result = instance.pixCentroid(pix, centtab, sumtab, pxave, pyave);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateBrickDwa() {
//        System.out.println("pixDilateBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeBrickDwa() {
//        System.out.println("pixErodeBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenBrickDwa() {
//        System.out.println("pixOpenBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseBrickDwa() {
//        System.out.println("pixCloseBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateCompBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateCompBrickDwa() {
//        System.out.println("pixDilateCompBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateCompBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeCompBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeCompBrickDwa() {
//        System.out.println("pixErodeCompBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeCompBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenCompBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenCompBrickDwa() {
//        System.out.println("pixOpenCompBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenCompBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseCompBrickDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseCompBrickDwa() {
//        System.out.println("pixCloseCompBrickDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseCompBrickDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDilateCompBrickExtendDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixDilateCompBrickExtendDwa() {
//        System.out.println("pixDilateCompBrickExtendDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDilateCompBrickExtendDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixErodeCompBrickExtendDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixErodeCompBrickExtendDwa() {
//        System.out.println("pixErodeCompBrickExtendDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixErodeCompBrickExtendDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOpenCompBrickExtendDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixOpenCompBrickExtendDwa() {
//        System.out.println("pixOpenCompBrickExtendDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixOpenCompBrickExtendDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCloseCompBrickExtendDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixCloseCompBrickExtendDwa() {
//        System.out.println("pixCloseCompBrickExtendDwa");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCloseCompBrickExtendDwa(pixd, pixs, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getExtendedCompositeParameters method, of class Leptonica.
//     */
//    @Test
//    public void testGetExtendedCompositeParameters() {
//        System.out.println("getExtendedCompositeParameters");
//        int size = 0;
//        IntBuffer pn = null;
//        IntBuffer pextra = null;
//        IntBuffer pactualsize = null;

//        int expResult = 0;
//        int result = instance.getExtendedCompositeParameters(size, pn, pextra, pactualsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequence method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequence() {
//        System.out.println("pixMorphSequence");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequence(pixs, sequence, dispsep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphCompSequence method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphCompSequence() {
//        System.out.println("pixMorphCompSequence");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphCompSequence(pixs, sequence, dispsep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphSequenceDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphSequenceDwa() {
//        System.out.println("pixMorphSequenceDwa");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphSequenceDwa(pixs, sequence, dispsep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMorphCompSequenceDwa method, of class Leptonica.
//     */
//    @Test
//    public void testPixMorphCompSequenceDwa() {
//        System.out.println("pixMorphCompSequenceDwa");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMorphCompSequenceDwa(pixs, sequence, dispsep);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of morphSequenceVerify method, of class Leptonica.
//     */
//    @Test
//    public void testMorphSequenceVerify() {
//        System.out.println("morphSequenceVerify");
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.morphSequenceVerify(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGrayMorphSequence method, of class Leptonica.
//     */
//    @Test
//    public void testPixGrayMorphSequence() {
//        System.out.println("pixGrayMorphSequence");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;
//        int dispy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGrayMorphSequence(pixs, sequence, dispsep, dispy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorMorphSequence method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorMorphSequence() {
//        System.out.println("pixColorMorphSequence");
//        Pix pixs = null;
//        String sequence = "";
//        int dispsep = 0;
//        int dispy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorMorphSequence(pixs, sequence, dispsep, dispy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCreate() {
//        System.out.println("numaCreate");
//        int n = 0;

//        Numa expResult = null;
//        Numa result = instance.numaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCreateFromIArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCreateFromIArray() {
//        System.out.println("numaCreateFromIArray");
//        IntBuffer iarray = null;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaCreateFromIArray(iarray, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCreateFromFArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCreateFromFArray() {
//        System.out.println("numaCreateFromFArray");
//        FloatBuffer farray = null;
//        int size = 0;
//        int copyflag = 0;

//        Numa expResult = null;
//        Numa result = instance.numaCreateFromFArray(farray, size, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testNumaDestroy() {
//        System.out.println("numaDestroy");
//        Numa.ByReference[] pna = null;

//        instance.numaDestroy(pna);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCopy() {
//        System.out.println("numaCopy");
//        Numa na = null;

//        Numa expResult = null;
//        Numa result = instance.numaCopy(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaClone method, of class Leptonica.
//     */
//    @Test
//    public void testNumaClone() {
//        System.out.println("numaClone");
//        Numa na = null;

//        Numa expResult = null;
//        Numa result = instance.numaClone(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaEmpty method, of class Leptonica.
//     */
//    @Test
//    public void testNumaEmpty() {
//        System.out.println("numaEmpty");
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaEmpty(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaAddNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaAddNumber() {
//        System.out.println("numaAddNumber");
//        Numa na = null;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaAddNumber(na, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInsertNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInsertNumber() {
//        System.out.println("numaInsertNumber");
//        Numa na = null;
//        int index = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaInsertNumber(na, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaRemoveNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaRemoveNumber() {
//        System.out.println("numaRemoveNumber");
//        Numa na = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.numaRemoveNumber(na, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaReplaceNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaReplaceNumber() {
//        System.out.println("numaReplaceNumber");
//        Numa na = null;
//        int index = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaReplaceNumber(na, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetCount() {
//        System.out.println("numaGetCount");
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaGetCount(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSetCount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSetCount() {
//        System.out.println("numaSetCount");
//        Numa na = null;
//        int newcount = 0;

//        int expResult = 0;
//        int result = instance.numaSetCount(na, newcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetFValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetFValue() {
//        System.out.println("numaGetFValue");
//        Numa na = null;
//        int index = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numaGetFValue(na, index, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetIValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetIValue() {
//        System.out.println("numaGetIValue");
//        Numa na = null;
//        int index = 0;
//        IntBuffer pival = null;

//        int expResult = 0;
//        int result = instance.numaGetIValue(na, index, pival);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSetValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSetValue() {
//        System.out.println("numaSetValue");
//        Numa na = null;
//        int index = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaSetValue(na, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaShiftValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaShiftValue() {
//        System.out.println("numaShiftValue");
//        Numa na = null;
//        int index = 0;
//        float diff = 0.0F;

//        int expResult = 0;
//        int result = instance.numaShiftValue(na, index, diff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetIArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetIArray() {
//        System.out.println("numaGetIArray");
//        Numa na = null;

//        IntByReference expResult = null;
//        IntByReference result = instance.numaGetIArray(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetFArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetFArray() {
//        System.out.println("numaGetFArray");
//        Numa na = null;
//        int copyflag = 0;

//        FloatByReference expResult = null;
//        FloatByReference result = instance.numaGetFArray(na, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetRefcount() {
//        System.out.println("numaGetRefcount");
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaGetRefcount(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaChangeRefcount() {
//        System.out.println("numaChangeRefcount");
//        Numa na = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.numaChangeRefcount(na, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetParameters() {
//        System.out.println("numaGetParameters");
//        Numa na = null;
//        FloatBuffer pstartx = null;
//        FloatBuffer pdelx = null;

//        int expResult = 0;
//        int result = instance.numaGetParameters(na, pstartx, pdelx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSetParameters() {
//        System.out.println("numaSetParameters");
//        Numa na = null;
//        float startx = 0.0F;
//        float delx = 0.0F;

//        int expResult = 0;
//        int result = instance.numaSetParameters(na, startx, delx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCopyParameters method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCopyParameters() {
//        System.out.println("numaCopyParameters");
//        Numa nad = null;
//        Numa nas = null;

//        int expResult = 0;
//        int result = instance.numaCopyParameters(nad, nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaConvertToSarray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaConvertToSarray() {
//        System.out.println("numaConvertToSarray");
//        Numa na = null;
//        int size1 = 0;
//        int size2 = 0;
//        int addzeros = 0;
//        int type = 0;

//        Sarray expResult = null;
//        Sarray result = instance.numaConvertToSarray(na, size1, size2, addzeros, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaRead method, of class Leptonica.
//     */
//    @Test
//    public void testNumaRead() {
//        System.out.println("numaRead");
//        String filename = "";

//        Numa expResult = null;
//        Numa result = instance.numaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testNumaReadStream() {
//        System.out.println("numaReadStream");
//        PointerByReference fp = null;

//        Numa expResult = null;
//        Numa result = instance.numaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWrite() {
//        System.out.println("numaWrite");
//        String filename = "";
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaWrite(filename, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWriteStream() {
//        System.out.println("numaWriteStream");
//        PointerByReference fp = null;
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaWriteStream(fp, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaCreate() {
//        System.out.println("numaaCreate");
//        int n = 0;

//        Numaa expResult = null;
//        Numaa result = instance.numaaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaCreateFull method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaCreateFull() {
//        System.out.println("numaaCreateFull");
//        int ntop = 0;
//        int n = 0;

//        Numaa expResult = null;
//        Numaa result = instance.numaaCreateFull(ntop, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaTruncate method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaTruncate() {
//        System.out.println("numaaTruncate");
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaTruncate(naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaDestroy() {
//        System.out.println("numaaDestroy");
//        Numaa.ByReference[] pnaa = null;

//        instance.numaaDestroy(pnaa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaAddNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaAddNuma() {
//        System.out.println("numaaAddNuma");
//        Numaa naa = null;
//        Numa na = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.numaaAddNuma(naa, na, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaExtendArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaExtendArray() {
//        System.out.println("numaaExtendArray");
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaExtendArray(naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetCount() {
//        System.out.println("numaaGetCount");
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaGetCount(naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetNumaCount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetNumaCount() {
//        System.out.println("numaaGetNumaCount");
//        Numaa naa = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.numaaGetNumaCount(naa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetNumberCount method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetNumberCount() {
//        System.out.println("numaaGetNumberCount");
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaGetNumberCount(naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetPtrArray method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetPtrArray() {
//        System.out.println("numaaGetPtrArray");
//        Numaa naa = null;

//        Numa.ByReference[] expResult = null;
//        Numa.ByReference[] result = instance.numaaGetPtrArray(naa);
//        assertArrayEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetNuma() {
//        System.out.println("numaaGetNuma");
//        Numaa naa = null;
//        int index = 0;
//        int accessflag = 0;

//        Numa expResult = null;
//        Numa result = instance.numaaGetNuma(naa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaReplaceNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaReplaceNuma() {
//        System.out.println("numaaReplaceNuma");
//        Numaa naa = null;
//        int index = 0;
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.numaaReplaceNuma(naa, index, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaGetValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaGetValue() {
//        System.out.println("numaaGetValue");
//        Numaa naa = null;
//        int i = 0;
//        int j = 0;
//        FloatBuffer pfval = null;
//        IntBuffer pival = null;

//        int expResult = 0;
//        int result = instance.numaaGetValue(naa, i, j, pfval, pival);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaAddNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaAddNumber() {
//        System.out.println("numaaAddNumber");
//        Numaa naa = null;
//        int index = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaaAddNumber(naa, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaRead method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaRead() {
//        System.out.println("numaaRead");
//        String filename = "";

//        Numaa expResult = null;
//        Numaa result = instance.numaaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaReadStream() {
//        System.out.println("numaaReadStream");
//        PointerByReference fp = null;

//        Numaa expResult = null;
//        Numaa result = instance.numaaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaWrite() {
//        System.out.println("numaaWrite");
//        String filename = "";
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaWrite(filename, naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaWriteStream() {
//        System.out.println("numaaWriteStream");
//        PointerByReference fp = null;
//        Numaa naa = null;

//        int expResult = 0;
//        int result = instance.numaaWriteStream(fp, naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dCreate method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dCreate() {
//        System.out.println("numa2dCreate");
//        int nrows = 0;
//        int ncols = 0;
//        int initsize = 0;

//        Numa2d expResult = null;
//        Numa2d result = instance.numa2dCreate(nrows, ncols, initsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dDestroy() {
//        System.out.println("numa2dDestroy");
//        Numa2d.ByReference[] pna2d = null;

//        instance.numa2dDestroy(pna2d);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dAddNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dAddNumber() {
//        System.out.println("numa2dAddNumber");
//        Numa2d na2d = null;
//        int row = 0;
//        int col = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numa2dAddNumber(na2d, row, col, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dGetCount() {
//        System.out.println("numa2dGetCount");
//        Numa2d na2d = null;
//        int row = 0;
//        int col = 0;

//        int expResult = 0;
//        int result = instance.numa2dGetCount(na2d, row, col);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dGetNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dGetNuma() {
//        System.out.println("numa2dGetNuma");
//        Numa2d na2d = null;
//        int row = 0;
//        int col = 0;

//        Numa expResult = null;
//        Numa result = instance.numa2dGetNuma(na2d, row, col);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dGetFValue method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dGetFValue() {
//        System.out.println("numa2dGetFValue");
//        Numa2d na2d = null;
//        int row = 0;
//        int col = 0;
//        int index = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numa2dGetFValue(na2d, row, col, index, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numa2dGetIValue method, of class Leptonica.
//     */
//    @Test
//    public void testNuma2dGetIValue() {
//        System.out.println("numa2dGetIValue");
//        Numa2d na2d = null;
//        int row = 0;
//        int col = 0;
//        int index = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numa2dGetIValue(na2d, row, col, index, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHashCreate method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHashCreate() {
//        System.out.println("numaHashCreate");
//        int nbuckets = 0;
//        int initsize = 0;

//        NumaHash expResult = null;
//        NumaHash result = instance.numaHashCreate(nbuckets, initsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHashDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHashDestroy() {
//        System.out.println("numaHashDestroy");
//        NumaHash.ByReference[] pnahash = null;

//        instance.numaHashDestroy(pnahash);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHashGetNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHashGetNuma() {
//        System.out.println("numaHashGetNuma");
//        NumaHash nahash = null;
//        int key = 0;

//        Numa expResult = null;
//        Numa result = instance.numaHashGetNuma(nahash, key);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHashAdd method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHashAdd() {
//        System.out.println("numaHashAdd");
//        NumaHash nahash = null;
//        int key = 0;
//        float value = 0.0F;

//        int expResult = 0;
//        int result = instance.numaHashAdd(nahash, key, value);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaArithOp method, of class Leptonica.
//     */
//    @Test
//    public void testNumaArithOp() {
//        System.out.println("numaArithOp");
//        Numa nad = null;
//        Numa na1 = null;
//        Numa na2 = null;
//        int op = 0;

//        Numa expResult = null;
//        Numa result = instance.numaArithOp(nad, na1, na2, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaLogicalOp method, of class Leptonica.
//     */
//    @Test
//    public void testNumaLogicalOp() {
//        System.out.println("numaLogicalOp");
//        Numa nad = null;
//        Numa na1 = null;
//        Numa na2 = null;
//        int op = 0;

//        Numa expResult = null;
//        Numa result = instance.numaLogicalOp(nad, na1, na2, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInvert method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInvert() {
//        System.out.println("numaInvert");
//        Numa nad = null;
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaInvert(nad, nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSimilar method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSimilar() {
//        System.out.println("numaSimilar");
//        Numa na1 = null;
//        Numa na2 = null;
//        float maxdiff = 0.0F;
//        IntBuffer psimilar = null;

//        int expResult = 0;
//        int result = instance.numaSimilar(na1, na2, maxdiff, psimilar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaAddToNumber method, of class Leptonica.
//     */
//    @Test
//    public void testNumaAddToNumber() {
//        System.out.println("numaAddToNumber");
//        Numa na = null;
//        int index = 0;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.numaAddToNumber(na, index, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetMin method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetMin() {
//        System.out.println("numaGetMin");
//        Numa na = null;
//        FloatBuffer pminval = null;
//        IntBuffer piminloc = null;

//        int expResult = 0;
//        int result = instance.numaGetMin(na, pminval, piminloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetMax method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetMax() {
//        System.out.println("numaGetMax");
//        Numa na = null;
//        FloatBuffer pmaxval = null;
//        IntBuffer pimaxloc = null;

//        int expResult = 0;
//        int result = instance.numaGetMax(na, pmaxval, pimaxloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetSum method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetSum() {
//        System.out.println("numaGetSum");
//        Numa na = null;
//        FloatBuffer psum = null;

//        int expResult = 0;
//        int result = instance.numaGetSum(na, psum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetPartialSums method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetPartialSums() {
//        System.out.println("numaGetPartialSums");
//        Numa na = null;

//        Numa expResult = null;
//        Numa result = instance.numaGetPartialSums(na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetSumOnInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetSumOnInterval() {
//        System.out.println("numaGetSumOnInterval");
//        Numa na = null;
//        int first = 0;
//        int last = 0;
//        FloatBuffer psum = null;

//        int expResult = 0;
//        int result = instance.numaGetSumOnInterval(na, first, last, psum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHasOnlyIntegers method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHasOnlyIntegers() {
//        System.out.println("numaHasOnlyIntegers");
//        Numa na = null;
//        int maxsamples = 0;
//        IntBuffer pallints = null;

//        int expResult = 0;
//        int result = instance.numaHasOnlyIntegers(na, maxsamples, pallints);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSubsample method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSubsample() {
//        System.out.println("numaSubsample");
//        Numa nas = null;
//        int subfactor = 0;

//        Numa expResult = null;
//        Numa result = instance.numaSubsample(nas, subfactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeDelta method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeDelta() {
//        System.out.println("numaMakeDelta");
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaMakeDelta(nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeSequence method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeSequence() {
//        System.out.println("numaMakeSequence");
//        float startval = 0.0F;
//        float increment = 0.0F;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaMakeSequence(startval, increment, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeConstant method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeConstant() {
//        System.out.println("numaMakeConstant");
//        float val = 0.0F;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaMakeConstant(val, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeAbsValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeAbsValue() {
//        System.out.println("numaMakeAbsValue");
//        Numa nad = null;
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaMakeAbsValue(nad, nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaAddBorder method, of class Leptonica.
//     */
//    @Test
//    public void testNumaAddBorder() {
//        System.out.println("numaAddBorder");
//        Numa nas = null;
//        int left = 0;
//        int right = 0;
//        float val = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaAddBorder(nas, left, right, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaAddSpecifiedBorder method, of class Leptonica.
//     */
//    @Test
//    public void testNumaAddSpecifiedBorder() {
//        System.out.println("numaAddSpecifiedBorder");
//        Numa nas = null;
//        int left = 0;
//        int right = 0;
//        int type = 0;

//        Numa expResult = null;
//        Numa result = instance.numaAddSpecifiedBorder(nas, left, right, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaRemoveBorder method, of class Leptonica.
//     */
//    @Test
//    public void testNumaRemoveBorder() {
//        System.out.println("numaRemoveBorder");
//        Numa nas = null;
//        int left = 0;
//        int right = 0;

//        Numa expResult = null;
//        Numa result = instance.numaRemoveBorder(nas, left, right);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetNonzeroRange method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetNonzeroRange() {
//        System.out.println("numaGetNonzeroRange");
//        Numa na = null;
//        float eps = 0.0F;
//        IntBuffer pfirst = null;
//        IntBuffer plast = null;

//        int expResult = 0;
//        int result = instance.numaGetNonzeroRange(na, eps, pfirst, plast);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetCountRelativeToZero method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetCountRelativeToZero() {
//        System.out.println("numaGetCountRelativeToZero");
//        Numa na = null;
//        int type = 0;
//        IntBuffer pcount = null;

//        int expResult = 0;
//        int result = instance.numaGetCountRelativeToZero(na, type, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaClipToInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaClipToInterval() {
//        System.out.println("numaClipToInterval");
//        Numa nas = null;
//        int first = 0;
//        int last = 0;

//        Numa expResult = null;
//        Numa result = instance.numaClipToInterval(nas, first, last);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeThresholdIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeThresholdIndicator() {
//        System.out.println("numaMakeThresholdIndicator");
//        Numa nas = null;
//        float thresh = 0.0F;
//        int type = 0;

//        Numa expResult = null;
//        Numa result = instance.numaMakeThresholdIndicator(nas, thresh, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaUniformSampling method, of class Leptonica.
//     */
//    @Test
//    public void testNumaUniformSampling() {
//        System.out.println("numaUniformSampling");
//        Numa nas = null;
//        int nsamp = 0;

//        Numa expResult = null;
//        Numa result = instance.numaUniformSampling(nas, nsamp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaReverse method, of class Leptonica.
//     */
//    @Test
//    public void testNumaReverse() {
//        System.out.println("numaReverse");
//        Numa nad = null;
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaReverse(nad, nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaLowPassIntervals method, of class Leptonica.
//     */
//    @Test
//    public void testNumaLowPassIntervals() {
//        System.out.println("numaLowPassIntervals");
//        Numa nas = null;
//        float thresh = 0.0F;
//        float maxn = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaLowPassIntervals(nas, thresh, maxn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaThresholdEdges method, of class Leptonica.
//     */
//    @Test
//    public void testNumaThresholdEdges() {
//        System.out.println("numaThresholdEdges");
//        Numa nas = null;
//        float thresh1 = 0.0F;
//        float thresh2 = 0.0F;
//        float maxn = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaThresholdEdges(nas, thresh1, thresh2, maxn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetSpanValues method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetSpanValues() {
//        System.out.println("numaGetSpanValues");
//        Numa na = null;
//        int span = 0;
//        IntBuffer pstart = null;
//        IntBuffer pend = null;

//        int expResult = 0;
//        int result = instance.numaGetSpanValues(na, span, pstart, pend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetEdgeValues method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetEdgeValues() {
//        System.out.println("numaGetEdgeValues");
//        Numa na = null;
//        int edge = 0;
//        IntBuffer pstart = null;
//        IntBuffer pend = null;
//        IntBuffer psign = null;

//        int expResult = 0;
//        int result = instance.numaGetEdgeValues(na, edge, pstart, pend, psign);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInterpolateEqxVal method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInterpolateEqxVal() {
//        System.out.println("numaInterpolateEqxVal");
//        float startx = 0.0F;
//        float deltax = 0.0F;
//        Numa nay = null;
//        int type = 0;
//        float xval = 0.0F;
//        FloatBuffer pyval = null;

//        int expResult = 0;
//        int result = instance.numaInterpolateEqxVal(startx, deltax, nay, type, xval, pyval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInterpolateArbxVal method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInterpolateArbxVal() {
//        System.out.println("numaInterpolateArbxVal");
//        Numa nax = null;
//        Numa nay = null;
//        int type = 0;
//        float xval = 0.0F;
//        FloatBuffer pyval = null;

//        int expResult = 0;
//        int result = instance.numaInterpolateArbxVal(nax, nay, type, xval, pyval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInterpolateEqxInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInterpolateEqxInterval() {
//        System.out.println("numaInterpolateEqxInterval");
//        float startx = 0.0F;
//        float deltax = 0.0F;
//        Numa nasy = null;
//        int type = 0;
//        float x0 = 0.0F;
//        float x1 = 0.0F;
//        int npts = 0;
//        Numa.ByReference[] pnax = null;
//        Numa.ByReference[] pnay = null;

//        int expResult = 0;
//        int result = instance.numaInterpolateEqxInterval(startx, deltax, nasy, type, x0, x1, npts, pnax, pnay);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInterpolateArbxInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInterpolateArbxInterval() {
//        System.out.println("numaInterpolateArbxInterval");
//        Numa nax = null;
//        Numa nay = null;
//        int type = 0;
//        float x0 = 0.0F;
//        float x1 = 0.0F;
//        int npts = 0;
//        Numa.ByReference[] pnadx = null;
//        Numa.ByReference[] pnady = null;

//        int expResult = 0;
//        int result = instance.numaInterpolateArbxInterval(nax, nay, type, x0, x1, npts, pnadx, pnady);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaFitMax method, of class Leptonica.
//     */
//    @Test
//    public void testNumaFitMax() {
//        System.out.println("numaFitMax");
//        Numa na = null;
//        FloatBuffer pmaxval = null;
//        Numa naloc = null;
//        FloatBuffer pmaxloc = null;

//        int expResult = 0;
//        int result = instance.numaFitMax(na, pmaxval, naloc, pmaxloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaDifferentiateInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaDifferentiateInterval() {
//        System.out.println("numaDifferentiateInterval");
//        Numa nax = null;
//        Numa nay = null;
//        float x0 = 0.0F;
//        float x1 = 0.0F;
//        int npts = 0;
//        Numa.ByReference[] pnadx = null;
//        Numa.ByReference[] pnady = null;

//        int expResult = 0;
//        int result = instance.numaDifferentiateInterval(nax, nay, x0, x1, npts, pnadx, pnady);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaIntegrateInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaIntegrateInterval() {
//        System.out.println("numaIntegrateInterval");
//        Numa nax = null;
//        Numa nay = null;
//        float x0 = 0.0F;
//        float x1 = 0.0F;
//        int npts = 0;
//        FloatBuffer psum = null;

//        int expResult = 0;
//        int result = instance.numaIntegrateInterval(nax, nay, x0, x1, npts, psum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSortGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSortGeneral() {
//        System.out.println("numaSortGeneral");
//        Numa na = null;
//        Numa.ByReference[] pnasort = null;
//        Numa.ByReference[] pnaindex = null;
//        Numa.ByReference[] pnainvert = null;
//        int sortorder = 0;
//        int sorttype = 0;

//        int expResult = 0;
//        int result = instance.numaSortGeneral(na, pnasort, pnaindex, pnainvert, sortorder, sorttype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSortAutoSelect method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSortAutoSelect() {
//        System.out.println("numaSortAutoSelect");
//        Numa nas = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaSortAutoSelect(nas, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSortIndexAutoSelect method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSortIndexAutoSelect() {
//        System.out.println("numaSortIndexAutoSelect");
//        Numa nas = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaSortIndexAutoSelect(nas, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaChooseSortType method, of class Leptonica.
//     */
//    @Test
//    public void testNumaChooseSortType() {
//        System.out.println("numaChooseSortType");
//        Numa nas = null;

//        int expResult = 0;
//        int result = instance.numaChooseSortType(nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSort method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSort() {
//        System.out.println("numaSort");
//        Numa naout = null;
//        Numa nain = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaSort(naout, nain, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaBinSort method, of class Leptonica.
//     */
//    @Test
//    public void testNumaBinSort() {
//        System.out.println("numaBinSort");
//        Numa nas = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaBinSort(nas, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetSortIndex method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetSortIndex() {
//        System.out.println("numaGetSortIndex");
//        Numa na = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaGetSortIndex(na, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetBinSortIndex method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetBinSortIndex() {
//        System.out.println("numaGetBinSortIndex");
//        Numa nas = null;
//        int sortorder = 0;

//        Numa expResult = null;
//        Numa result = instance.numaGetBinSortIndex(nas, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSortByIndex() {
//        System.out.println("numaSortByIndex");
//        Numa nas = null;
//        Numa naindex = null;

//        Numa expResult = null;
//        Numa result = instance.numaSortByIndex(nas, naindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaIsSorted method, of class Leptonica.
//     */
//    @Test
//    public void testNumaIsSorted() {
//        System.out.println("numaIsSorted");
//        Numa nas = null;
//        int sortorder = 0;
//        IntBuffer psorted = null;

//        int expResult = 0;
//        int result = instance.numaIsSorted(nas, sortorder, psorted);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSortPair method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSortPair() {
//        System.out.println("numaSortPair");
//        Numa nax = null;
//        Numa nay = null;
//        int sortorder = 0;
//        Numa.ByReference[] pnasx = null;
//        Numa.ByReference[] pnasy = null;

//        int expResult = 0;
//        int result = instance.numaSortPair(nax, nay, sortorder, pnasx, pnasy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaInvertMap method, of class Leptonica.
//     */
//    @Test
//    public void testNumaInvertMap() {
//        System.out.println("numaInvertMap");
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaInvertMap(nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaPseudorandomSequence method, of class Leptonica.
//     */
//    @Test
//    public void testNumaPseudorandomSequence() {
//        System.out.println("numaPseudorandomSequence");
//        int size = 0;
//        int seed = 0;

//        Numa expResult = null;
//        Numa result = instance.numaPseudorandomSequence(size, seed);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaRandomPermutation method, of class Leptonica.
//     */
//    @Test
//    public void testNumaRandomPermutation() {
//        System.out.println("numaRandomPermutation");
//        Numa nas = null;
//        int seed = 0;

//        Numa expResult = null;
//        Numa result = instance.numaRandomPermutation(nas, seed);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetRankValue method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetRankValue() {
//        System.out.println("numaGetRankValue");
//        Numa na = null;
//        float fract = 0.0F;
//        Numa nasort = null;
//        int usebins = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numaGetRankValue(na, fract, nasort, usebins, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetMedian method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetMedian() {
//        System.out.println("numaGetMedian");
//        Numa na = null;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numaGetMedian(na, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetBinnedMedian method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetBinnedMedian() {
//        System.out.println("numaGetBinnedMedian");
//        Numa na = null;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.numaGetBinnedMedian(na, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetMode method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetMode() {
//        System.out.println("numaGetMode");
//        Numa na = null;
//        FloatBuffer pval = null;
//        IntBuffer pcount = null;

//        int expResult = 0;
//        int result = instance.numaGetMode(na, pval, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetMedianVariation method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetMedianVariation() {
//        System.out.println("numaGetMedianVariation");
//        Numa na = null;
//        FloatBuffer pmedval = null;
//        FloatBuffer pmedvar = null;

//        int expResult = 0;
//        int result = instance.numaGetMedianVariation(na, pmedval, pmedvar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testNumaJoin() {
//        System.out.println("numaJoin");
//        Numa nad = null;
//        Numa nas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.numaJoin(nad, nas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaJoin() {
//        System.out.println("numaaJoin");
//        Numaa naad = null;
//        Numaa naas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.numaaJoin(naad, naas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaaFlattenToNuma method, of class Leptonica.
//     */
//    @Test
//    public void testNumaaFlattenToNuma() {
//        System.out.println("numaaFlattenToNuma");
//        Numaa naa = null;

//        Numa expResult = null;
//        Numa result = instance.numaaFlattenToNuma(naa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaErode method, of class Leptonica.
//     */
//    @Test
//    public void testNumaErode() {
//        System.out.println("numaErode");
//        Numa nas = null;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaErode(nas, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaDilate method, of class Leptonica.
//     */
//    @Test
//    public void testNumaDilate() {
//        System.out.println("numaDilate");
//        Numa nas = null;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaDilate(nas, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaOpen method, of class Leptonica.
//     */
//    @Test
//    public void testNumaOpen() {
//        System.out.println("numaOpen");
//        Numa nas = null;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaOpen(nas, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaClose method, of class Leptonica.
//     */
//    @Test
//    public void testNumaClose() {
//        System.out.println("numaClose");
//        Numa nas = null;
//        int size = 0;

//        Numa expResult = null;
//        Numa result = instance.numaClose(nas, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaTransform method, of class Leptonica.
//     */
//    @Test
//    public void testNumaTransform() {
//        System.out.println("numaTransform");
//        Numa nas = null;
//        float shift = 0.0F;
//        float scale = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaTransform(nas, shift, scale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWindowedStats method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWindowedStats() {
//        System.out.println("numaWindowedStats");
//        Numa nas = null;
//        int wc = 0;
//        Numa.ByReference[] pnam = null;
//        Numa.ByReference[] pnams = null;
//        Numa.ByReference[] pnav = null;
//        Numa.ByReference[] pnarv = null;

//        int expResult = 0;
//        int result = instance.numaWindowedStats(nas, wc, pnam, pnams, pnav, pnarv);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWindowedMean method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWindowedMean() {
//        System.out.println("numaWindowedMean");
//        Numa nas = null;
//        int wc = 0;

//        Numa expResult = null;
//        Numa result = instance.numaWindowedMean(nas, wc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWindowedMeanSquare method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWindowedMeanSquare() {
//        System.out.println("numaWindowedMeanSquare");
//        Numa nas = null;
//        int wc = 0;

//        Numa expResult = null;
//        Numa result = instance.numaWindowedMeanSquare(nas, wc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaWindowedVariance method, of class Leptonica.
//     */
//    @Test
//    public void testNumaWindowedVariance() {
//        System.out.println("numaWindowedVariance");
//        Numa nam = null;
//        Numa nams = null;
//        Numa.ByReference[] pnav = null;
//        Numa.ByReference[] pnarv = null;

//        int expResult = 0;
//        int result = instance.numaWindowedVariance(nam, nams, pnav, pnarv);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaConvertToInt method, of class Leptonica.
//     */
//    @Test
//    public void testNumaConvertToInt() {
//        System.out.println("numaConvertToInt");
//        Numa nas = null;

//        Numa expResult = null;
//        Numa result = instance.numaConvertToInt(nas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeHistogram() {
//        System.out.println("numaMakeHistogram");
//        Numa na = null;
//        int maxbins = 0;
//        IntBuffer pbinsize = null;
//        IntBuffer pbinstart = null;

//        Numa expResult = null;
//        Numa result = instance.numaMakeHistogram(na, maxbins, pbinsize, pbinstart);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeHistogramAuto method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeHistogramAuto() {
//        System.out.println("numaMakeHistogramAuto");
//        Numa na = null;
//        int maxbins = 0;

//        Numa expResult = null;
//        Numa result = instance.numaMakeHistogramAuto(na, maxbins);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeHistogramClipped method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeHistogramClipped() {
//        System.out.println("numaMakeHistogramClipped");
//        Numa na = null;
//        float binsize = 0.0F;
//        float maxsize = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaMakeHistogramClipped(na, binsize, maxsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaRebinHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaRebinHistogram() {
//        System.out.println("numaRebinHistogram");
//        Numa nas = null;
//        int newsize = 0;

//        Numa expResult = null;
//        Numa result = instance.numaRebinHistogram(nas, newsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaNormalizeHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaNormalizeHistogram() {
//        System.out.println("numaNormalizeHistogram");
//        Numa nas = null;
//        float tsum = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaNormalizeHistogram(nas, tsum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetStatsUsingHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetStatsUsingHistogram_10args_1() {
//        System.out.println("numaGetStatsUsingHistogram");
//        Numa na = null;
//        int maxbins = 0;
//        FloatBuffer pmin = null;
//        FloatBuffer pmax = null;
//        FloatBuffer pmean = null;
//        FloatBuffer pvariance = null;
//        FloatBuffer pmedian = null;
//        float rank = 0.0F;
//        FloatBuffer prval = null;
//        Numa.ByReference[] phisto = null;

//        int expResult = 0;
//        int result = instance.numaGetStatsUsingHistogram(na, maxbins, pmin, pmax, pmean, pvariance, pmedian, rank, prval, phisto);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetStatsUsingHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetStatsUsingHistogram_10args_2() {
//        System.out.println("numaGetStatsUsingHistogram");
//        Numa na = null;
//        int maxbins = 0;
//        FloatByReference pmin = null;
//        FloatByReference pmax = null;
//        FloatByReference pmean = null;
//        FloatByReference pvariance = null;
//        FloatByReference pmedian = null;
//        float rank = 0.0F;
//        FloatByReference prval = null;
//        Numa.ByReference[] phisto = null;

//        int expResult = 0;
//        int result = instance.numaGetStatsUsingHistogram(na, maxbins, pmin, pmax, pmean, pvariance, pmedian, rank, prval, phisto);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetHistogramStats method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetHistogramStats() {
//        System.out.println("numaGetHistogramStats");
//        Numa nahisto = null;
//        float startx = 0.0F;
//        float deltax = 0.0F;
//        FloatBuffer pxmean = null;
//        FloatBuffer pxmedian = null;
//        FloatBuffer pxmode = null;
//        FloatBuffer pxvariance = null;

//        int expResult = 0;
//        int result = instance.numaGetHistogramStats(nahisto, startx, deltax, pxmean, pxmedian, pxmode, pxvariance);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetHistogramStatsOnInterval method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetHistogramStatsOnInterval() {
//        System.out.println("numaGetHistogramStatsOnInterval");
//        Numa nahisto = null;
//        float startx = 0.0F;
//        float deltax = 0.0F;
//        int ifirst = 0;
//        int ilast = 0;
//        FloatBuffer pxmean = null;
//        FloatBuffer pxmedian = null;
//        FloatBuffer pxmode = null;
//        FloatBuffer pxvariance = null;

//        int expResult = 0;
//        int result = instance.numaGetHistogramStatsOnInterval(nahisto, startx, deltax, ifirst, ilast, pxmean, pxmedian, pxmode, pxvariance);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaMakeRankFromHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testNumaMakeRankFromHistogram() {
//        System.out.println("numaMakeRankFromHistogram");
//        float startx = 0.0F;
//        float deltax = 0.0F;
//        Numa nasy = null;
//        int npts = 0;
//        Numa.ByReference[] pnax = null;
//        Numa.ByReference[] pnay = null;

//        int expResult = 0;
//        int result = instance.numaMakeRankFromHistogram(startx, deltax, nasy, npts, pnax, pnay);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHistogramGetRankFromVal method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHistogramGetRankFromVal() {
//        System.out.println("numaHistogramGetRankFromVal");
//        Numa na = null;
//        float rval = 0.0F;
//        FloatBuffer prank = null;

//        int expResult = 0;
//        int result = instance.numaHistogramGetRankFromVal(na, rval, prank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaHistogramGetValFromRank method, of class Leptonica.
//     */
//    @Test
//    public void testNumaHistogramGetValFromRank() {
//        System.out.println("numaHistogramGetValFromRank");
//        Numa na = null;
//        float rank = 0.0F;
//        FloatBuffer prval = null;

//        int expResult = 0;
//        int result = instance.numaHistogramGetValFromRank(na, rank, prval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaDiscretizeRankAndIntensity method, of class Leptonica.
//     */
//    @Test
//    public void testNumaDiscretizeRankAndIntensity() {
//        System.out.println("numaDiscretizeRankAndIntensity");
//        Numa na = null;
//        int nbins = 0;
//        Numa.ByReference[] pnarbin = null;
//        Numa.ByReference[] pnam = null;
//        Numa.ByReference[] pnar = null;
//        Numa.ByReference[] pnabb = null;

//        int expResult = 0;
//        int result = instance.numaDiscretizeRankAndIntensity(na, nbins, pnarbin, pnam, pnar, pnabb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaGetRankBinValues method, of class Leptonica.
//     */
//    @Test
//    public void testNumaGetRankBinValues() {
//        System.out.println("numaGetRankBinValues");
//        Numa na = null;
//        int nbins = 0;
//        Numa.ByReference[] pnarbin = null;
//        Numa.ByReference[] pnam = null;

//        int expResult = 0;
//        int result = instance.numaGetRankBinValues(na, nbins, pnarbin, pnam);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSplitDistribution method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSplitDistribution_8args_1() {
//        System.out.println("numaSplitDistribution");
//        Numa na = null;
//        float scorefract = 0.0F;
//        IntBuffer psplitindex = null;
//        FloatBuffer pave1 = null;
//        FloatBuffer pave2 = null;
//        FloatBuffer pnum1 = null;
//        FloatBuffer pnum2 = null;
//        Numa.ByReference[] pnascore = null;

//        int expResult = 0;
//        int result = instance.numaSplitDistribution(na, scorefract, psplitindex, pave1, pave2, pnum1, pnum2, pnascore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSplitDistribution method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSplitDistribution_8args_2() {
//        System.out.println("numaSplitDistribution");
//        Numa na = null;
//        float scorefract = 0.0F;
//        IntByReference psplitindex = null;
//        FloatByReference pave1 = null;
//        FloatByReference pave2 = null;
//        FloatByReference pnum1 = null;
//        FloatByReference pnum2 = null;
//        Numa.ByReference[] pnascore = null;

//        int expResult = 0;
//        int result = instance.numaSplitDistribution(na, scorefract, psplitindex, pave1, pave2, pnum1, pnum2, pnascore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaEarthMoverDistance method, of class Leptonica.
//     */
//    @Test
//    public void testNumaEarthMoverDistance() {
//        System.out.println("numaEarthMoverDistance");
//        Numa na1 = null;
//        Numa na2 = null;
//        FloatBuffer pdist = null;

//        int expResult = 0;
//        int result = instance.numaEarthMoverDistance(na1, na2, pdist);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaFindPeaks method, of class Leptonica.
//     */
//    @Test
//    public void testNumaFindPeaks() {
//        System.out.println("numaFindPeaks");
//        Numa nas = null;
//        int nmax = 0;
//        float fract1 = 0.0F;
//        float fract2 = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaFindPeaks(nas, nmax, fract1, fract2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaFindExtrema method, of class Leptonica.
//     */
//    @Test
//    public void testNumaFindExtrema() {
//        System.out.println("numaFindExtrema");
//        Numa nas = null;
//        float delta = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaFindExtrema(nas, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCountReversals method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCountReversals() {
//        System.out.println("numaCountReversals");
//        Numa nas = null;
//        float minreversal = 0.0F;
//        IntBuffer pnr = null;
//        FloatBuffer pnrpl = null;

//        int expResult = 0;
//        int result = instance.numaCountReversals(nas, minreversal, pnr, pnrpl);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaSelectCrossingThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testNumaSelectCrossingThreshold() {
//        System.out.println("numaSelectCrossingThreshold");
//        Numa nax = null;
//        Numa nay = null;
//        float estthresh = 0.0F;
//        FloatBuffer pbestthresh = null;

//        int expResult = 0;
//        int result = instance.numaSelectCrossingThreshold(nax, nay, estthresh, pbestthresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCrossingsByThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCrossingsByThreshold() {
//        System.out.println("numaCrossingsByThreshold");
//        Numa nax = null;
//        Numa nay = null;
//        float thresh = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaCrossingsByThreshold(nax, nay, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaCrossingsByPeaks method, of class Leptonica.
//     */
//    @Test
//    public void testNumaCrossingsByPeaks() {
//        System.out.println("numaCrossingsByPeaks");
//        Numa nax = null;
//        Numa nay = null;
//        float delta = 0.0F;

//        Numa expResult = null;
//        Numa result = instance.numaCrossingsByPeaks(nax, nay, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaEvalBestHaarParameters method, of class Leptonica.
//     */
//    @Test
//    public void testNumaEvalBestHaarParameters() {
//        System.out.println("numaEvalBestHaarParameters");
//        Numa nas = null;
//        float relweight = 0.0F;
//        int nwidth = 0;
//        int nshift = 0;
//        float minwidth = 0.0F;
//        float maxwidth = 0.0F;
//        FloatBuffer pbestwidth = null;
//        FloatBuffer pbestshift = null;
//        FloatBuffer pbestscore = null;

//        int expResult = 0;
//        int result = instance.numaEvalBestHaarParameters(nas, relweight, nwidth, nshift, minwidth, maxwidth, pbestwidth, pbestshift, pbestscore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaEvalHaarSum method, of class Leptonica.
//     */
//    @Test
//    public void testNumaEvalHaarSum() {
//        System.out.println("numaEvalHaarSum");
//        Numa nas = null;
//        float width = 0.0F;
//        float shift = 0.0F;
//        float relweight = 0.0F;
//        FloatBuffer pscore = null;

//        int expResult = 0;
//        int result = instance.numaEvalHaarSum(nas, width, shift, relweight, pscore);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRegionsBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRegionsBinary() {
//        System.out.println("pixGetRegionsBinary");
//        Pix pixs = null;
//        Pix.ByReference[] ppixhm = null;
//        Pix.ByReference[] ppixtm = null;
//        Pix.ByReference[] ppixtb = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.pixGetRegionsBinary(pixs, ppixhm, ppixtm, ppixtb, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenHalftoneMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenHalftoneMask_4args_1() {
//        System.out.println("pixGenHalftoneMask");
//        Pix pixs = null;
//        Pix.ByReference[] ppixtext = null;
//        IntBuffer phtfound = null;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenHalftoneMask(pixs, ppixtext, phtfound, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenHalftoneMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenHalftoneMask_4args_2() {
//        System.out.println("pixGenHalftoneMask");
//        Pix pixs = null;
//        Pix.ByReference[] ppixtext = null;
//        IntByReference phtfound = null;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenHalftoneMask(pixs, ppixtext, phtfound, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenTextlineMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenTextlineMask_4args_1() {
//        System.out.println("pixGenTextlineMask");
//        Pix pixs = null;
//        Pix.ByReference[] ppixvws = null;
//        IntBuffer ptlfound = null;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenTextlineMask(pixs, ppixvws, ptlfound, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenTextlineMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenTextlineMask_4args_2() {
//        System.out.println("pixGenTextlineMask");
//        Pix pixs = null;
//        Pix.ByReference[] ppixvws = null;
//        IntByReference ptlfound = null;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenTextlineMask(pixs, ppixvws, ptlfound, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenTextblockMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenTextblockMask() {
//        System.out.println("pixGenTextblockMask");
//        Pix pixs = null;
//        Pix pixvws = null;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenTextblockMask(pixs, pixvws, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindPageForeground method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindPageForeground() {
//        System.out.println("pixFindPageForeground");
//        Pix pixs = null;
//        int threshold = 0;
//        int mindist = 0;
//        int erasedist = 0;
//        int pagenum = 0;
//        int showmorph = 0;
//        int display = 0;
//        String pdfdir = "";

//        Box expResult = null;
//        Box result = instance.pixFindPageForeground(pixs, threshold, mindist, erasedist, pagenum, showmorph, display, pdfdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSplitIntoCharacters method, of class Leptonica.
//     */
//    @Test
//    public void testPixSplitIntoCharacters() {
//        System.out.println("pixSplitIntoCharacters");
//        Pix pixs = null;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;
//        Pixa.ByReference[] ppixa = null;
//        Pix.ByReference[] ppixdebug = null;

//        int expResult = 0;
//        int result = instance.pixSplitIntoCharacters(pixs, minw, minh, pboxa, ppixa, ppixdebug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSplitComponentWithProfile method, of class Leptonica.
//     */
//    @Test
//    public void testPixSplitComponentWithProfile() {
//        System.out.println("pixSplitComponentWithProfile");
//        Pix pixs = null;
//        int delta = 0;
//        int mindel = 0;
//        Pix.ByReference[] ppixdebug = null;

//        Boxa expResult = null;
//        Boxa result = instance.pixSplitComponentWithProfile(pixs, delta, mindel, ppixdebug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetSelectCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetSelectCmap() {
//        System.out.println("pixSetSelectCmap");
//        Pix pixs = null;
//        Box box = null;
//        int sindex = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixSetSelectCmap(pixs, box, sindex, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorGrayRegionsCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorGrayRegionsCmap() {
//        System.out.println("pixColorGrayRegionsCmap");
//        Pix pixs = null;
//        Boxa boxa = null;
//        int type = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixColorGrayRegionsCmap(pixs, boxa, type, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorGrayCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorGrayCmap() {
//        System.out.println("pixColorGrayCmap");
//        Pix pixs = null;
//        Box box = null;
//        int type = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixColorGrayCmap(pixs, box, type, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of addColorizedGrayToCmap method, of class Leptonica.
//     */
//    @Test
//    public void testAddColorizedGrayToCmap() {
//        System.out.println("addColorizedGrayToCmap");
//        PixColormap cmap = null;
//        int type = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        Numa.ByReference[] pna = null;

//        int expResult = 0;
//        int result = instance.addColorizedGrayToCmap(cmap, type, rval, gval, bval, pna);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetSelectMaskedCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetSelectMaskedCmap() {
//        System.out.println("pixSetSelectMaskedCmap");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int sindex = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixSetSelectMaskedCmap(pixs, pixm, x, y, sindex, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetMaskedCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetMaskedCmap() {
//        System.out.println("pixSetMaskedCmap");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixSetMaskedCmap(pixs, pixm, x, y, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of parseForProtos method, of class Leptonica.
//     */
//    @Test
//    public void testParseForProtos() {
//        System.out.println("parseForProtos");
//        String filein = "";
//        String prestring = "";

//        Pointer expResult = null;
//        Pointer result = instance.parseForProtos(filein, prestring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaGetWhiteblocks method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaGetWhiteblocks() {
//        System.out.println("boxaGetWhiteblocks");
//        Boxa boxas = null;
//        Box box = null;
//        int sortflag = 0;
//        int maxboxes = 0;
//        float maxoverlap = 0.0F;
//        int maxperim = 0;
//        float fract = 0.0F;
//        int maxpops = 0;

//        Boxa expResult = null;
//        Boxa result = instance.boxaGetWhiteblocks(boxas, box, sortflag, maxboxes, maxoverlap, maxperim, fract, maxpops);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaPruneSortedOnOverlap method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaPruneSortedOnOverlap() {
//        System.out.println("boxaPruneSortedOnOverlap");
//        Boxa boxas = null;
//        float maxoverlap = 0.0F;

//        Boxa expResult = null;
//        Boxa result = instance.boxaPruneSortedOnOverlap(boxas, maxoverlap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFilesToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFilesToPdf() {
//        System.out.println("convertFilesToPdf");
//        String dirname = "";
//        String substr = "";
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertFilesToPdf(dirname, substr, res, scalefactor, type, quality, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConvertFilesToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testSaConvertFilesToPdf() {
//        System.out.println("saConvertFilesToPdf");
//        Sarray sa = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.saConvertFilesToPdf(sa, res, scalefactor, type, quality, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConvertFilesToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testSaConvertFilesToPdfData() {
//        System.out.println("saConvertFilesToPdfData");
//        Sarray sa = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.saConvertFilesToPdfData(sa, res, scalefactor, type, quality, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selectDefaultPdfEncoding method, of class Leptonica.
//     */
//    @Test
//    public void testSelectDefaultPdfEncoding() {
//        System.out.println("selectDefaultPdfEncoding");
//        Pix pix = null;
//        IntBuffer ptype = null;

//        int expResult = 0;
//        int result = instance.selectDefaultPdfEncoding(pix, ptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertUnscaledFilesToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertUnscaledFilesToPdf() {
//        System.out.println("convertUnscaledFilesToPdf");
//        String dirname = "";
//        String substr = "";
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertUnscaledFilesToPdf(dirname, substr, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConvertUnscaledFilesToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testSaConvertUnscaledFilesToPdf() {
//        System.out.println("saConvertUnscaledFilesToPdf");
//        Sarray sa = null;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.saConvertUnscaledFilesToPdf(sa, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConvertUnscaledFilesToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testSaConvertUnscaledFilesToPdfData() {
//        System.out.println("saConvertUnscaledFilesToPdfData");
//        Sarray sa = null;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.saConvertUnscaledFilesToPdfData(sa, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertUnscaledToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testConvertUnscaledToPdfData() {
//        System.out.println("convertUnscaledToPdfData");
//        String fname = "";
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.convertUnscaledToPdfData(fname, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertToPdf() {
//        System.out.println("pixaConvertToPdf");
//        Pixa pixa = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixaConvertToPdf(pixa, res, scalefactor, type, quality, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertToPdfData() {
//        System.out.println("pixaConvertToPdfData");
//        Pixa pixa = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.pixaConvertToPdfData(pixa, res, scalefactor, type, quality, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdf_10args_1() {
//        System.out.println("convertToPdf");
//        String filein = "";
//        int type = 0;
//        int quality = 0;
//        String fileout = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertToPdf(filein, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdf_10args_2() {
//        System.out.println("convertToPdf");
//        Pointer filein = null;
//        int type = 0;
//        int quality = 0;
//        Pointer fileout = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertToPdf(filein, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertImageDataToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertImageDataToPdf_11args_1() {
//        System.out.println("convertImageDataToPdf");
//        ByteBuffer imdata = null;
//        NativeSize size = null;
//        int type = 0;
//        int quality = 0;
//        String fileout = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertImageDataToPdf(imdata, size, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertImageDataToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertImageDataToPdf_11args_2() {
//        System.out.println("convertImageDataToPdf");
//        Pointer imdata = null;
//        NativeSize size = null;
//        int type = 0;
//        int quality = 0;
//        Pointer fileout = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertImageDataToPdf(imdata, size, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdfData_11args_1() {
//        System.out.println("convertToPdfData");
//        String filein = "";
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertToPdfData(filein, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdfData_11args_2() {
//        System.out.println("convertToPdfData");
//        Pointer filein = null;
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertToPdfData(filein, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertImageDataToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testConvertImageDataToPdfData_12args_1() {
//        System.out.println("convertImageDataToPdfData");
//        ByteBuffer imdata = null;
//        NativeSize size = null;
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertImageDataToPdfData(imdata, size, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertImageDataToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testConvertImageDataToPdfData_12args_2() {
//        System.out.println("convertImageDataToPdfData");
//        Pointer imdata = null;
//        NativeSize size = null;
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.convertImageDataToPdfData(imdata, size, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdf_10args_1() {
//        System.out.println("pixConvertToPdf");
//        Pix pix = null;
//        int type = 0;
//        int quality = 0;
//        String fileout = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.pixConvertToPdf(pix, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdf_10args_2() {
//        System.out.println("pixConvertToPdf");
//        Pix pix = null;
//        int type = 0;
//        int quality = 0;
//        Pointer fileout = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.pixConvertToPdf(pix, type, quality, fileout, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamPdf_4args_1() {
//        System.out.println("pixWriteStreamPdf");
//        PointerByReference fp = null;
//        Pix pix = null;
//        int res = 0;
//        String title = "";

//        int expResult = 0;
//        int result = instance.pixWriteStreamPdf(fp, pix, res, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamPdf_4args_2() {
//        System.out.println("pixWriteStreamPdf");
//        PointerByReference fp = null;
//        Pix pix = null;
//        int res = 0;
//        Pointer title = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamPdf(fp, pix, res, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemPdf() {
//        System.out.println("pixWriteMemPdf");
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        Pix pix = null;
//        int res = 0;
//        String title = "";

//        int expResult = 0;
//        int result = instance.pixWriteMemPdf(pdata, pnbytes, pix, res, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertSegmentedFilesToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testConvertSegmentedFilesToPdf() {
//        System.out.println("convertSegmentedFilesToPdf");
//        String dirname = "";
//        String substr = "";
//        int res = 0;
//        int type = 0;
//        int thresh = 0;
//        Boxaa baa = null;
//        int quality = 0;
//        float scalefactor = 0.0F;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertSegmentedFilesToPdf(dirname, substr, res, type, thresh, baa, quality, scalefactor, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertNumberedMasksToBoxaa method, of class Leptonica.
//     */
//    @Test
//    public void testConvertNumberedMasksToBoxaa() {
//        System.out.println("convertNumberedMasksToBoxaa");
//        String dirname = "";
//        String substr = "";
//        int numpre = 0;
//        int numpost = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.convertNumberedMasksToBoxaa(dirname, substr, numpre, numpost);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdfSegmented method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdfSegmented() {
//        System.out.println("convertToPdfSegmented");
//        String filein = "";
//        int res = 0;
//        int type = 0;
//        int thresh = 0;
//        Boxa boxa = null;
//        int quality = 0;
//        float scalefactor = 0.0F;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertToPdfSegmented(filein, res, type, thresh, boxa, quality, scalefactor, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdfSegmented method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdfSegmented() {
//        System.out.println("pixConvertToPdfSegmented");
//        Pix pixs = null;
//        int res = 0;
//        int type = 0;
//        int thresh = 0;
//        Boxa boxa = null;
//        int quality = 0;
//        float scalefactor = 0.0F;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixConvertToPdfSegmented(pixs, res, type, thresh, boxa, quality, scalefactor, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPdfDataSegmented method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPdfDataSegmented() {
//        System.out.println("convertToPdfDataSegmented");
//        String filein = "";
//        int res = 0;
//        int type = 0;
//        int thresh = 0;
//        Boxa boxa = null;
//        int quality = 0;
//        float scalefactor = 0.0F;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.convertToPdfDataSegmented(filein, res, type, thresh, boxa, quality, scalefactor, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdfDataSegmented method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdfDataSegmented() {
//        System.out.println("pixConvertToPdfDataSegmented");
//        Pix pixs = null;
//        int res = 0;
//        int type = 0;
//        int thresh = 0;
//        Boxa boxa = null;
//        int quality = 0;
//        float scalefactor = 0.0F;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.pixConvertToPdfDataSegmented(pixs, res, type, thresh, boxa, quality, scalefactor, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of concatenatePdf method, of class Leptonica.
//     */
//    @Test
//    public void testConcatenatePdf() {
//        System.out.println("concatenatePdf");
//        String dirname = "";
//        String substr = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.concatenatePdf(dirname, substr, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConcatenatePdf method, of class Leptonica.
//     */
//    @Test
//    public void testSaConcatenatePdf() {
//        System.out.println("saConcatenatePdf");
//        Sarray sa = null;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.saConcatenatePdf(sa, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraConcatenatePdf method, of class Leptonica.
//     */
//    @Test
//    public void testPtraConcatenatePdf() {
//        System.out.println("ptraConcatenatePdf");
//        L_Ptra pa = null;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.ptraConcatenatePdf(pa, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of concatenatePdfToData method, of class Leptonica.
//     */
//    @Test
//    public void testConcatenatePdfToData() {
//        System.out.println("concatenatePdfToData");
//        String dirname = "";
//        String substr = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.concatenatePdfToData(dirname, substr, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of saConcatenatePdfToData method, of class Leptonica.
//     */
//    @Test
//    public void testSaConcatenatePdfToData() {
//        System.out.println("saConcatenatePdfToData");
//        Sarray sa = null;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.saConcatenatePdfToData(sa, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdfData_11args_1() {
//        System.out.println("pixConvertToPdfData");
//        Pix pix = null;
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        String title = "";
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.pixConvertToPdfData(pix, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToPdfData_11args_2() {
//        System.out.println("pixConvertToPdfData");
//        Pix pix = null;
//        int type = 0;
//        int quality = 0;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        Pointer title = null;
//        L_Pdf_Data.ByReference[] plpd = null;
//        int position = 0;

//        int expResult = 0;
//        int result = instance.pixConvertToPdfData(pix, type, quality, pdata, pnbytes, x, y, res, title, plpd, position);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraConcatenatePdfToData method, of class Leptonica.
//     */
//    @Test
//    public void testPtraConcatenatePdfToData() {
//        System.out.println("ptraConcatenatePdfToData");
//        L_Ptra pa_data = null;
//        Sarray sa = null;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.ptraConcatenatePdfToData(pa_data, sa, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateCIDataForPdf method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateCIDataForPdf_4args_1() {
//        System.out.println("l_generateCIDataForPdf");
//        String fname = "";
//        Pix pix = null;
//        int quality = 0;
//        L_Compressed_Data.ByReference[] pcid = null;

//        int expResult = 0;
//        int result = instance.l_generateCIDataForPdf(fname, pix, quality, pcid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateCIDataForPdf method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateCIDataForPdf_4args_2() {
//        System.out.println("l_generateCIDataForPdf");
//        Pointer fname = null;
//        Pix pix = null;
//        int quality = 0;
//        L_Compressed_Data.ByReference[] pcid = null;

//        int expResult = 0;
//        int result = instance.l_generateCIDataForPdf(fname, pix, quality, pcid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateFlateDataPdf method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateFlateDataPdf() {
//        System.out.println("l_generateFlateDataPdf");
//        String fname = "";

//        L_Compressed_Data expResult = null;
//        L_Compressed_Data result = instance.l_generateFlateDataPdf(fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateJpegData method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateJpegData() {
//        System.out.println("l_generateJpegData");
//        String fname = "";
//        int ascii85flag = 0;

//        L_Compressed_Data expResult = null;
//        L_Compressed_Data result = instance.l_generateJpegData(fname, ascii85flag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateCIData method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateCIData_5args_1() {
//        System.out.println("l_generateCIData");
//        String fname = "";
//        int type = 0;
//        int quality = 0;
//        int ascii85 = 0;
//        L_Compressed_Data.ByReference[] pcid = null;

//        int expResult = 0;
//        int result = instance.l_generateCIData(fname, type, quality, ascii85, pcid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateCIData method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateCIData_5args_2() {
//        System.out.println("l_generateCIData");
//        Pointer fname = null;
//        int type = 0;
//        int quality = 0;
//        int ascii85 = 0;
//        L_Compressed_Data.ByReference[] pcid = null;

//        int expResult = 0;
//        int result = instance.l_generateCIData(fname, type, quality, ascii85, pcid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateCIData method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateCIData() {
//        System.out.println("pixGenerateCIData");
//        Pix pixs = null;
//        int type = 0;
//        int quality = 0;
//        int ascii85 = 0;
//        L_Compressed_Data.ByReference[] pcid = null;

//        int expResult = 0;
//        int result = instance.pixGenerateCIData(pixs, type, quality, ascii85, pcid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateFlateData method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateFlateData() {
//        System.out.println("l_generateFlateData");
//        String fname = "";
//        int ascii85flag = 0;

//        L_Compressed_Data expResult = null;
//        L_Compressed_Data result = instance.l_generateFlateData(fname, ascii85flag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_generateG4Data method, of class Leptonica.
//     */
//    @Test
//    public void testL_generateG4Data() {
//        System.out.println("l_generateG4Data");
//        String fname = "";
//        int ascii85flag = 0;

//        L_Compressed_Data expResult = null;
//        L_Compressed_Data result = instance.l_generateG4Data(fname, ascii85flag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of cidConvertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testCidConvertToPdfData() {
//        System.out.println("cidConvertToPdfData");
//        L_Compressed_Data cid = null;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.cidConvertToPdfData(cid, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_CIDataDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testL_CIDataDestroy() {
//        System.out.println("l_CIDataDestroy");
//        L_Compressed_Data.ByReference[] pcid = null;

//        instance.l_CIDataDestroy(pcid);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_pdfSetG4ImageMask method, of class Leptonica.
//     */
//    @Test
//    public void testL_pdfSetG4ImageMask() {
//        System.out.println("l_pdfSetG4ImageMask");
//        int flag = 0;

//        instance.l_pdfSetG4ImageMask(flag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_pdfSetDateAndVersion method, of class Leptonica.
//     */
//    @Test
//    public void testL_pdfSetDateAndVersion() {
//        System.out.println("l_pdfSetDateAndVersion");
//        int flag = 0;

//        instance.l_pdfSetDateAndVersion(flag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of setPixMemoryManager method, of class Leptonica.
//     */
//    @Test
//    public void testSetPixMemoryManager() {
//        System.out.println("setPixMemoryManager");
//        Leptonica.setPixMemoryManager_allocator_callback allocator = null;
//        Leptonica.setPixMemoryManager_deallocator_callback deallocator = null;

//        instance.setPixMemoryManager(allocator, deallocator);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreate() {
//        System.out.println("pixCreate");
//        int width = 0;
//        int height = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCreate(width, height, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateNoInit method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateNoInit() {
//        System.out.println("pixCreateNoInit");
//        int width = 0;
//        int height = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCreateNoInit(width, height, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateTemplate method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateTemplate() {
//        System.out.println("pixCreateTemplate");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixCreateTemplate(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateTemplateNoInit method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateTemplateNoInit() {
//        System.out.println("pixCreateTemplateNoInit");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixCreateTemplateNoInit(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateHeader method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateHeader() {
//        System.out.println("pixCreateHeader");
//        int width = 0;
//        int height = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCreateHeader(width, height, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClone method, of class Leptonica.
//     */
//    @Test
//    public void testPixClone() {
//        System.out.println("pixClone");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixClone(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixDestroy() {
//        System.out.println("pixDestroy");
//        Pix.ByReference[] ppix = null;

//        instance.pixDestroy(ppix);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopy method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopy() {
//        System.out.println("pixCopy");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixCopy(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixResizeImageData method, of class Leptonica.
//     */
//    @Test
//    public void testPixResizeImageData() {
//        System.out.println("pixResizeImageData");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixResizeImageData(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyColormap() {
//        System.out.println("pixCopyColormap");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopyColormap(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSizesEqual method, of class Leptonica.
//     */
//    @Test
//    public void testPixSizesEqual() {
//        System.out.println("pixSizesEqual");
//        Pix pix1 = null;
//        Pix pix2 = null;

//        int expResult = 0;
//        int result = instance.pixSizesEqual(pix1, pix2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTransferAllData method, of class Leptonica.
//     */
//    @Test
//    public void testPixTransferAllData() {
//        System.out.println("pixTransferAllData");
//        Pix pixd = null;
//        Pix.ByReference[] ppixs = null;
//        int copytext = 0;
//        int copyformat = 0;

//        int expResult = 0;
//        int result = instance.pixTransferAllData(pixd, ppixs, copytext, copyformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSwapAndDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixSwapAndDestroy() {
//        System.out.println("pixSwapAndDestroy");
//        Pix.ByReference[] ppixd = null;
//        Pix.ByReference[] ppixs = null;

//        int expResult = 0;
//        int result = instance.pixSwapAndDestroy(ppixd, ppixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetWidth method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetWidth() {
//        System.out.println("pixGetWidth");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetWidth(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetWidth method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetWidth() {
//        System.out.println("pixSetWidth");
//        Pix pix = null;
//        int width = 0;

//        int expResult = 0;
//        int result = instance.pixSetWidth(pix, width);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetHeight method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetHeight() {
//        System.out.println("pixGetHeight");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetHeight(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetHeight method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetHeight() {
//        System.out.println("pixSetHeight");
//        Pix pix = null;
//        int height = 0;

//        int expResult = 0;
//        int result = instance.pixSetHeight(pix, height);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetDepth() {
//        System.out.println("pixGetDepth");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetDepth(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetDepth() {
//        System.out.println("pixSetDepth");
//        Pix pix = null;
//        int depth = 0;

//        int expResult = 0;
//        int result = instance.pixSetDepth(pix, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetDimensions() {
//        System.out.println("pixGetDimensions");
//        Pix pix = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;

//        int expResult = 0;
//        int result = instance.pixGetDimensions(pix, pw, ph, pd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetDimensions() {
//        System.out.println("pixSetDimensions");
//        Pix pix = null;
//        int w = 0;
//        int h = 0;
//        int d = 0;

//        int expResult = 0;
//        int result = instance.pixSetDimensions(pix, w, h, d);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyDimensions() {
//        System.out.println("pixCopyDimensions");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopyDimensions(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetSpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetSpp() {
//        System.out.println("pixGetSpp");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetSpp(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetSpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetSpp() {
//        System.out.println("pixSetSpp");
//        Pix pix = null;
//        int spp = 0;

//        int expResult = 0;
//        int result = instance.pixSetSpp(pix, spp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopySpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopySpp() {
//        System.out.println("pixCopySpp");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopySpp(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetWpl() {
//        System.out.println("pixGetWpl");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetWpl(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetWpl method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetWpl() {
//        System.out.println("pixSetWpl");
//        Pix pix = null;
//        int wpl = 0;

//        int expResult = 0;
//        int result = instance.pixSetWpl(pix, wpl);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRefcount() {
//        System.out.println("pixGetRefcount");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetRefcount(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testPixChangeRefcount() {
//        System.out.println("pixChangeRefcount");
//        Pix pix = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.pixChangeRefcount(pix, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetXRes method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetXRes() {
//        System.out.println("pixGetXRes");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetXRes(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetXRes method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetXRes() {
//        System.out.println("pixSetXRes");
//        Pix pix = null;
//        int res = 0;

//        int expResult = 0;
//        int result = instance.pixSetXRes(pix, res);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetYRes method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetYRes() {
//        System.out.println("pixGetYRes");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetYRes(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetYRes method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetYRes() {
//        System.out.println("pixSetYRes");
//        Pix pix = null;
//        int res = 0;

//        int expResult = 0;
//        int result = instance.pixSetYRes(pix, res);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetResolution() {
//        System.out.println("pixGetResolution");
//        Pix pix = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.pixGetResolution(pix, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetResolution method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetResolution() {
//        System.out.println("pixSetResolution");
//        Pix pix = null;
//        int xres = 0;
//        int yres = 0;

//        int expResult = 0;
//        int result = instance.pixSetResolution(pix, xres, yres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyResolution method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyResolution() {
//        System.out.println("pixCopyResolution");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopyResolution(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleResolution method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleResolution() {
//        System.out.println("pixScaleResolution");
//        Pix pix = null;
//        float xscale = 0.0F;
//        float yscale = 0.0F;

//        int expResult = 0;
//        int result = instance.pixScaleResolution(pix, xscale, yscale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetInputFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetInputFormat() {
//        System.out.println("pixGetInputFormat");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixGetInputFormat(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetInputFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetInputFormat() {
//        System.out.println("pixSetInputFormat");
//        Pix pix = null;
//        int informat = 0;

//        int expResult = 0;
//        int result = instance.pixSetInputFormat(pix, informat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyInputFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyInputFormat() {
//        System.out.println("pixCopyInputFormat");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopyInputFormat(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetText method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetText() {
//        System.out.println("pixGetText");
//        Pix pix = null;

//        Pointer expResult = null;
//        Pointer result = instance.pixGetText(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetText method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetText() {
//        System.out.println("pixSetText");
//        Pix pix = null;
//        String textstring = "";

//        int expResult = 0;
//        int result = instance.pixSetText(pix, textstring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddText method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddText() {
//        System.out.println("pixAddText");
//        Pix pix = null;
//        String textstring = "";

//        int expResult = 0;
//        int result = instance.pixAddText(pix, textstring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyText method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyText() {
//        System.out.println("pixCopyText");
//        Pix pixd = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixCopyText(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetColormap() {
//        System.out.println("pixGetColormap");
//        Pix pix = null;

//        PixColormap expResult = null;
//        PixColormap result = instance.pixGetColormap(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetColormap() {
//        System.out.println("pixSetColormap");
//        Pix pix = null;
//        PixColormap colormap = null;

//        int expResult = 0;
//        int result = instance.pixSetColormap(pix, colormap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDestroyColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixDestroyColormap() {
//        System.out.println("pixDestroyColormap");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixDestroyColormap(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetData method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetData() {
//        System.out.println("pixGetData");
//        Pix pix = null;

//        IntByReference expResult = null;
//        IntByReference result = instance.pixGetData(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetData method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetData() {
//        System.out.println("pixSetData");
//        Pix pix = null;
//        IntBuffer data = null;

//        int expResult = 0;
//        int result = instance.pixSetData(pix, data);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractData method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractData() {
//        System.out.println("pixExtractData");
//        Pix pixs = null;

//        IntByReference expResult = null;
//        IntByReference result = instance.pixExtractData(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFreeData method, of class Leptonica.
//     */
//    @Test
//    public void testPixFreeData() {
//        System.out.println("pixFreeData");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixFreeData(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetLinePtrs method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetLinePtrs() {
//        System.out.println("pixGetLinePtrs");
//        Pix pix = null;
//        IntBuffer psize = null;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.pixGetLinePtrs(pix, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPrintStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixPrintStreamInfo_3args_1() {
//        System.out.println("pixPrintStreamInfo");
//        PointerByReference fp = null;
//        Pix pix = null;
//        String text = "";

//        int expResult = 0;
//        int result = instance.pixPrintStreamInfo(fp, pix, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPrintStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixPrintStreamInfo_3args_2() {
//        System.out.println("pixPrintStreamInfo");
//        PointerByReference fp = null;
//        Pix pix = null;
//        Pointer text = null;

//        int expResult = 0;
//        int result = instance.pixPrintStreamInfo(fp, pix, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetPixel() {
//        System.out.println("pixGetPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.pixGetPixel(pix, x, y, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetPixel() {
//        System.out.println("pixSetPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetPixel(pix, x, y, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRGBPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRGBPixel() {
//        System.out.println("pixGetRGBPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.pixGetRGBPixel(pix, x, y, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetRGBPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetRGBPixel() {
//        System.out.println("pixSetRGBPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;

//        int expResult = 0;
//        int result = instance.pixSetRGBPixel(pix, x, y, rval, gval, bval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRandomPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRandomPixel() {
//        System.out.println("pixGetRandomPixel");
//        Pix pix = null;
//        IntBuffer pval = null;
//        IntBuffer px = null;
//        IntBuffer py = null;

//        int expResult = 0;
//        int result = instance.pixGetRandomPixel(pix, pval, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClearPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixClearPixel() {
//        System.out.println("pixClearPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixClearPixel(pix, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFlipPixel method, of class Leptonica.
//     */
//    @Test
//    public void testPixFlipPixel() {
//        System.out.println("pixFlipPixel");
//        Pix pix = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixFlipPixel(pix, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of setPixelLow method, of class Leptonica.
//     */
//    @Test
//    public void testSetPixelLow() {
//        System.out.println("setPixelLow");
//        IntBuffer line = null;
//        int x = 0;
//        int depth = 0;
//        int val = 0;

//        instance.setPixelLow(line, x, depth, val);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBlackOrWhiteVal method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBlackOrWhiteVal() {
//        System.out.println("pixGetBlackOrWhiteVal");
//        Pix pixs = null;
//        int op = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.pixGetBlackOrWhiteVal(pixs, op, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClearAll method, of class Leptonica.
//     */
//    @Test
//    public void testPixClearAll() {
//        System.out.println("pixClearAll");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixClearAll(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetAll method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetAll() {
//        System.out.println("pixSetAll");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixSetAll(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetAllGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetAllGray() {
//        System.out.println("pixSetAllGray");
//        Pix pix = null;
//        int grayval = 0;

//        int expResult = 0;
//        int result = instance.pixSetAllGray(pix, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetAllArbitrary method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetAllArbitrary() {
//        System.out.println("pixSetAllArbitrary");
//        Pix pix = null;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetAllArbitrary(pix, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetBlackOrWhite method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetBlackOrWhite() {
//        System.out.println("pixSetBlackOrWhite");
//        Pix pixs = null;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixSetBlackOrWhite(pixs, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetComponentArbitrary method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetComponentArbitrary() {
//        System.out.println("pixSetComponentArbitrary");
//        Pix pix = null;
//        int comp = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetComponentArbitrary(pix, comp, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClearInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixClearInRect() {
//        System.out.println("pixClearInRect");
//        Pix pix = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixClearInRect(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetInRect() {
//        System.out.println("pixSetInRect");
//        Pix pix = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixSetInRect(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetInRectArbitrary method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetInRectArbitrary() {
//        System.out.println("pixSetInRectArbitrary");
//        Pix pix = null;
//        Box box = null;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetInRectArbitrary(pix, box, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixBlendInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixBlendInRect() {
//        System.out.println("pixBlendInRect");
//        Pix pixs = null;
//        Box box = null;
//        int val = 0;
//        float fract = 0.0F;

//        int expResult = 0;
//        int result = instance.pixBlendInRect(pixs, box, val, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetPadBits method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetPadBits() {
//        System.out.println("pixSetPadBits");
//        Pix pix = null;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetPadBits(pix, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetPadBitsBand method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetPadBitsBand() {
//        System.out.println("pixSetPadBitsBand");
//        Pix pix = null;
//        int by = 0;
//        int bh = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetPadBitsBand(pix, by, bh, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetOrClearBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetOrClearBorder() {
//        System.out.println("pixSetOrClearBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixSetOrClearBorder(pixs, left, right, top, bot, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetBorderVal method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetBorderVal() {
//        System.out.println("pixSetBorderVal");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetBorderVal(pixs, left, right, top, bot, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetBorderRingVal method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetBorderRingVal() {
//        System.out.println("pixSetBorderRingVal");
//        Pix pixs = null;
//        int dist = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetBorderRingVal(pixs, dist, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetMirroredBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetMirroredBorder() {
//        System.out.println("pixSetMirroredBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        int expResult = 0;
//        int result = instance.pixSetMirroredBorder(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyBorder() {
//        System.out.println("pixCopyBorder");
//        Pix pixd = null;
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCopyBorder(pixd, pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddBorder() {
//        System.out.println("pixAddBorder");
//        Pix pixs = null;
//        int npix = 0;
//        int val = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddBorder(pixs, npix, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddBlackOrWhiteBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddBlackOrWhiteBorder() {
//        System.out.println("pixAddBlackOrWhiteBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;
//        int op = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddBlackOrWhiteBorder(pixs, left, right, top, bot, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddBorderGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddBorderGeneral() {
//        System.out.println("pixAddBorderGeneral");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;
//        int val = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddBorderGeneral(pixs, left, right, top, bot, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveBorder() {
//        System.out.println("pixRemoveBorder");
//        Pix pixs = null;
//        int npix = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveBorder(pixs, npix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveBorderGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveBorderGeneral() {
//        System.out.println("pixRemoveBorderGeneral");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveBorderGeneral(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveBorderToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveBorderToSize() {
//        System.out.println("pixRemoveBorderToSize");
//        Pix pixs = null;
//        int wd = 0;
//        int hd = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveBorderToSize(pixs, wd, hd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddMirroredBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddMirroredBorder() {
//        System.out.println("pixAddMirroredBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddMirroredBorder(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddRepeatedBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddRepeatedBorder() {
//        System.out.println("pixAddRepeatedBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddRepeatedBorder(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddMixedBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddMixedBorder() {
//        System.out.println("pixAddMixedBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddMixedBorder(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddContinuedBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddContinuedBorder() {
//        System.out.println("pixAddContinuedBorder");
//        Pix pixs = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddContinuedBorder(pixs, left, right, top, bot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixShiftAndTransferAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixShiftAndTransferAlpha() {
//        System.out.println("pixShiftAndTransferAlpha");
//        Pix pixd = null;
//        Pix pixs = null;
//        float shiftx = 0.0F;
//        float shifty = 0.0F;

//        int expResult = 0;
//        int result = instance.pixShiftAndTransferAlpha(pixd, pixs, shiftx, shifty);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayLayersRGBA method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayLayersRGBA() {
//        System.out.println("pixDisplayLayersRGBA");
//        Pix pixs = null;
//        int val = 0;
//        int maxw = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayLayersRGBA(pixs, val, maxw);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateRGBImage method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateRGBImage() {
//        System.out.println("pixCreateRGBImage");
//        Pix pixr = null;
//        Pix pixg = null;
//        Pix pixb = null;

//        Pix expResult = null;
//        Pix result = instance.pixCreateRGBImage(pixr, pixg, pixb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRGBComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRGBComponent() {
//        System.out.println("pixGetRGBComponent");
//        Pix pixs = null;
//        int comp = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGetRGBComponent(pixs, comp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetRGBComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetRGBComponent() {
//        System.out.println("pixSetRGBComponent");
//        Pix pixd = null;
//        Pix pixs = null;
//        int comp = 0;

//        int expResult = 0;
//        int result = instance.pixSetRGBComponent(pixd, pixs, comp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRGBComponentCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRGBComponentCmap() {
//        System.out.println("pixGetRGBComponentCmap");
//        Pix pixs = null;
//        int comp = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGetRGBComponentCmap(pixs, comp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCopyRGBComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixCopyRGBComponent() {
//        System.out.println("pixCopyRGBComponent");
//        Pix pixd = null;
//        Pix pixs = null;
//        int comp = 0;

//        int expResult = 0;
//        int result = instance.pixCopyRGBComponent(pixd, pixs, comp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of composeRGBPixel method, of class Leptonica.
//     */
//    @Test
//    public void testComposeRGBPixel() {
//        System.out.println("composeRGBPixel");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        IntBuffer ppixel = null;

//        int expResult = 0;
//        int result = instance.composeRGBPixel(rval, gval, bval, ppixel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of composeRGBAPixel method, of class Leptonica.
//     */
//    @Test
//    public void testComposeRGBAPixel() {
//        System.out.println("composeRGBAPixel");
//        int rval = 0;
//        int gval = 0;
//        int bval = 0;
//        int aval = 0;
//        IntBuffer ppixel = null;

//        int expResult = 0;
//        int result = instance.composeRGBAPixel(rval, gval, bval, aval, ppixel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of extractRGBValues method, of class Leptonica.
//     */
//    @Test
//    public void testExtractRGBValues() {
//        System.out.println("extractRGBValues");
//        int pixel = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;

//        instance.extractRGBValues(pixel, prval, pgval, pbval);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of extractRGBAValues method, of class Leptonica.
//     */
//    @Test
//    public void testExtractRGBAValues() {
//        System.out.println("extractRGBAValues");
//        int pixel = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;
//        IntBuffer paval = null;

//        instance.extractRGBAValues(pixel, prval, pgval, pbval, paval);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of extractMinMaxComponent method, of class Leptonica.
//     */
//    @Test
//    public void testExtractMinMaxComponent() {
//        System.out.println("extractMinMaxComponent");
//        int pixel = 0;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.extractMinMaxComponent(pixel, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRGBLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRGBLine() {
//        System.out.println("pixGetRGBLine");
//        Pix pixs = null;
//        int row = 0;
//        ByteBuffer bufr = null;
//        ByteBuffer bufg = null;
//        ByteBuffer bufb = null;

//        int expResult = 0;
//        int result = instance.pixGetRGBLine(pixs, row, bufr, bufg, bufb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEndianByteSwapNew method, of class Leptonica.
//     */
//    @Test
//    public void testPixEndianByteSwapNew() {
//        System.out.println("pixEndianByteSwapNew");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixEndianByteSwapNew(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEndianByteSwap method, of class Leptonica.
//     */
//    @Test
//    public void testPixEndianByteSwap() {
//        System.out.println("pixEndianByteSwap");
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixEndianByteSwap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lineEndianByteSwap method, of class Leptonica.
//     */
//    @Test
//    public void testLineEndianByteSwap() {
//        System.out.println("lineEndianByteSwap");
//        IntBuffer datad = null;
//        IntBuffer datas = null;
//        int wpl = 0;

//        int expResult = 0;
//        int result = instance.lineEndianByteSwap(datad, datas, wpl);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEndianTwoByteSwapNew method, of class Leptonica.
//     */
//    @Test
//    public void testPixEndianTwoByteSwapNew() {
//        System.out.println("pixEndianTwoByteSwapNew");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixEndianTwoByteSwapNew(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEndianTwoByteSwap method, of class Leptonica.
//     */
//    @Test
//    public void testPixEndianTwoByteSwap() {
//        System.out.println("pixEndianTwoByteSwap");
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixEndianTwoByteSwap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRasterData method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRasterData() {
//        System.out.println("pixGetRasterData");
//        Pix pixs = null;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.pixGetRasterData(pixs, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAlphaIsOpaque method, of class Leptonica.
//     */
//    @Test
//    public void testPixAlphaIsOpaque() {
//        System.out.println("pixAlphaIsOpaque");
//        Pix pix = null;
//        IntBuffer popaque = null;

//        int expResult = 0;
//        int result = instance.pixAlphaIsOpaque(pix, popaque);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetupByteProcessing method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetupByteProcessing() {
//        System.out.println("pixSetupByteProcessing");
//        Pix pix = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.pixSetupByteProcessing(pix, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCleanupByteProcessing method, of class Leptonica.
//     */
//    @Test
//    public void testPixCleanupByteProcessing() {
//        System.out.println("pixCleanupByteProcessing");
//        Pix pix = null;
//        PointerByReference lineptrs = null;

//        int expResult = 0;
//        int result = instance.pixCleanupByteProcessing(pix, lineptrs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_setAlphaMaskBorder method, of class Leptonica.
//     */
//    @Test
//    public void testL_setAlphaMaskBorder() {
//        System.out.println("l_setAlphaMaskBorder");
//        float val1 = 0.0F;
//        float val2 = 0.0F;

//        instance.l_setAlphaMaskBorder(val1, val2);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetMasked() {
//        System.out.println("pixSetMasked");
//        Pix pixd = null;
//        Pix pixm = null;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixSetMasked(pixd, pixm, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetMaskedGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetMaskedGeneral() {
//        System.out.println("pixSetMaskedGeneral");
//        Pix pixd = null;
//        Pix pixm = null;
//        int val = 0;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixSetMaskedGeneral(pixd, pixm, val, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCombineMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixCombineMasked() {
//        System.out.println("pixCombineMasked");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;

//        int expResult = 0;
//        int result = instance.pixCombineMasked(pixd, pixs, pixm);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCombineMaskedGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixCombineMaskedGeneral() {
//        System.out.println("pixCombineMaskedGeneral");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixCombineMaskedGeneral(pixd, pixs, pixm, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPaintThroughMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixPaintThroughMask() {
//        System.out.println("pixPaintThroughMask");
//        Pix pixd = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixPaintThroughMask(pixd, pixm, x, y, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPaintSelfThroughMask method, of class Leptonica.
//     */
//    @Test
//    public void testPixPaintSelfThroughMask() {
//        System.out.println("pixPaintSelfThroughMask");
//        Pix pixd = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int tilesize = 0;
//        int searchdir = 0;

//        int expResult = 0;
//        int result = instance.pixPaintSelfThroughMask(pixd, pixm, x, y, tilesize, searchdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMakeMaskFromLUT method, of class Leptonica.
//     */
//    @Test
//    public void testPixMakeMaskFromLUT() {
//        System.out.println("pixMakeMaskFromLUT");
//        Pix pixs = null;
//        IntBuffer tab = null;

//        Pix expResult = null;
//        Pix result = instance.pixMakeMaskFromLUT(pixs, tab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetUnderTransparency method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetUnderTransparency() {
//        System.out.println("pixSetUnderTransparency");
//        Pix pixs = null;
//        int val = 0;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSetUnderTransparency(pixs, val, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixInvert method, of class Leptonica.
//     */
//    @Test
//    public void testPixInvert() {
//        System.out.println("pixInvert");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixInvert(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixOr method, of class Leptonica.
//     */
//    @Test
//    public void testPixOr() {
//        System.out.println("pixOr");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixOr(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAnd method, of class Leptonica.
//     */
//    @Test
//    public void testPixAnd() {
//        System.out.println("pixAnd");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixAnd(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixXor method, of class Leptonica.
//     */
//    @Test
//    public void testPixXor() {
//        System.out.println("pixXor");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixXor(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSubtract method, of class Leptonica.
//     */
//    @Test
//    public void testPixSubtract() {
//        System.out.println("pixSubtract");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixSubtract(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixZero method, of class Leptonica.
//     */
//    @Test
//    public void testPixZero() {
//        System.out.println("pixZero");
//        Pix pix = null;
//        IntBuffer pempty = null;

//        int expResult = 0;
//        int result = instance.pixZero(pix, pempty);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixForegroundFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixForegroundFraction() {
//        System.out.println("pixForegroundFraction");
//        Pix pix = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixForegroundFraction(pix, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCountPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCountPixels() {
//        System.out.println("pixaCountPixels");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaCountPixels(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountPixels() {
//        System.out.println("pixCountPixels");
//        Pix pix = null;
//        IntBuffer pcount = null;
//        IntBuffer tab8 = null;

//        int expResult = 0;
//        int result = instance.pixCountPixels(pix, pcount, tab8);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountByRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountByRow() {
//        System.out.println("pixCountByRow");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixCountByRow(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountByColumn() {
//        System.out.println("pixCountByColumn");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixCountByColumn(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountPixelsByRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountPixelsByRow() {
//        System.out.println("pixCountPixelsByRow");
//        Pix pix = null;
//        IntBuffer tab8 = null;

//        Numa expResult = null;
//        Numa result = instance.pixCountPixelsByRow(pix, tab8);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountPixelsByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountPixelsByColumn() {
//        System.out.println("pixCountPixelsByColumn");
//        Pix pix = null;

//        Numa expResult = null;
//        Numa result = instance.pixCountPixelsByColumn(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountPixelsInRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountPixelsInRow() {
//        System.out.println("pixCountPixelsInRow");
//        Pix pix = null;
//        int row = 0;
//        IntBuffer pcount = null;
//        IntBuffer tab8 = null;

//        int expResult = 0;
//        int result = instance.pixCountPixelsInRow(pix, row, pcount, tab8);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetMomentByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetMomentByColumn() {
//        System.out.println("pixGetMomentByColumn");
//        Pix pix = null;
//        int order = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetMomentByColumn(pix, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdPixelSum method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdPixelSum() {
//        System.out.println("pixThresholdPixelSum");
//        Pix pix = null;
//        int thresh = 0;
//        IntBuffer pabove = null;
//        IntBuffer tab8 = null;

//        int expResult = 0;
//        int result = instance.pixThresholdPixelSum(pix, thresh, pabove, tab8);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makePixelSumTab8 method, of class Leptonica.
//     */
//    @Test
//    public void testMakePixelSumTab8() {
//        System.out.println("makePixelSumTab8");

//        IntByReference expResult = null;
//        IntByReference result = instance.makePixelSumTab8();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makePixelCentroidTab8 method, of class Leptonica.
//     */
//    @Test
//    public void testMakePixelCentroidTab8() {
//        System.out.println("makePixelCentroidTab8");

//        IntByReference expResult = null;
//        IntByReference result = instance.makePixelCentroidTab8();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAverageByRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixAverageByRow() {
//        System.out.println("pixAverageByRow");
//        Pix pix = null;
//        Box box = null;
//        int type = 0;

//        Numa expResult = null;
//        Numa result = instance.pixAverageByRow(pix, box, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAverageByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixAverageByColumn() {
//        System.out.println("pixAverageByColumn");
//        Pix pix = null;
//        Box box = null;
//        int type = 0;

//        Numa expResult = null;
//        Numa result = instance.pixAverageByColumn(pix, box, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAverageInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixAverageInRect() {
//        System.out.println("pixAverageInRect");
//        Pix pix = null;
//        Box box = null;
//        FloatBuffer pave = null;

//        int expResult = 0;
//        int result = instance.pixAverageInRect(pix, box, pave);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVarianceByRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixVarianceByRow() {
//        System.out.println("pixVarianceByRow");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixVarianceByRow(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVarianceByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixVarianceByColumn() {
//        System.out.println("pixVarianceByColumn");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixVarianceByColumn(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVarianceInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixVarianceInRect() {
//        System.out.println("pixVarianceInRect");
//        Pix pix = null;
//        Box box = null;
//        FloatBuffer prootvar = null;

//        int expResult = 0;
//        int result = instance.pixVarianceInRect(pix, box, prootvar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAbsDiffByRow method, of class Leptonica.
//     */
//    @Test
//    public void testPixAbsDiffByRow() {
//        System.out.println("pixAbsDiffByRow");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixAbsDiffByRow(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAbsDiffByColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixAbsDiffByColumn() {
//        System.out.println("pixAbsDiffByColumn");
//        Pix pix = null;
//        Box box = null;

//        Numa expResult = null;
//        Numa result = instance.pixAbsDiffByColumn(pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAbsDiffInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixAbsDiffInRect() {
//        System.out.println("pixAbsDiffInRect");
//        Pix pix = null;
//        Box box = null;
//        int dir = 0;
//        FloatBuffer pabsdiff = null;

//        int expResult = 0;
//        int result = instance.pixAbsDiffInRect(pix, box, dir, pabsdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAbsDiffOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixAbsDiffOnLine() {
//        System.out.println("pixAbsDiffOnLine");
//        Pix pix = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        FloatBuffer pabsdiff = null;

//        int expResult = 0;
//        int result = instance.pixAbsDiffOnLine(pix, x1, y1, x2, y2, pabsdiff);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCountArbInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixCountArbInRect() {
//        System.out.println("pixCountArbInRect");
//        Pix pixs = null;
//        Box box = null;
//        int val = 0;
//        int factor = 0;
//        IntBuffer pcount = null;

//        int expResult = 0;
//        int result = instance.pixCountArbInRect(pixs, box, val, factor, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMirroredTiling method, of class Leptonica.
//     */
//    @Test
//    public void testPixMirroredTiling() {
//        System.out.println("pixMirroredTiling");
//        Pix pixs = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMirroredTiling(pixs, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetGrayHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetGrayHistogram() {
//        System.out.println("pixGetGrayHistogram");
//        Pix pixs = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetGrayHistogram(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetGrayHistogramMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetGrayHistogramMasked() {
//        System.out.println("pixGetGrayHistogramMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetGrayHistogramMasked(pixs, pixm, x, y, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetGrayHistogramInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetGrayHistogramInRect() {
//        System.out.println("pixGetGrayHistogramInRect");
//        Pix pixs = null;
//        Box box = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetGrayHistogramInRect(pixs, box, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetColorHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetColorHistogram() {
//        System.out.println("pixGetColorHistogram");
//        Pix pixs = null;
//        int factor = 0;
//        Numa.ByReference[] pnar = null;
//        Numa.ByReference[] pnag = null;
//        Numa.ByReference[] pnab = null;

//        int expResult = 0;
//        int result = instance.pixGetColorHistogram(pixs, factor, pnar, pnag, pnab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetColorHistogramMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetColorHistogramMasked() {
//        System.out.println("pixGetColorHistogramMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        Numa.ByReference[] pnar = null;
//        Numa.ByReference[] pnag = null;
//        Numa.ByReference[] pnab = null;

//        int expResult = 0;
//        int result = instance.pixGetColorHistogramMasked(pixs, pixm, x, y, factor, pnar, pnag, pnab);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetCmapHistogram method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetCmapHistogram() {
//        System.out.println("pixGetCmapHistogram");
//        Pix pixs = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetCmapHistogram(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetCmapHistogramMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetCmapHistogramMasked() {
//        System.out.println("pixGetCmapHistogramMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetCmapHistogramMasked(pixs, pixm, x, y, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetCmapHistogramInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetCmapHistogramInRect() {
//        System.out.println("pixGetCmapHistogramInRect");
//        Pix pixs = null;
//        Box box = null;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetCmapHistogramInRect(pixs, box, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRankValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRankValue() {
//        System.out.println("pixGetRankValue");
//        Pix pixs = null;
//        int factor = 0;
//        float rank = 0.0F;
//        IntBuffer pvalue = null;

//        int expResult = 0;
//        int result = instance.pixGetRankValue(pixs, factor, rank, pvalue);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRankValueMaskedRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRankValueMaskedRGB() {
//        System.out.println("pixGetRankValueMaskedRGB");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        float rank = 0.0F;
//        FloatBuffer prval = null;
//        FloatBuffer pgval = null;
//        FloatBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.pixGetRankValueMaskedRGB(pixs, pixm, x, y, factor, rank, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRankValueMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRankValueMasked_8args_1() {
//        System.out.println("pixGetRankValueMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        float rank = 0.0F;
//        FloatBuffer pval = null;
//        Numa.ByReference[] pna = null;

//        int expResult = 0;
//        int result = instance.pixGetRankValueMasked(pixs, pixm, x, y, factor, rank, pval, pna);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRankValueMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRankValueMasked_8args_2() {
//        System.out.println("pixGetRankValueMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        float rank = 0.0F;
//        FloatByReference pval = null;
//        Numa.ByReference[] pna = null;

//        int expResult = 0;
//        int result = instance.pixGetRankValueMasked(pixs, pixm, x, y, factor, rank, pval, pna);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetAverageMaskedRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetAverageMaskedRGB() {
//        System.out.println("pixGetAverageMaskedRGB");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        int type = 0;
//        FloatBuffer prval = null;
//        FloatBuffer pgval = null;
//        FloatBuffer pbval = null;

//        int expResult = 0;
//        int result = instance.pixGetAverageMaskedRGB(pixs, pixm, x, y, factor, type, prval, pgval, pbval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetAverageMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetAverageMasked() {
//        System.out.println("pixGetAverageMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int factor = 0;
//        int type = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.pixGetAverageMasked(pixs, pixm, x, y, factor, type, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetAverageTiledRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetAverageTiledRGB() {
//        System.out.println("pixGetAverageTiledRGB");
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int type = 0;
//        Pix.ByReference[] ppixr = null;
//        Pix.ByReference[] ppixg = null;
//        Pix.ByReference[] ppixb = null;

//        int expResult = 0;
//        int result = instance.pixGetAverageTiledRGB(pixs, sx, sy, type, ppixr, ppixg, ppixb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetAverageTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetAverageTiled() {
//        System.out.println("pixGetAverageTiled");
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGetAverageTiled(pixs, sx, sy, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRowStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixRowStats() {
//        System.out.println("pixRowStats");
//        Pix pixs = null;
//        Box box = null;
//        Numa.ByReference[] pnamean = null;
//        Numa.ByReference[] pnamedian = null;
//        Numa.ByReference[] pnamode = null;
//        Numa.ByReference[] pnamodecount = null;
//        Numa.ByReference[] pnavar = null;
//        Numa.ByReference[] pnarootvar = null;

//        int expResult = 0;
//        int result = instance.pixRowStats(pixs, box, pnamean, pnamedian, pnamode, pnamodecount, pnavar, pnarootvar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColumnStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixColumnStats() {
//        System.out.println("pixColumnStats");
//        Pix pixs = null;
//        Box box = null;
//        Numa.ByReference[] pnamean = null;
//        Numa.ByReference[] pnamedian = null;
//        Numa.ByReference[] pnamode = null;
//        Numa.ByReference[] pnamodecount = null;
//        Numa.ByReference[] pnavar = null;
//        Numa.ByReference[] pnarootvar = null;

//        int expResult = 0;
//        int result = instance.pixColumnStats(pixs, box, pnamean, pnamedian, pnamode, pnamodecount, pnavar, pnarootvar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetComponentRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetComponentRange() {
//        System.out.println("pixGetComponentRange");
//        Pix pixs = null;
//        int factor = 0;
//        int color = 0;
//        IntBuffer pminval = null;
//        IntBuffer pmaxval = null;

//        int expResult = 0;
//        int result = instance.pixGetComponentRange(pixs, factor, color, pminval, pmaxval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetExtremeValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetExtremeValue() {
//        System.out.println("pixGetExtremeValue");
//        Pix pixs = null;
//        int factor = 0;
//        int type = 0;
//        IntBuffer prval = null;
//        IntBuffer pgval = null;
//        IntBuffer pbval = null;
//        IntBuffer pgrayval = null;

//        int expResult = 0;
//        int result = instance.pixGetExtremeValue(pixs, factor, type, prval, pgval, pbval, pgrayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetMaxValueInRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetMaxValueInRect() {
//        System.out.println("pixGetMaxValueInRect");
//        Pix pixs = null;
//        Box box = null;
//        IntBuffer pmaxval = null;
//        IntBuffer pxmax = null;
//        IntBuffer pymax = null;

//        int expResult = 0;
//        int result = instance.pixGetMaxValueInRect(pixs, box, pmaxval, pxmax, pymax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBinnedComponentRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBinnedComponentRange() {
//        System.out.println("pixGetBinnedComponentRange");
//        Pix pixs = null;
//        int nbins = 0;
//        int factor = 0;
//        int color = 0;
//        IntBuffer pminval = null;
//        IntBuffer pmaxval = null;
//        PointerByReference pcarray = null;
//        String fontdir = "";

//        int expResult = 0;
//        int result = instance.pixGetBinnedComponentRange(pixs, nbins, factor, color, pminval, pmaxval, pcarray, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRankColorArray method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRankColorArray() {
//        System.out.println("pixGetRankColorArray");
//        Pix pixs = null;
//        int nbins = 0;
//        int type = 0;
//        int factor = 0;
//        PointerByReference pcarray = null;
//        int debugflag = 0;
//        String fontdir = "";

//        int expResult = 0;
//        int result = instance.pixGetRankColorArray(pixs, nbins, type, factor, pcarray, debugflag, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetBinnedColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetBinnedColor() {
//        System.out.println("pixGetBinnedColor");
//        Pix pixs = null;
//        Pix pixg = null;
//        int factor = 0;
//        int nbins = 0;
//        Numa nalut = null;
//        PointerByReference pcarray = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixGetBinnedColor(pixs, pixg, factor, nbins, nalut, pcarray, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayColorArray method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayColorArray() {
//        System.out.println("pixDisplayColorArray");
//        IntBuffer carray = null;
//        int ncolors = 0;
//        int side = 0;
//        int ncols = 0;
//        String fontdir = "";

//        Pix expResult = null;
//        Pix result = instance.pixDisplayColorArray(carray, ncolors, side, ncols, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankBinByStrip method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankBinByStrip() {
//        System.out.println("pixRankBinByStrip");
//        Pix pixs = null;
//        int direction = 0;
//        int size = 0;
//        int nbins = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRankBinByStrip(pixs, direction, size, nbins, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetAlignedStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetAlignedStats() {
//        System.out.println("pixaGetAlignedStats");
//        Pixa pixa = null;
//        int type = 0;
//        int nbins = 0;
//        int thresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaGetAlignedStats(pixa, type, nbins, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaExtractColumnFromEachPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaExtractColumnFromEachPix() {
//        System.out.println("pixaExtractColumnFromEachPix");
//        Pixa pixa = null;
//        int col = 0;
//        Pix pixd = null;

//        int expResult = 0;
//        int result = instance.pixaExtractColumnFromEachPix(pixa, col, pixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRowStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRowStats() {
//        System.out.println("pixGetRowStats");
//        Pix pixs = null;
//        int type = 0;
//        int nbins = 0;
//        int thresh = 0;
//        FloatBuffer colvect = null;

//        int expResult = 0;
//        int result = instance.pixGetRowStats(pixs, type, nbins, thresh, colvect);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetColumnStats method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetColumnStats() {
//        System.out.println("pixGetColumnStats");
//        Pix pixs = null;
//        int type = 0;
//        int nbins = 0;
//        int thresh = 0;
//        FloatBuffer rowvect = null;

//        int expResult = 0;
//        int result = instance.pixGetColumnStats(pixs, type, nbins, thresh, rowvect);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetPixelColumn method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetPixelColumn() {
//        System.out.println("pixSetPixelColumn");
//        Pix pix = null;
//        int col = 0;
//        FloatBuffer colvect = null;

//        int expResult = 0;
//        int result = instance.pixSetPixelColumn(pix, col, colvect);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdForFgBg method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdForFgBg() {
//        System.out.println("pixThresholdForFgBg");
//        Pix pixs = null;
//        int factor = 0;
//        int thresh = 0;
//        IntBuffer pfgval = null;
//        IntBuffer pbgval = null;

//        int expResult = 0;
//        int result = instance.pixThresholdForFgBg(pixs, factor, thresh, pfgval, pbgval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSplitDistributionFgBg method, of class Leptonica.
//     */
//    @Test
//    public void testPixSplitDistributionFgBg() {
//        System.out.println("pixSplitDistributionFgBg");
//        Pix pixs = null;
//        float scorefract = 0.0F;
//        int factor = 0;
//        IntBuffer pthresh = null;
//        IntBuffer pfgval = null;
//        IntBuffer pbgval = null;
//        int debugflag = 0;

//        int expResult = 0;
//        int result = instance.pixSplitDistributionFgBg(pixs, scorefract, factor, pthresh, pfgval, pbgval, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindDimensions() {
//        System.out.println("pixaFindDimensions");
//        Pixa pixa = null;
//        Numa.ByReference[] pnaw = null;
//        Numa.ByReference[] pnah = null;

//        int expResult = 0;
//        int result = instance.pixaFindDimensions(pixa, pnaw, pnah);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindAreaPerimRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindAreaPerimRatio() {
//        System.out.println("pixFindAreaPerimRatio");
//        Pix pixs = null;
//        IntBuffer tab = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixFindAreaPerimRatio(pixs, tab, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindPerimToAreaRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindPerimToAreaRatio() {
//        System.out.println("pixaFindPerimToAreaRatio");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaFindPerimToAreaRatio(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindPerimToAreaRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindPerimToAreaRatio() {
//        System.out.println("pixFindPerimToAreaRatio");
//        Pix pixs = null;
//        IntBuffer tab = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixFindPerimToAreaRatio(pixs, tab, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindPerimSizeRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindPerimSizeRatio() {
//        System.out.println("pixaFindPerimSizeRatio");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaFindPerimSizeRatio(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindPerimSizeRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindPerimSizeRatio() {
//        System.out.println("pixFindPerimSizeRatio");
//        Pix pixs = null;
//        IntBuffer tab = null;
//        FloatBuffer pratio = null;

//        int expResult = 0;
//        int result = instance.pixFindPerimSizeRatio(pixs, tab, pratio);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindAreaFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindAreaFraction() {
//        System.out.println("pixaFindAreaFraction");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaFindAreaFraction(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindAreaFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindAreaFraction() {
//        System.out.println("pixFindAreaFraction");
//        Pix pixs = null;
//        IntBuffer tab = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixFindAreaFraction(pixs, tab, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindAreaFractionMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindAreaFractionMasked() {
//        System.out.println("pixaFindAreaFractionMasked");
//        Pixa pixa = null;
//        Pix pixm = null;
//        int debug = 0;

//        Numa expResult = null;
//        Numa result = instance.pixaFindAreaFractionMasked(pixa, pixm, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindAreaFractionMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindAreaFractionMasked() {
//        System.out.println("pixFindAreaFractionMasked");
//        Pix pixs = null;
//        Box box = null;
//        Pix pixm = null;
//        IntBuffer tab = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixFindAreaFractionMasked(pixs, box, pixm, tab, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindWidthHeightRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindWidthHeightRatio() {
//        System.out.println("pixaFindWidthHeightRatio");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaFindWidthHeightRatio(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaFindWidthHeightProduct method, of class Leptonica.
//     */
//    @Test
//    public void testPixaFindWidthHeightProduct() {
//        System.out.println("pixaFindWidthHeightProduct");
//        Pixa pixa = null;

//        Numa expResult = null;
//        Numa result = instance.pixaFindWidthHeightProduct(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindOverlapFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindOverlapFraction() {
//        System.out.println("pixFindOverlapFraction");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int x2 = 0;
//        int y2 = 0;
//        IntBuffer tab = null;
//        FloatBuffer pratio = null;
//        IntBuffer pnoverlap = null;

//        int expResult = 0;
//        int result = instance.pixFindOverlapFraction(pixs1, pixs2, x2, y2, tab, pratio, pnoverlap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindRectangleComps method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindRectangleComps() {
//        System.out.println("pixFindRectangleComps");
//        Pix pixs = null;
//        int dist = 0;
//        int minw = 0;
//        int minh = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixFindRectangleComps(pixs, dist, minw, minh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConformsToRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixConformsToRectangle() {
//        System.out.println("pixConformsToRectangle");
//        Pix pixs = null;
//        Box box = null;
//        int dist = 0;
//        IntBuffer pconforms = null;

//        int expResult = 0;
//        int result = instance.pixConformsToRectangle(pixs, box, dist, pconforms);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipRectangles method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipRectangles() {
//        System.out.println("pixClipRectangles");
//        Pix pixs = null;
//        Boxa boxa = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixClipRectangles(pixs, boxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipRectangle() {
//        System.out.println("pixClipRectangle");
//        Pix pixs = null;
//        Box box = null;
//        Box.ByReference[] pboxc = null;

//        Pix expResult = null;
//        Pix result = instance.pixClipRectangle(pixs, box, pboxc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipMasked method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipMasked() {
//        System.out.println("pixClipMasked");
//        Pix pixs = null;
//        Pix pixm = null;
//        int x = 0;
//        int y = 0;
//        int outval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixClipMasked(pixs, pixm, x, y, outval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCropToMatch method, of class Leptonica.
//     */
//    @Test
//    public void testPixCropToMatch() {
//        System.out.println("pixCropToMatch");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        Pix.ByReference[] ppixd1 = null;
//        Pix.ByReference[] ppixd2 = null;

//        int expResult = 0;
//        int result = instance.pixCropToMatch(pixs1, pixs2, ppixd1, ppixd2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCropToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixCropToSize() {
//        System.out.println("pixCropToSize");
//        Pix pixs = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixCropToSize(pixs, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixResizeToMatch method, of class Leptonica.
//     */
//    @Test
//    public void testPixResizeToMatch() {
//        System.out.println("pixResizeToMatch");
//        Pix pixs = null;
//        Pix pixt = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixResizeToMatch(pixs, pixt, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipToForeground method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipToForeground() {
//        System.out.println("pixClipToForeground");
//        Pix pixs = null;
//        Pix.ByReference[] ppixd = null;
//        Box.ByReference[] pbox = null;

//        int expResult = 0;
//        int result = instance.pixClipToForeground(pixs, ppixd, pbox);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTestClipToForeground method, of class Leptonica.
//     */
//    @Test
//    public void testPixTestClipToForeground() {
//        System.out.println("pixTestClipToForeground");
//        Pix pixs = null;
//        IntBuffer pcanclip = null;

//        int expResult = 0;
//        int result = instance.pixTestClipToForeground(pixs, pcanclip);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipBoxToForeground method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipBoxToForeground() {
//        System.out.println("pixClipBoxToForeground");
//        Pix pixs = null;
//        Box boxs = null;
//        Pix.ByReference[] ppixd = null;
//        Box.ByReference[] pboxd = null;

//        int expResult = 0;
//        int result = instance.pixClipBoxToForeground(pixs, boxs, ppixd, pboxd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScanForForeground method, of class Leptonica.
//     */
//    @Test
//    public void testPixScanForForeground() {
//        System.out.println("pixScanForForeground");
//        Pix pixs = null;
//        Box box = null;
//        int scanflag = 0;
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.pixScanForForeground(pixs, box, scanflag, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixClipBoxToEdges method, of class Leptonica.
//     */
//    @Test
//    public void testPixClipBoxToEdges() {
//        System.out.println("pixClipBoxToEdges");
//        Pix pixs = null;
//        Box boxs = null;
//        int lowthresh = 0;
//        int highthresh = 0;
//        int maxwidth = 0;
//        int factor = 0;
//        Pix.ByReference[] ppixd = null;
//        Box.ByReference[] pboxd = null;

//        int expResult = 0;
//        int result = instance.pixClipBoxToEdges(pixs, boxs, lowthresh, highthresh, maxwidth, factor, ppixd, pboxd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScanForEdge method, of class Leptonica.
//     */
//    @Test
//    public void testPixScanForEdge() {
//        System.out.println("pixScanForEdge");
//        Pix pixs = null;
//        Box box = null;
//        int lowthresh = 0;
//        int highthresh = 0;
//        int maxwidth = 0;
//        int factor = 0;
//        int scanflag = 0;
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.pixScanForEdge(pixs, box, lowthresh, highthresh, maxwidth, factor, scanflag, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractOnLine() {
//        System.out.println("pixExtractOnLine");
//        Pix pixs = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int factor = 0;

//        Numa expResult = null;
//        Numa result = instance.pixExtractOnLine(pixs, x1, y1, x2, y2, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAverageOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixAverageOnLine() {
//        System.out.println("pixAverageOnLine");
//        Pix pixs = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int factor = 0;

//        float expResult = 0.0F;
//        float result = instance.pixAverageOnLine(pixs, x1, y1, x2, y2, factor);
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAverageIntensityProfile method, of class Leptonica.
//     */
//    @Test
//    public void testPixAverageIntensityProfile() {
//        System.out.println("pixAverageIntensityProfile");
//        Pix pixs = null;
//        float fract = 0.0F;
//        int dir = 0;
//        int first = 0;
//        int last = 0;
//        int factor1 = 0;
//        int factor2 = 0;

//        Numa expResult = null;
//        Numa result = instance.pixAverageIntensityProfile(pixs, fract, dir, first, last, factor1, factor2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReversalProfile method, of class Leptonica.
//     */
//    @Test
//    public void testPixReversalProfile() {
//        System.out.println("pixReversalProfile");
//        Pix pixs = null;
//        float fract = 0.0F;
//        int dir = 0;
//        int first = 0;
//        int last = 0;
//        int minreversal = 0;
//        int factor1 = 0;
//        int factor2 = 0;

//        Numa expResult = null;
//        Numa result = instance.pixReversalProfile(pixs, fract, dir, first, last, minreversal, factor1, factor2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWindowedVarianceOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixWindowedVarianceOnLine() {
//        System.out.println("pixWindowedVarianceOnLine");
//        Pix pixs = null;
//        int dir = 0;
//        int loc = 0;
//        int c1 = 0;
//        int c2 = 0;
//        int size = 0;
//        Numa.ByReference[] pnad = null;

//        int expResult = 0;
//        int result = instance.pixWindowedVarianceOnLine(pixs, dir, loc, c1, c2, size, pnad);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMinMaxNearLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixMinMaxNearLine_11args_1() {
//        System.out.println("pixMinMaxNearLine");
//        Pix pixs = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int dist = 0;
//        int direction = 0;
//        Numa.ByReference[] pnamin = null;
//        Numa.ByReference[] pnamax = null;
//        FloatBuffer pminave = null;
//        FloatBuffer pmaxave = null;

//        int expResult = 0;
//        int result = instance.pixMinMaxNearLine(pixs, x1, y1, x2, y2, dist, direction, pnamin, pnamax, pminave, pmaxave);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMinMaxNearLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixMinMaxNearLine_11args_2() {
//        System.out.println("pixMinMaxNearLine");
//        Pix pixs = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;
//        int dist = 0;
//        int direction = 0;
//        Numa.ByReference[] pnamin = null;
//        Numa.ByReference[] pnamax = null;
//        FloatByReference pminave = null;
//        FloatByReference pmaxave = null;

//        int expResult = 0;
//        int result = instance.pixMinMaxNearLine(pixs, x1, y1, x2, y2, dist, direction, pnamin, pnamax, pminave, pmaxave);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankRowTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankRowTransform() {
//        System.out.println("pixRankRowTransform");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixRankRowTransform(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankColumnTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankColumnTransform() {
//        System.out.println("pixRankColumnTransform");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixRankColumnTransform(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCreate() {
//        System.out.println("pixaCreate");
//        int n = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCreateFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCreateFromPix() {
//        System.out.println("pixaCreateFromPix");
//        Pix pixs = null;
//        int n = 0;
//        int cellw = 0;
//        int cellh = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaCreateFromPix(pixs, n, cellw, cellh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCreateFromBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCreateFromBoxa() {
//        System.out.println("pixaCreateFromBoxa");
//        Pix pixs = null;
//        Boxa boxa = null;
//        IntBuffer pcropwarn = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaCreateFromBoxa(pixs, boxa, pcropwarn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSplitPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSplitPix() {
//        System.out.println("pixaSplitPix");
//        Pix pixs = null;
//        int nx = 0;
//        int ny = 0;
//        int borderwidth = 0;
//        int bordercolor = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSplitPix(pixs, nx, ny, borderwidth, bordercolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDestroy() {
//        System.out.println("pixaDestroy");
//        Pixa.ByReference[] ppixa = null;

//        instance.pixaDestroy(ppixa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCopy() {
//        System.out.println("pixaCopy");
//        Pixa pixa = null;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaCopy(pixa, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAddPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAddPix() {
//        System.out.println("pixaAddPix");
//        Pixa pixa = null;
//        Pix pix = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixaAddPix(pixa, pix, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAddBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAddBox() {
//        System.out.println("pixaAddBox");
//        Pixa pixa = null;
//        Box box = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixaAddBox(pixa, box, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaExtendArrayToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixaExtendArrayToSize() {
//        System.out.println("pixaExtendArrayToSize");
//        Pixa pixa = null;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.pixaExtendArrayToSize(pixa, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetCount() {
//        System.out.println("pixaGetCount");
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaGetCount(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testPixaChangeRefcount() {
//        System.out.println("pixaChangeRefcount");
//        Pixa pixa = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.pixaChangeRefcount(pixa, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetPix() {
//        System.out.println("pixaGetPix");
//        Pixa pixa = null;
//        int index = 0;
//        int accesstype = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaGetPix(pixa, index, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetPixDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetPixDimensions() {
//        System.out.println("pixaGetPixDimensions");
//        Pixa pixa = null;
//        int index = 0;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;

//        int expResult = 0;
//        int result = instance.pixaGetPixDimensions(pixa, index, pw, ph, pd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetBoxa() {
//        System.out.println("pixaGetBoxa");
//        Pixa pixa = null;
//        int accesstype = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixaGetBoxa(pixa, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetBoxaCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetBoxaCount() {
//        System.out.println("pixaGetBoxaCount");
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaGetBoxaCount(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetBox() {
//        System.out.println("pixaGetBox");
//        Pixa pixa = null;
//        int index = 0;
//        int accesstype = 0;

//        Box expResult = null;
//        Box result = instance.pixaGetBox(pixa, index, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetBoxGeometry method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetBoxGeometry() {
//        System.out.println("pixaGetBoxGeometry");
//        Pixa pixa = null;
//        int index = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.pixaGetBoxGeometry(pixa, index, px, py, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSetBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSetBoxa() {
//        System.out.println("pixaSetBoxa");
//        Pixa pixa = null;
//        Boxa boxa = null;
//        int accesstype = 0;

//        int expResult = 0;
//        int result = instance.pixaSetBoxa(pixa, boxa, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetPixArray method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetPixArray() {
//        System.out.println("pixaGetPixArray");
//        Pixa pixa = null;

//        Pix.ByReference[] expResult = null;
//        Pix.ByReference[] result = instance.pixaGetPixArray(pixa);
//        assertArrayEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaVerifyDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixaVerifyDepth() {
//        System.out.println("pixaVerifyDepth");
//        Pixa pixa = null;
//        IntBuffer pmaxdepth = null;

//        int expResult = 0;
//        int result = instance.pixaVerifyDepth(pixa, pmaxdepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaIsFull method, of class Leptonica.
//     */
//    @Test
//    public void testPixaIsFull() {
//        System.out.println("pixaIsFull");
//        Pixa pixa = null;
//        IntBuffer pfullpa = null;
//        IntBuffer pfullba = null;

//        int expResult = 0;
//        int result = instance.pixaIsFull(pixa, pfullpa, pfullba);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCountText method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCountText() {
//        System.out.println("pixaCountText");
//        Pixa pixa = null;
//        IntBuffer pntext = null;

//        int expResult = 0;
//        int result = instance.pixaCountText(pixa, pntext);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetLinePtrs method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetLinePtrs() {
//        System.out.println("pixaGetLinePtrs");
//        Pixa pixa = null;
//        IntBuffer psize = null;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.pixaGetLinePtrs(pixa, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaReplacePix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaReplacePix() {
//        System.out.println("pixaReplacePix");
//        Pixa pixa = null;
//        int index = 0;
//        Pix pix = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixaReplacePix(pixa, index, pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaInsertPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaInsertPix() {
//        System.out.println("pixaInsertPix");
//        Pixa pixa = null;
//        int index = 0;
//        Pix pixs = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixaInsertPix(pixa, index, pixs, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaRemovePix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaRemovePix() {
//        System.out.println("pixaRemovePix");
//        Pixa pixa = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.pixaRemovePix(pixa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaRemovePixAndSave method, of class Leptonica.
//     */
//    @Test
//    public void testPixaRemovePixAndSave() {
//        System.out.println("pixaRemovePixAndSave");
//        Pixa pixa = null;
//        int index = 0;
//        Pix.ByReference[] ppix = null;
//        Box.ByReference[] pbox = null;

//        int expResult = 0;
//        int result = instance.pixaRemovePixAndSave(pixa, index, ppix, pbox);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaInitFull method, of class Leptonica.
//     */
//    @Test
//    public void testPixaInitFull() {
//        System.out.println("pixaInitFull");
//        Pixa pixa = null;
//        Pix pix = null;
//        Box box = null;

//        int expResult = 0;
//        int result = instance.pixaInitFull(pixa, pix, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaClear method, of class Leptonica.
//     */
//    @Test
//    public void testPixaClear() {
//        System.out.println("pixaClear");
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaClear(pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPixaJoin() {
//        System.out.println("pixaJoin");
//        Pixa pixad = null;
//        Pixa pixas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.pixaJoin(pixad, pixas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaJoin() {
//        System.out.println("pixaaJoin");
//        Pixaa paad = null;
//        Pixaa paas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.pixaaJoin(paad, paas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaCreate() {
//        System.out.println("pixaaCreate");
//        int n = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaCreateFromPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaCreateFromPixa() {
//        System.out.println("pixaaCreateFromPixa");
//        Pixa pixa = null;
//        int n = 0;
//        int type = 0;
//        int copyflag = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaCreateFromPixa(pixa, n, type, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaDestroy() {
//        System.out.println("pixaaDestroy");
//        Pixaa.ByReference[] ppaa = null;

//        instance.pixaaDestroy(ppaa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaAddPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaAddPixa() {
//        System.out.println("pixaaAddPixa");
//        Pixaa paa = null;
//        Pixa pixa = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixaaAddPixa(paa, pixa, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaExtendArray method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaExtendArray() {
//        System.out.println("pixaaExtendArray");
//        Pixaa paa = null;

//        int expResult = 0;
//        int result = instance.pixaaExtendArray(paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaAddPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaAddPix() {
//        System.out.println("pixaaAddPix");
//        Pixaa paa = null;
//        int index = 0;
//        Pix pix = null;
//        Box box = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixaaAddPix(paa, index, pix, box, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaAddBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaAddBox() {
//        System.out.println("pixaaAddBox");
//        Pixaa paa = null;
//        Box box = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixaaAddBox(paa, box, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaGetCount() {
//        System.out.println("pixaaGetCount");
//        Pixaa paa = null;
//        Numa.ByReference[] pna = null;

//        int expResult = 0;
//        int result = instance.pixaaGetCount(paa, pna);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaGetPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaGetPixa() {
//        System.out.println("pixaaGetPixa");
//        Pixaa paa = null;
//        int index = 0;
//        int accesstype = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaaGetPixa(paa, index, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaGetBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaGetBoxa() {
//        System.out.println("pixaaGetBoxa");
//        Pixaa paa = null;
//        int accesstype = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixaaGetBoxa(paa, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaGetPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaGetPix() {
//        System.out.println("pixaaGetPix");
//        Pixaa paa = null;
//        int index = 0;
//        int ipix = 0;
//        int accessflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaaGetPix(paa, index, ipix, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaVerifyDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaVerifyDepth() {
//        System.out.println("pixaaVerifyDepth");
//        Pixaa paa = null;
//        IntBuffer pmaxdepth = null;

//        int expResult = 0;
//        int result = instance.pixaaVerifyDepth(paa, pmaxdepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaIsFull method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaIsFull() {
//        System.out.println("pixaaIsFull");
//        Pixaa paa = null;
//        IntBuffer pfull = null;

//        int expResult = 0;
//        int result = instance.pixaaIsFull(paa, pfull);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaInitFull method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaInitFull() {
//        System.out.println("pixaaInitFull");
//        Pixaa paa = null;
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaaInitFull(paa, pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaReplacePixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaReplacePixa() {
//        System.out.println("pixaaReplacePixa");
//        Pixaa paa = null;
//        int index = 0;
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaaReplacePixa(paa, index, pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaClear method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaClear() {
//        System.out.println("pixaaClear");
//        Pixaa paa = null;

//        int expResult = 0;
//        int result = instance.pixaaClear(paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaTruncate method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaTruncate() {
//        System.out.println("pixaaTruncate");
//        Pixaa paa = null;

//        int expResult = 0;
//        int result = instance.pixaaTruncate(paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaRead method, of class Leptonica.
//     */
//    @Test
//    public void testPixaRead() {
//        System.out.println("pixaRead");
//        String filename = "";

//        Pixa expResult = null;
//        Pixa result = instance.pixaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixaReadStream() {
//        System.out.println("pixaReadStream");
//        PointerByReference fp = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPixaWrite() {
//        System.out.println("pixaWrite");
//        String filename = "";
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaWrite(filename, pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixaWriteStream() {
//        System.out.println("pixaWriteStream");
//        PointerByReference fp = null;
//        Pixa pixa = null;

//        int expResult = 0;
//        int result = instance.pixaWriteStream(fp, pixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaReadFromFiles method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaReadFromFiles() {
//        System.out.println("pixaaReadFromFiles");
//        String dirname = "";
//        String substr = "";
//        int first = 0;
//        int nfiles = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaReadFromFiles(dirname, substr, first, nfiles);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaRead method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaRead() {
//        System.out.println("pixaaRead");
//        String filename = "";

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaReadStream() {
//        System.out.println("pixaaReadStream");
//        PointerByReference fp = null;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaWrite() {
//        System.out.println("pixaaWrite");
//        String filename = "";
//        Pixaa paa = null;

//        int expResult = 0;
//        int result = instance.pixaaWrite(filename, paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaWriteStream() {
//        System.out.println("pixaaWriteStream");
//        PointerByReference fp = null;
//        Pixaa paa = null;

//        int expResult = 0;
//        int result = instance.pixaaWriteStream(fp, paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccCreate() {
//        System.out.println("pixaccCreate");
//        int w = 0;
//        int h = 0;
//        int negflag = 0;

//        Pixacc expResult = null;
//        Pixacc result = instance.pixaccCreate(w, h, negflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccCreateFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccCreateFromPix() {
//        System.out.println("pixaccCreateFromPix");
//        Pix pix = null;
//        int negflag = 0;

//        Pixacc expResult = null;
//        Pixacc result = instance.pixaccCreateFromPix(pix, negflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccDestroy() {
//        System.out.println("pixaccDestroy");
//        Pixacc.ByReference[] ppixacc = null;

//        instance.pixaccDestroy(ppixacc);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccFinal method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccFinal() {
//        System.out.println("pixaccFinal");
//        Pixacc pixacc = null;
//        int outdepth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaccFinal(pixacc, outdepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccGetPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccGetPix() {
//        System.out.println("pixaccGetPix");
//        Pixacc pixacc = null;

//        Pix expResult = null;
//        Pix result = instance.pixaccGetPix(pixacc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccGetOffset method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccGetOffset() {
//        System.out.println("pixaccGetOffset");
//        Pixacc pixacc = null;

//        int expResult = 0;
//        int result = instance.pixaccGetOffset(pixacc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccAdd method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccAdd() {
//        System.out.println("pixaccAdd");
//        Pixacc pixacc = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixaccAdd(pixacc, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccSubtract method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccSubtract() {
//        System.out.println("pixaccSubtract");
//        Pixacc pixacc = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixaccSubtract(pixacc, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccMultConst method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccMultConst() {
//        System.out.println("pixaccMultConst");
//        Pixacc pixacc = null;
//        float factor = 0.0F;

//        int expResult = 0;
//        int result = instance.pixaccMultConst(pixacc, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaccMultConstAccumulate method, of class Leptonica.
//     */
//    @Test
//    public void testPixaccMultConstAccumulate() {
//        System.out.println("pixaccMultConstAccumulate");
//        Pixacc pixacc = null;
//        Pix pix = null;
//        float factor = 0.0F;

//        int expResult = 0;
//        int result = instance.pixaccMultConstAccumulate(pixacc, pix, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectBySize method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectBySize() {
//        System.out.println("pixSelectBySize");
//        Pix pixs = null;
//        int width = 0;
//        int height = 0;
//        int connectivity = 0;
//        int type = 0;
//        int relation = 0;
//        IntBuffer pchanged = null;

//        Pix expResult = null;
//        Pix result = instance.pixSelectBySize(pixs, width, height, connectivity, type, relation, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectBySize method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectBySize() {
//        System.out.println("pixaSelectBySize");
//        Pixa pixas = null;
//        int width = 0;
//        int height = 0;
//        int type = 0;
//        int relation = 0;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectBySize(pixas, width, height, type, relation, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaMakeSizeIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testPixaMakeSizeIndicator() {
//        System.out.println("pixaMakeSizeIndicator");
//        Pixa pixa = null;
//        int width = 0;
//        int height = 0;
//        int type = 0;
//        int relation = 0;

//        Numa expResult = null;
//        Numa result = instance.pixaMakeSizeIndicator(pixa, width, height, type, relation);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectByPerimToAreaRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectByPerimToAreaRatio() {
//        System.out.println("pixSelectByPerimToAreaRatio");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        int connectivity = 0;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pix expResult = null;
//        Pix result = instance.pixSelectByPerimToAreaRatio(pixs, thresh, connectivity, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectByPerimToAreaRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectByPerimToAreaRatio() {
//        System.out.println("pixaSelectByPerimToAreaRatio");
//        Pixa pixas = null;
//        float thresh = 0.0F;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectByPerimToAreaRatio(pixas, thresh, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectByPerimSizeRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectByPerimSizeRatio() {
//        System.out.println("pixSelectByPerimSizeRatio");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        int connectivity = 0;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pix expResult = null;
//        Pix result = instance.pixSelectByPerimSizeRatio(pixs, thresh, connectivity, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectByPerimSizeRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectByPerimSizeRatio() {
//        System.out.println("pixaSelectByPerimSizeRatio");
//        Pixa pixas = null;
//        float thresh = 0.0F;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectByPerimSizeRatio(pixas, thresh, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectByAreaFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectByAreaFraction() {
//        System.out.println("pixSelectByAreaFraction");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        int connectivity = 0;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pix expResult = null;
//        Pix result = instance.pixSelectByAreaFraction(pixs, thresh, connectivity, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectByAreaFraction method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectByAreaFraction() {
//        System.out.println("pixaSelectByAreaFraction");
//        Pixa pixas = null;
//        float thresh = 0.0F;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectByAreaFraction(pixas, thresh, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectByWidthHeightRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectByWidthHeightRatio() {
//        System.out.println("pixSelectByWidthHeightRatio");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        int connectivity = 0;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pix expResult = null;
//        Pix result = instance.pixSelectByWidthHeightRatio(pixs, thresh, connectivity, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectByWidthHeightRatio method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectByWidthHeightRatio() {
//        System.out.println("pixaSelectByWidthHeightRatio");
//        Pixa pixas = null;
//        float thresh = 0.0F;
//        int type = 0;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectByWidthHeightRatio(pixas, thresh, type, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectWithIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectWithIndicator() {
//        System.out.println("pixaSelectWithIndicator");
//        Pixa pixas = null;
//        Numa na = null;
//        IntBuffer pchanged = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectWithIndicator(pixas, na, pchanged);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveWithIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveWithIndicator() {
//        System.out.println("pixRemoveWithIndicator");
//        Pix pixs = null;
//        Pixa pixa = null;
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.pixRemoveWithIndicator(pixs, pixa, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddWithIndicator method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddWithIndicator() {
//        System.out.println("pixAddWithIndicator");
//        Pix pixs = null;
//        Pixa pixa = null;
//        Numa na = null;

//        int expResult = 0;
//        int result = instance.pixAddWithIndicator(pixs, pixa, na);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaRenderComponent method, of class Leptonica.
//     */
//    @Test
//    public void testPixaRenderComponent() {
//        System.out.println("pixaRenderComponent");
//        Pix pixs = null;
//        Pixa pixa = null;
//        int index = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaRenderComponent(pixs, pixa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSort method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSort() {
//        System.out.println("pixaSort");
//        Pixa pixas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSort(pixas, sorttype, sortorder, pnaindex, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaBinSort method, of class Leptonica.
//     */
//    @Test
//    public void testPixaBinSort() {
//        System.out.println("pixaBinSort");
//        Pixa pixas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaBinSort(pixas, sorttype, sortorder, pnaindex, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSortByIndex() {
//        System.out.println("pixaSortByIndex");
//        Pixa pixas = null;
//        Numa naindex = null;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSortByIndex(pixas, naindex, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSort2dByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSort2dByIndex() {
//        System.out.println("pixaSort2dByIndex");
//        Pixa pixas = null;
//        Numaa naa = null;
//        int copyflag = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaSort2dByIndex(pixas, naa, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSelectRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSelectRange() {
//        System.out.println("pixaSelectRange");
//        Pixa pixas = null;
//        int first = 0;
//        int last = 0;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaSelectRange(pixas, first, last, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaSelectRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaSelectRange() {
//        System.out.println("pixaaSelectRange");
//        Pixaa paas = null;
//        int first = 0;
//        int last = 0;
//        int copyflag = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaSelectRange(paas, first, last, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaScaleToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaScaleToSize() {
//        System.out.println("pixaaScaleToSize");
//        Pixaa paas = null;
//        int wd = 0;
//        int hd = 0;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaScaleToSize(paas, wd, hd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaScaleToSizeVar method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaScaleToSizeVar() {
//        System.out.println("pixaaScaleToSizeVar");
//        Pixaa paas = null;
//        Numa nawd = null;
//        Numa nahd = null;

//        Pixaa expResult = null;
//        Pixaa result = instance.pixaaScaleToSizeVar(paas, nawd, nahd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaScaleToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixaScaleToSize() {
//        System.out.println("pixaScaleToSize");
//        Pixa pixas = null;
//        int wd = 0;
//        int hd = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaScaleToSize(pixas, wd, hd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAddBorderGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAddBorderGeneral() {
//        System.out.println("pixaAddBorderGeneral");
//        Pixa pixad = null;
//        Pixa pixas = null;
//        int left = 0;
//        int right = 0;
//        int top = 0;
//        int bot = 0;
//        int val = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaAddBorderGeneral(pixad, pixas, left, right, top, bot, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaFlattenToPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaFlattenToPixa() {
//        System.out.println("pixaaFlattenToPixa");
//        Pixaa paa = null;
//        Numa.ByReference[] pnaindex = null;
//        int copyflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaaFlattenToPixa(paa, pnaindex, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaSizeRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaSizeRange() {
//        System.out.println("pixaaSizeRange");
//        Pixaa paa = null;
//        IntBuffer pminw = null;
//        IntBuffer pminh = null;
//        IntBuffer pmaxw = null;
//        IntBuffer pmaxh = null;

//        int expResult = 0;
//        int result = instance.pixaaSizeRange(paa, pminw, pminh, pmaxw, pmaxh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaSizeRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixaSizeRange() {
//        System.out.println("pixaSizeRange");
//        Pixa pixa = null;
//        IntBuffer pminw = null;
//        IntBuffer pminh = null;
//        IntBuffer pmaxw = null;
//        IntBuffer pmaxh = null;

//        int expResult = 0;
//        int result = instance.pixaSizeRange(pixa, pminw, pminh, pmaxw, pmaxh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaClipToPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixaClipToPix() {
//        System.out.println("pixaClipToPix");
//        Pixa pixas = null;
//        Pix pixs = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaClipToPix(pixas, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetRenderingDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetRenderingDepth() {
//        System.out.println("pixaGetRenderingDepth");
//        Pixa pixa = null;
//        IntBuffer pdepth = null;

//        int expResult = 0;
//        int result = instance.pixaGetRenderingDepth(pixa, pdepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaHasColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixaHasColor() {
//        System.out.println("pixaHasColor");
//        Pixa pixa = null;
//        IntBuffer phascolor = null;

//        int expResult = 0;
//        int result = instance.pixaHasColor(pixa, phascolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAnyColormaps method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAnyColormaps() {
//        System.out.println("pixaAnyColormaps");
//        Pixa pixa = null;
//        IntBuffer phascmap = null;

//        int expResult = 0;
//        int result = instance.pixaAnyColormaps(pixa, phascmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaGetDepthInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixaGetDepthInfo() {
//        System.out.println("pixaGetDepthInfo");
//        Pixa pixa = null;
//        IntBuffer pmaxdepth = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.pixaGetDepthInfo(pixa, pmaxdepth, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertToSameDepth method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertToSameDepth() {
//        System.out.println("pixaConvertToSameDepth");
//        Pixa pixas = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaConvertToSameDepth(pixas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaEqual method, of class Leptonica.
//     */
//    @Test
//    public void testPixaEqual_5args_1() {
//        System.out.println("pixaEqual");
//        Pixa pixa1 = null;
//        Pixa pixa2 = null;
//        int maxdist = 0;
//        Numa.ByReference[] pnaindex = null;
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.pixaEqual(pixa1, pixa2, maxdist, pnaindex, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaEqual method, of class Leptonica.
//     */
//    @Test
//    public void testPixaEqual_5args_2() {
//        System.out.println("pixaEqual");
//        Pixa pixa1 = null;
//        Pixa pixa2 = null;
//        int maxdist = 0;
//        Numa.ByReference[] pnaindex = null;
//        IntByReference psame = null;

//        int expResult = 0;
//        int result = instance.pixaEqual(pixa1, pixa2, maxdist, pnaindex, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplay method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplay() {
//        System.out.println("pixaDisplay");
//        Pixa pixa = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplay(pixa, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayOnColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayOnColor() {
//        System.out.println("pixaDisplayOnColor");
//        Pixa pixa = null;
//        int w = 0;
//        int h = 0;
//        int bgcolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayOnColor(pixa, w, h, bgcolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayRandomCmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayRandomCmap() {
//        System.out.println("pixaDisplayRandomCmap");
//        Pixa pixa = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayRandomCmap(pixa, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayLinearly method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayLinearly() {
//        System.out.println("pixaDisplayLinearly");
//        Pixa pixas = null;
//        int direction = 0;
//        float scalefactor = 0.0F;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayLinearly(pixas, direction, scalefactor, background, spacing, border, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayOnLattice method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayOnLattice_5args_1() {
//        System.out.println("pixaDisplayOnLattice");
//        Pixa pixa = null;
//        int cellw = 0;
//        int cellh = 0;
//        IntBuffer pncols = null;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayOnLattice(pixa, cellw, cellh, pncols, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayOnLattice method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayOnLattice_5args_2() {
//        System.out.println("pixaDisplayOnLattice");
//        Pixa pixa = null;
//        int cellw = 0;
//        int cellh = 0;
//        IntByReference pncols = null;
//        Boxa.ByReference[] pboxa = null;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayOnLattice(pixa, cellw, cellh, pncols, pboxa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayUnsplit method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayUnsplit() {
//        System.out.println("pixaDisplayUnsplit");
//        Pixa pixa = null;
//        int nx = 0;
//        int ny = 0;
//        int borderwidth = 0;
//        int bordercolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayUnsplit(pixa, nx, ny, borderwidth, bordercolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayTiled() {
//        System.out.println("pixaDisplayTiled");
//        Pixa pixa = null;
//        int maxwidth = 0;
//        int background = 0;
//        int spacing = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayTiled(pixa, maxwidth, background, spacing);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayTiledInRows method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayTiledInRows() {
//        System.out.println("pixaDisplayTiledInRows");
//        Pixa pixa = null;
//        int outdepth = 0;
//        int maxwidth = 0;
//        float scalefactor = 0.0F;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayTiledInRows(pixa, outdepth, maxwidth, scalefactor, background, spacing, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaDisplayTiledAndScaled method, of class Leptonica.
//     */
//    @Test
//    public void testPixaDisplayTiledAndScaled() {
//        System.out.println("pixaDisplayTiledAndScaled");
//        Pixa pixa = null;
//        int outdepth = 0;
//        int tilewidth = 0;
//        int ncols = 0;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaDisplayTiledAndScaled(pixa, outdepth, tilewidth, ncols, background, spacing, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaDisplay method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaDisplay() {
//        System.out.println("pixaaDisplay");
//        Pixaa paa = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaaDisplay(paa, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaDisplayByPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaDisplayByPixa() {
//        System.out.println("pixaaDisplayByPixa");
//        Pixaa paa = null;
//        int xspace = 0;
//        int yspace = 0;
//        int maxw = 0;

//        Pix expResult = null;
//        Pix result = instance.pixaaDisplayByPixa(paa, xspace, yspace, maxw);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaaDisplayTiledAndScaled method, of class Leptonica.
//     */
//    @Test
//    public void testPixaaDisplayTiledAndScaled() {
//        System.out.println("pixaaDisplayTiledAndScaled");
//        Pixaa paa = null;
//        int outdepth = 0;
//        int tilewidth = 0;
//        int ncols = 0;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaaDisplayTiledAndScaled(paa, outdepth, tilewidth, ncols, background, spacing, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertTo1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertTo1() {
//        System.out.println("pixaConvertTo1");
//        Pixa pixas = null;
//        int thresh = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaConvertTo1(pixas, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertTo8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertTo8() {
//        System.out.println("pixaConvertTo8");
//        Pixa pixas = null;
//        int cmapflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaConvertTo8(pixas, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertTo8Color method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertTo8Color() {
//        System.out.println("pixaConvertTo8Color");
//        Pixa pixas = null;
//        int dither = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaConvertTo8Color(pixas, dither);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaConvertTo32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixaConvertTo32() {
//        System.out.println("pixaConvertTo32");
//        Pixa pixas = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaConvertTo32(pixas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToNUpFiles method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToNUpFiles() {
//        System.out.println("convertToNUpFiles");
//        String dir = "";
//        String substr = "";
//        int nx = 0;
//        int ny = 0;
//        int tw = 0;
//        int spacing = 0;
//        int border = 0;
//        String fontdir = "";
//        String outdir = "";

//        int expResult = 0;
//        int result = instance.convertToNUpFiles(dir, substr, nx, ny, tw, spacing, border, fontdir, outdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToNUpPixa method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToNUpPixa() {
//        System.out.println("convertToNUpPixa");
//        String dir = "";
//        String substr = "";
//        int nx = 0;
//        int ny = 0;
//        int tw = 0;
//        int spacing = 0;
//        int border = 0;
//        String fontdir = "";

//        Pixa expResult = null;
//        Pixa result = instance.convertToNUpPixa(dir, substr, nx, ny, tw, spacing, border, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPmsCreate() {
//        System.out.println("pmsCreate");
//        NativeSize minsize = null;
//        NativeSize smallest = null;
//        Numa numalloc = null;
//        String logfile = "";

//        int expResult = 0;
//        int result = instance.pmsCreate(minsize, smallest, numalloc, logfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPmsDestroy() {
//        System.out.println("pmsDestroy");

//        instance.pmsDestroy();
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsCustomAlloc method, of class Leptonica.
//     */
//    @Test
//    public void testPmsCustomAlloc() {
//        System.out.println("pmsCustomAlloc");
//        NativeSize nbytes = null;

//        Pointer expResult = null;
//        Pointer result = instance.pmsCustomAlloc(nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsCustomDealloc method, of class Leptonica.
//     */
//    @Test
//    public void testPmsCustomDealloc() {
//        System.out.println("pmsCustomDealloc");
//        Pointer data = null;

//        instance.pmsCustomDealloc(data);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsGetAlloc method, of class Leptonica.
//     */
//    @Test
//    public void testPmsGetAlloc() {
//        System.out.println("pmsGetAlloc");
//        NativeSize nbytes = null;

//        Pointer expResult = null;
//        Pointer result = instance.pmsGetAlloc(nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsGetLevelForAlloc method, of class Leptonica.
//     */
//    @Test
//    public void testPmsGetLevelForAlloc() {
//        System.out.println("pmsGetLevelForAlloc");
//        NativeSize nbytes = null;
//        IntBuffer plevel = null;

//        int expResult = 0;
//        int result = instance.pmsGetLevelForAlloc(nbytes, plevel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsGetLevelForDealloc method, of class Leptonica.
//     */
//    @Test
//    public void testPmsGetLevelForDealloc() {
//        System.out.println("pmsGetLevelForDealloc");
//        Pointer data = null;
//        IntBuffer plevel = null;

//        int expResult = 0;
//        int result = instance.pmsGetLevelForDealloc(data, plevel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pmsLogInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPmsLogInfo() {
//        System.out.println("pmsLogInfo");

//        instance.pmsLogInfo();
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddConstantGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddConstantGray() {
//        System.out.println("pixAddConstantGray");
//        Pix pixs = null;
//        int val = 0;

//        int expResult = 0;
//        int result = instance.pixAddConstantGray(pixs, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMultConstantGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixMultConstantGray() {
//        System.out.println("pixMultConstantGray");
//        Pix pixs = null;
//        float val = 0.0F;

//        int expResult = 0;
//        int result = instance.pixMultConstantGray(pixs, val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddGray() {
//        System.out.println("pixAddGray");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixAddGray(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSubtractGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixSubtractGray() {
//        System.out.println("pixSubtractGray");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixSubtractGray(pixd, pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThresholdToValue method, of class Leptonica.
//     */
//    @Test
//    public void testPixThresholdToValue() {
//        System.out.println("pixThresholdToValue");
//        Pix pixd = null;
//        Pix pixs = null;
//        int threshval = 0;
//        int setval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThresholdToValue(pixd, pixs, threshval, setval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixInitAccumulate method, of class Leptonica.
//     */
//    @Test
//    public void testPixInitAccumulate() {
//        System.out.println("pixInitAccumulate");
//        int w = 0;
//        int h = 0;
//        int offset = 0;

//        Pix expResult = null;
//        Pix result = instance.pixInitAccumulate(w, h, offset);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFinalAccumulate method, of class Leptonica.
//     */
//    @Test
//    public void testPixFinalAccumulate() {
//        System.out.println("pixFinalAccumulate");
//        Pix pixs = null;
//        int offset = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFinalAccumulate(pixs, offset, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFinalAccumulateThreshold method, of class Leptonica.
//     */
//    @Test
//    public void testPixFinalAccumulateThreshold() {
//        System.out.println("pixFinalAccumulateThreshold");
//        Pix pixs = null;
//        int offset = 0;
//        int threshold = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFinalAccumulateThreshold(pixs, offset, threshold);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAccumulate method, of class Leptonica.
//     */
//    @Test
//    public void testPixAccumulate() {
//        System.out.println("pixAccumulate");
//        Pix pixd = null;
//        Pix pixs = null;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixAccumulate(pixd, pixs, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMultConstAccumulate method, of class Leptonica.
//     */
//    @Test
//    public void testPixMultConstAccumulate() {
//        System.out.println("pixMultConstAccumulate");
//        Pix pixs = null;
//        float factor = 0.0F;
//        int offset = 0;

//        int expResult = 0;
//        int result = instance.pixMultConstAccumulate(pixs, factor, offset);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAbsDifference method, of class Leptonica.
//     */
//    @Test
//    public void testPixAbsDifference() {
//        System.out.println("pixAbsDifference");
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixAbsDifference(pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddRGB() {
//        System.out.println("pixAddRGB");
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixAddRGB(pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMinOrMax method, of class Leptonica.
//     */
//    @Test
//    public void testPixMinOrMax() {
//        System.out.println("pixMinOrMax");
//        Pix pixd = null;
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMinOrMax(pixd, pixs1, pixs2, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMaxDynamicRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixMaxDynamicRange() {
//        System.out.println("pixMaxDynamicRange");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMaxDynamicRange(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeLogBase2Tab method, of class Leptonica.
//     */
//    @Test
//    public void testMakeLogBase2Tab() {
//        System.out.println("makeLogBase2Tab");

//        FloatByReference expResult = null;
//        FloatByReference result = instance.makeLogBase2Tab();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getLogBase2 method, of class Leptonica.
//     */
//    @Test
//    public void testGetLogBase2() {
//        System.out.println("getLogBase2");
//        int val = 0;
//        FloatBuffer logtab = null;

//        float expResult = 0.0F;
//        float result = instance.getLogBase2(val, logtab);
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompCreateFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompCreateFromPix() {
//        System.out.println("pixcompCreateFromPix");
//        Pix pix = null;
//        int comptype = 0;

//        PixComp expResult = null;
//        PixComp result = instance.pixcompCreateFromPix(pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompCreateFromString method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompCreateFromString() {
//        System.out.println("pixcompCreateFromString");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        int copyflag = 0;

//        PixComp expResult = null;
//        PixComp result = instance.pixcompCreateFromString(data, size, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompCreateFromFile method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompCreateFromFile() {
//        System.out.println("pixcompCreateFromFile");
//        String filename = "";
//        int comptype = 0;

//        PixComp expResult = null;
//        PixComp result = instance.pixcompCreateFromFile(filename, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompDestroy() {
//        System.out.println("pixcompDestroy");
//        PixComp.ByReference[] ppixc = null;

//        instance.pixcompDestroy(ppixc);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompGetDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompGetDimensions() {
//        System.out.println("pixcompGetDimensions");
//        PixComp pixc = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;

//        int expResult = 0;
//        int result = instance.pixcompGetDimensions(pixc, pw, ph, pd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompDetermineFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompDetermineFormat() {
//        System.out.println("pixcompDetermineFormat");
//        int comptype = 0;
//        int d = 0;
//        int cmapflag = 0;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.pixcompDetermineFormat(comptype, d, cmapflag, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixCreateFromPixcomp method, of class Leptonica.
//     */
//    @Test
//    public void testPixCreateFromPixcomp() {
//        System.out.println("pixCreateFromPixcomp");
//        PixComp pixc = null;

//        Pix expResult = null;
//        Pix result = instance.pixCreateFromPixcomp(pixc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompCreate() {
//        System.out.println("pixacompCreate");
//        int n = 0;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompCreateWithInit method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompCreateWithInit() {
//        System.out.println("pixacompCreateWithInit");
//        int n = 0;
//        int offset = 0;
//        Pix pix = null;
//        int comptype = 0;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompCreateWithInit(n, offset, pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompCreateFromPixa method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompCreateFromPixa() {
//        System.out.println("pixacompCreateFromPixa");
//        Pixa pixa = null;
//        int comptype = 0;
//        int accesstype = 0;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompCreateFromPixa(pixa, comptype, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompCreateFromFiles method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompCreateFromFiles() {
//        System.out.println("pixacompCreateFromFiles");
//        String dirname = "";
//        String substr = "";
//        int comptype = 0;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompCreateFromFiles(dirname, substr, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompCreateFromSA method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompCreateFromSA() {
//        System.out.println("pixacompCreateFromSA");
//        Sarray sa = null;
//        int comptype = 0;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompCreateFromSA(sa, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompDestroy() {
//        System.out.println("pixacompDestroy");
//        PixaComp.ByReference[] ppixac = null;

//        instance.pixacompDestroy(ppixac);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompAddPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompAddPix() {
//        System.out.println("pixacompAddPix");
//        PixaComp pixac = null;
//        Pix pix = null;
//        int comptype = 0;

//        int expResult = 0;
//        int result = instance.pixacompAddPix(pixac, pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompAddPixcomp method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompAddPixcomp() {
//        System.out.println("pixacompAddPixcomp");
//        PixaComp pixac = null;
//        PixComp pixc = null;

//        int expResult = 0;
//        int result = instance.pixacompAddPixcomp(pixac, pixc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompReplacePix method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompReplacePix() {
//        System.out.println("pixacompReplacePix");
//        PixaComp pixac = null;
//        int index = 0;
//        Pix pix = null;
//        int comptype = 0;

//        int expResult = 0;
//        int result = instance.pixacompReplacePix(pixac, index, pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompReplacePixcomp method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompReplacePixcomp() {
//        System.out.println("pixacompReplacePixcomp");
//        PixaComp pixac = null;
//        int index = 0;
//        PixComp pixc = null;

//        int expResult = 0;
//        int result = instance.pixacompReplacePixcomp(pixac, index, pixc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompAddBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompAddBox() {
//        System.out.println("pixacompAddBox");
//        PixaComp pixac = null;
//        Box box = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.pixacompAddBox(pixac, box, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetCount() {
//        System.out.println("pixacompGetCount");
//        PixaComp pixac = null;

//        int expResult = 0;
//        int result = instance.pixacompGetCount(pixac);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetPixcomp method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetPixcomp() {
//        System.out.println("pixacompGetPixcomp");
//        PixaComp pixac = null;
//        int index = 0;

//        PixComp expResult = null;
//        PixComp result = instance.pixacompGetPixcomp(pixac, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetPix method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetPix() {
//        System.out.println("pixacompGetPix");
//        PixaComp pixac = null;
//        int index = 0;

//        Pix expResult = null;
//        Pix result = instance.pixacompGetPix(pixac, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetPixDimensions method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetPixDimensions() {
//        System.out.println("pixacompGetPixDimensions");
//        PixaComp pixac = null;
//        int index = 0;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;

//        int expResult = 0;
//        int result = instance.pixacompGetPixDimensions(pixac, index, pw, ph, pd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetBoxa method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetBoxa() {
//        System.out.println("pixacompGetBoxa");
//        PixaComp pixac = null;
//        int accesstype = 0;

//        Boxa expResult = null;
//        Boxa result = instance.pixacompGetBoxa(pixac, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetBoxaCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetBoxaCount() {
//        System.out.println("pixacompGetBoxaCount");
//        PixaComp pixac = null;

//        int expResult = 0;
//        int result = instance.pixacompGetBoxaCount(pixac);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetBox method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetBox() {
//        System.out.println("pixacompGetBox");
//        PixaComp pixac = null;
//        int index = 0;
//        int accesstype = 0;

//        Box expResult = null;
//        Box result = instance.pixacompGetBox(pixac, index, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetBoxGeometry method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetBoxGeometry() {
//        System.out.println("pixacompGetBoxGeometry");
//        PixaComp pixac = null;
//        int index = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.pixacompGetBoxGeometry(pixac, index, px, py, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompGetOffset method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompGetOffset() {
//        System.out.println("pixacompGetOffset");
//        PixaComp pixac = null;

//        int expResult = 0;
//        int result = instance.pixacompGetOffset(pixac);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompSetOffset method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompSetOffset() {
//        System.out.println("pixacompSetOffset");
//        PixaComp pixac = null;
//        int offset = 0;

//        int expResult = 0;
//        int result = instance.pixacompSetOffset(pixac, offset);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaCreateFromPixacomp method, of class Leptonica.
//     */
//    @Test
//    public void testPixaCreateFromPixacomp() {
//        System.out.println("pixaCreateFromPixacomp");
//        PixaComp pixac = null;
//        int accesstype = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaCreateFromPixacomp(pixac, accesstype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompRead method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompRead() {
//        System.out.println("pixacompRead");
//        String filename = "";

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompReadStream() {
//        System.out.println("pixacompReadStream");
//        PointerByReference fp = null;

//        PixaComp expResult = null;
//        PixaComp result = instance.pixacompReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompWrite() {
//        System.out.println("pixacompWrite");
//        String filename = "";
//        PixaComp pixac = null;

//        int expResult = 0;
//        int result = instance.pixacompWrite(filename, pixac);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompWriteStream() {
//        System.out.println("pixacompWriteStream");
//        PointerByReference fp = null;
//        PixaComp pixac = null;

//        int expResult = 0;
//        int result = instance.pixacompWriteStream(fp, pixac);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompConvertToPdf method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompConvertToPdf() {
//        System.out.println("pixacompConvertToPdf");
//        PixaComp pixac = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixacompConvertToPdf(pixac, res, scalefactor, type, quality, title, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompConvertToPdfData method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompConvertToPdfData() {
//        System.out.println("pixacompConvertToPdfData");
//        PixaComp pixac = null;
//        int res = 0;
//        float scalefactor = 0.0F;
//        int type = 0;
//        int quality = 0;
//        String title = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.pixacompConvertToPdfData(pixac, res, scalefactor, type, quality, title, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompWriteStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompWriteStreamInfo_3args_1() {
//        System.out.println("pixacompWriteStreamInfo");
//        PointerByReference fp = null;
//        PixaComp pixac = null;
//        String text = "";

//        int expResult = 0;
//        int result = instance.pixacompWriteStreamInfo(fp, pixac, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompWriteStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompWriteStreamInfo_3args_2() {
//        System.out.println("pixacompWriteStreamInfo");
//        PointerByReference fp = null;
//        PixaComp pixac = null;
//        Pointer text = null;

//        int expResult = 0;
//        int result = instance.pixacompWriteStreamInfo(fp, pixac, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompWriteStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompWriteStreamInfo_3args_1() {
//        System.out.println("pixcompWriteStreamInfo");
//        PointerByReference fp = null;
//        PixComp pixc = null;
//        String text = "";

//        int expResult = 0;
//        int result = instance.pixcompWriteStreamInfo(fp, pixc, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixcompWriteStreamInfo method, of class Leptonica.
//     */
//    @Test
//    public void testPixcompWriteStreamInfo_3args_2() {
//        System.out.println("pixcompWriteStreamInfo");
//        PointerByReference fp = null;
//        PixComp pixc = null;
//        Pointer text = null;

//        int expResult = 0;
//        int result = instance.pixcompWriteStreamInfo(fp, pixc, text);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixacompDisplayTiledAndScaled method, of class Leptonica.
//     */
//    @Test
//    public void testPixacompDisplayTiledAndScaled() {
//        System.out.println("pixacompDisplayTiledAndScaled");
//        PixaComp pixac = null;
//        int outdepth = 0;
//        int tilewidth = 0;
//        int ncols = 0;
//        int background = 0;
//        int spacing = 0;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixacompDisplayTiledAndScaled(pixac, outdepth, tilewidth, ncols, background, spacing, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixThreshold8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixThreshold8() {
//        System.out.println("pixThreshold8");
//        Pix pixs = null;
//        int d = 0;
//        int nlevels = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixThreshold8(pixs, d, nlevels, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveColormapGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveColormapGeneral() {
//        System.out.println("pixRemoveColormapGeneral");
//        Pix pixs = null;
//        int type = 0;
//        int ifnocmap = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveColormapGeneral(pixs, type, ifnocmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveColormap() {
//        System.out.println("pixRemoveColormap");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveColormap(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddGrayColormap8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddGrayColormap8() {
//        System.out.println("pixAddGrayColormap8");
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.pixAddGrayColormap8(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddMinimalGrayColormap8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddMinimalGrayColormap8() {
//        System.out.println("pixAddMinimalGrayColormap8");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixAddMinimalGrayColormap8(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToLuminance method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToLuminance() {
//        System.out.println("pixConvertRGBToLuminance");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToLuminance(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToGray() {
//        System.out.println("pixConvertRGBToGray");
//        Pix pixs = null;
//        float rwt = 0.0F;
//        float gwt = 0.0F;
//        float bwt = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToGray(pixs, rwt, gwt, bwt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToGrayFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToGrayFast() {
//        System.out.println("pixConvertRGBToGrayFast");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToGrayFast(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToGrayMinMax method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToGrayMinMax() {
//        System.out.println("pixConvertRGBToGrayMinMax");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToGrayMinMax(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToGraySatBoost method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToGraySatBoost() {
//        System.out.println("pixConvertRGBToGraySatBoost");
//        Pix pixs = null;
//        int refval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToGraySatBoost(pixs, refval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertGrayToColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertGrayToColormap() {
//        System.out.println("pixConvertGrayToColormap");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertGrayToColormap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertGrayToColormap8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertGrayToColormap8() {
//        System.out.println("pixConvertGrayToColormap8");
//        Pix pixs = null;
//        int mindepth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertGrayToColormap8(pixs, mindepth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixColorizeGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixColorizeGray() {
//        System.out.println("pixColorizeGray");
//        Pix pixs = null;
//        int color = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixColorizeGray(pixs, color, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertRGBToColormap method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertRGBToColormap() {
//        System.out.println("pixConvertRGBToColormap");
//        Pix pixs = null;
//        int ditherflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertRGBToColormap(pixs, ditherflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuantizeIfFewColors method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuantizeIfFewColors() {
//        System.out.println("pixQuantizeIfFewColors");
//        Pix pixs = null;
//        int maxcolors = 0;
//        int mingraycolors = 0;
//        int octlevel = 0;
//        Pix.ByReference[] ppixd = null;

//        int expResult = 0;
//        int result = instance.pixQuantizeIfFewColors(pixs, maxcolors, mingraycolors, octlevel, ppixd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert16To8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert16To8() {
//        System.out.println("pixConvert16To8");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert16To8(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertGrayToFalseColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertGrayToFalseColor() {
//        System.out.println("pixConvertGrayToFalseColor");
//        Pix pixs = null;
//        float gamma = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixConvertGrayToFalseColor(pixs, gamma);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixUnpackBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixUnpackBinary() {
//        System.out.println("pixUnpackBinary");
//        Pix pixs = null;
//        int depth = 0;
//        int invert = 0;

//        Pix expResult = null;
//        Pix result = instance.pixUnpackBinary(pixs, depth, invert);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To16 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To16() {
//        System.out.println("pixConvert1To16");
//        Pix pixd = null;
//        Pix pixs = null;
//        short val0 = 0;
//        short val1 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To16(pixd, pixs, val0, val1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To32() {
//        System.out.println("pixConvert1To32");
//        Pix pixd = null;
//        Pix pixs = null;
//        int val0 = 0;
//        int val1 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To32(pixd, pixs, val0, val1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To2Cmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To2Cmap() {
//        System.out.println("pixConvert1To2Cmap");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To2Cmap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To2() {
//        System.out.println("pixConvert1To2");
//        Pix pixd = null;
//        Pix pixs = null;
//        int val0 = 0;
//        int val1 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To2(pixd, pixs, val0, val1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To4Cmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To4Cmap() {
//        System.out.println("pixConvert1To4Cmap");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To4Cmap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To4 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To4() {
//        System.out.println("pixConvert1To4");
//        Pix pixd = null;
//        Pix pixs = null;
//        int val0 = 0;
//        int val1 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To4(pixd, pixs, val0, val1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert1To8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert1To8() {
//        System.out.println("pixConvert1To8");
//        Pix pixd = null;
//        Pix pixs = null;
//        byte val0 = 0;
//        byte val1 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert1To8(pixd, pixs, val0, val1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert2To8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert2To8() {
//        System.out.println("pixConvert2To8");
//        Pix pixs = null;
//        byte val0 = 0;
//        byte val1 = 0;
//        byte val2 = 0;
//        byte val3 = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert2To8(pixs, val0, val1, val2, val3, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert4To8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert4To8() {
//        System.out.println("pixConvert4To8");
//        Pix pixs = null;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert4To8(pixs, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert8To16 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert8To16() {
//        System.out.println("pixConvert8To16");
//        Pix pixs = null;
//        int leftshift = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvert8To16(pixs, leftshift);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo1() {
//        System.out.println("pixConvertTo1");
//        Pix pixs = null;
//        int threshold = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo1(pixs, threshold);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo1BySampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo1BySampling() {
//        System.out.println("pixConvertTo1BySampling");
//        Pix pixs = null;
//        int factor = 0;
//        int threshold = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo1BySampling(pixs, factor, threshold);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo8() {
//        System.out.println("pixConvertTo8");
//        Pix pixs = null;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo8(pixs, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo8BySampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo8BySampling() {
//        System.out.println("pixConvertTo8BySampling");
//        Pix pixs = null;
//        int factor = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo8BySampling(pixs, factor, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo8Color method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo8Color() {
//        System.out.println("pixConvertTo8Color");
//        Pix pixs = null;
//        int dither = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo8Color(pixs, dither);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo16 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo16() {
//        System.out.println("pixConvertTo16");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo16(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo32() {
//        System.out.println("pixConvertTo32");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo32(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo32BySampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo32BySampling() {
//        System.out.println("pixConvertTo32BySampling");
//        Pix pixs = null;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo32BySampling(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert8To32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert8To32() {
//        System.out.println("pixConvert8To32");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvert8To32(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertTo8Or32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertTo8Or32() {
//        System.out.println("pixConvertTo8Or32");
//        Pix pixs = null;
//        int copyflag = 0;
//        int warnflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertTo8Or32(pixs, copyflag, warnflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert24To32 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert24To32() {
//        System.out.println("pixConvert24To32");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvert24To32(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvert32To24 method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvert32To24() {
//        System.out.println("pixConvert32To24");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvert32To24(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveAlpha() {
//        System.out.println("pixRemoveAlpha");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveAlpha(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddAlphaTo1bpp method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddAlphaTo1bpp() {
//        System.out.println("pixAddAlphaTo1bpp");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixAddAlphaTo1bpp(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertLossless method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertLossless() {
//        System.out.println("pixConvertLossless");
//        Pix pixs = null;
//        int d = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertLossless(pixs, d);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertForPSWrap method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertForPSWrap() {
//        System.out.println("pixConvertForPSWrap");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixConvertForPSWrap(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertToSubpixelRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertToSubpixelRGB() {
//        System.out.println("pixConvertToSubpixelRGB");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        int order = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertToSubpixelRGB(pixs, scalex, scaley, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertGrayToSubpixelRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertGrayToSubpixelRGB() {
//        System.out.println("pixConvertGrayToSubpixelRGB");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        int order = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertGrayToSubpixelRGB(pixs, scalex, scaley, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConvertColorToSubpixelRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixConvertColorToSubpixelRGB() {
//        System.out.println("pixConvertColorToSubpixelRGB");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        int order = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConvertColorToSubpixelRGB(pixs, scalex, scaley, order);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConnCompTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixConnCompTransform() {
//        System.out.println("pixConnCompTransform");
//        Pix pixs = null;
//        int connect = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConnCompTransform(pixs, connect, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixConnCompAreaTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixConnCompAreaTransform() {
//        System.out.println("pixConnCompAreaTransform");
//        Pix pixs = null;
//        int connect = 0;

//        Pix expResult = null;
//        Pix result = instance.pixConnCompAreaTransform(pixs, connect);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixLocToColorTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixLocToColorTransform() {
//        System.out.println("pixLocToColorTransform");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixLocToColorTransform(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingCreate() {
//        System.out.println("pixTilingCreate");
//        Pix pixs = null;
//        int nx = 0;
//        int ny = 0;
//        int w = 0;
//        int h = 0;
//        int xoverlap = 0;
//        int yoverlap = 0;

//        PixTiling expResult = null;
//        PixTiling result = instance.pixTilingCreate(pixs, nx, ny, w, h, xoverlap, yoverlap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingDestroy() {
//        System.out.println("pixTilingDestroy");
//        PixTiling.ByReference[] ppt = null;

//        instance.pixTilingDestroy(ppt);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingGetCount() {
//        System.out.println("pixTilingGetCount");
//        PixTiling pt = null;
//        IntBuffer pnx = null;
//        IntBuffer pny = null;

//        int expResult = 0;
//        int result = instance.pixTilingGetCount(pt, pnx, pny);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingGetSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingGetSize() {
//        System.out.println("pixTilingGetSize");
//        PixTiling pt = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;

//        int expResult = 0;
//        int result = instance.pixTilingGetSize(pt, pw, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingGetTile method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingGetTile() {
//        System.out.println("pixTilingGetTile");
//        PixTiling pt = null;
//        int i = 0;
//        int j = 0;

//        Pix expResult = null;
//        Pix result = instance.pixTilingGetTile(pt, i, j);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingNoStripOnPaint method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingNoStripOnPaint() {
//        System.out.println("pixTilingNoStripOnPaint");
//        PixTiling pt = null;

//        int expResult = 0;
//        int result = instance.pixTilingNoStripOnPaint(pt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTilingPaintTile method, of class Leptonica.
//     */
//    @Test
//    public void testPixTilingPaintTile() {
//        System.out.println("pixTilingPaintTile");
//        Pix pixd = null;
//        int i = 0;
//        int j = 0;
//        Pix pixs = null;
//        PixTiling pt = null;

//        int expResult = 0;
//        int result = instance.pixTilingPaintTile(pixd, i, j, pixs, pt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamPng method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamPng() {
//        System.out.println("pixReadStreamPng");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamPng(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderPng method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderPng() {
//        System.out.println("readHeaderPng");
//        String filename = "";
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.readHeaderPng(filename, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderPng method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderPng_6args_1() {
//        System.out.println("freadHeaderPng");
//        PointerByReference fp = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.freadHeaderPng(fp, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderPng method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderPng_6args_2() {
//        System.out.println("freadHeaderPng");
//        PointerByReference fp = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        IntByReference pbps = null;
//        IntByReference pspp = null;
//        IntByReference piscmap = null;

//        int expResult = 0;
//        int result = instance.freadHeaderPng(fp, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemPng method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemPng() {
//        System.out.println("readHeaderMemPng");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemPng(data, size, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetPngResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetPngResolution_3args_1() {
//        System.out.println("fgetPngResolution");
//        PointerByReference fp = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.fgetPngResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fgetPngResolution method, of class Leptonica.
//     */
//    @Test
//    public void testFgetPngResolution_3args_2() {
//        System.out.println("fgetPngResolution");
//        PointerByReference fp = null;
//        IntByReference pxres = null;
//        IntByReference pyres = null;

//        int expResult = 0;
//        int result = instance.fgetPngResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of isPngInterlaced method, of class Leptonica.
//     */
//    @Test
//    public void testIsPngInterlaced() {
//        System.out.println("isPngInterlaced");
//        String filename = "";
//        IntBuffer pinterlaced = null;

//        int expResult = 0;
//        int result = instance.isPngInterlaced(filename, pinterlaced);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWritePng method, of class Leptonica.
//     */
//    @Test
//    public void testPixWritePng() {
//        System.out.println("pixWritePng");
//        String filename = "";
//        Pix pix = null;
//        float gamma = 0.0F;

//        int expResult = 0;
//        int result = instance.pixWritePng(filename, pix, gamma);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamPng method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamPng() {
//        System.out.println("pixWriteStreamPng");
//        PointerByReference fp = null;
//        Pix pix = null;
//        float gamma = 0.0F;

//        int expResult = 0;
//        int result = instance.pixWriteStreamPng(fp, pix, gamma);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetZlibCompression method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetZlibCompression() {
//        System.out.println("pixSetZlibCompression");
//        Pix pix = null;
//        int compval = 0;

//        int expResult = 0;
//        int result = instance.pixSetZlibCompression(pix, compval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_pngSetReadStrip16To8 method, of class Leptonica.
//     */
//    @Test
//    public void testL_pngSetReadStrip16To8() {
//        System.out.println("l_pngSetReadStrip16To8");
//        int flag = 0;

//        instance.l_pngSetReadStrip16To8(flag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemPng method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemPng() {
//        System.out.println("pixReadMemPng");
//        ByteBuffer cdata = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemPng(cdata, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemPng method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemPng() {
//        System.out.println("pixWriteMemPng");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        float gamma = 0.0F;

//        int expResult = 0;
//        int result = instance.pixWriteMemPng(pdata, psize, pix, gamma);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamPnm method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamPnm() {
//        System.out.println("pixReadStreamPnm");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamPnm(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderPnm method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderPnm() {
//        System.out.println("readHeaderPnm");
//        String filename = "";
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;
//        IntBuffer ptype = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderPnm(filename, pw, ph, pd, ptype, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderPnm method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderPnm_7args_1() {
//        System.out.println("freadHeaderPnm");
//        PointerByReference fp = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;
//        IntBuffer ptype = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.freadHeaderPnm(fp, pw, ph, pd, ptype, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderPnm method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderPnm_7args_2() {
//        System.out.println("freadHeaderPnm");
//        PointerByReference fp = null;
//        IntByReference pw = null;
//        IntByReference ph = null;
//        IntByReference pd = null;
//        IntByReference ptype = null;
//        IntByReference pbps = null;
//        IntByReference pspp = null;

//        int expResult = 0;
//        int result = instance.freadHeaderPnm(fp, pw, ph, pd, ptype, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamPnm method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamPnm() {
//        System.out.println("pixWriteStreamPnm");
//        PointerByReference fp = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamPnm(fp, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamAsciiPnm method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamAsciiPnm() {
//        System.out.println("pixWriteStreamAsciiPnm");
//        PointerByReference fp = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamAsciiPnm(fp, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemPnm method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemPnm() {
//        System.out.println("pixReadMemPnm");
//        ByteBuffer cdata = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemPnm(cdata, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemPnm method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemPnm() {
//        System.out.println("readHeaderMemPnm");
//        ByteBuffer cdata = null;
//        NativeSize size = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pd = null;
//        IntBuffer ptype = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemPnm(cdata, size, pw, ph, pd, ptype, pbps, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemPnm method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemPnm() {
//        System.out.println("pixWriteMemPnm");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteMemPnm(pdata, psize, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectiveSampledPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectiveSampledPta() {
//        System.out.println("pixProjectiveSampledPta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectiveSampledPta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectiveSampled method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectiveSampled() {
//        System.out.println("pixProjectiveSampled");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectiveSampled(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectivePta method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectivePta() {
//        System.out.println("pixProjectivePta");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectivePta(pixs, ptad, ptas, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjective method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjective() {
//        System.out.println("pixProjective");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjective(pixs, vc, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectivePtaColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectivePtaColor() {
//        System.out.println("pixProjectivePtaColor");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectivePtaColor(pixs, ptad, ptas, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectiveColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectiveColor() {
//        System.out.println("pixProjectiveColor");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectiveColor(pixs, vc, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectivePtaGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectivePtaGray() {
//        System.out.println("pixProjectivePtaGray");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectivePtaGray(pixs, ptad, ptas, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectiveGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectiveGray() {
//        System.out.println("pixProjectiveGray");
//        Pix pixs = null;
//        FloatBuffer vc = null;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectiveGray(pixs, vc, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProjectivePtaWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixProjectivePtaWithAlpha() {
//        System.out.println("pixProjectivePtaWithAlpha");
//        Pix pixs = null;
//        Pta ptad = null;
//        Pta ptas = null;
//        Pix pixg = null;
//        float fract = 0.0F;
//        int border = 0;

//        Pix expResult = null;
//        Pix result = instance.pixProjectivePtaWithAlpha(pixs, ptad, ptas, pixg, fract, border);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getProjectiveXformCoeffs method, of class Leptonica.
//     */
//    @Test
//    public void testGetProjectiveXformCoeffs() {
//        System.out.println("getProjectiveXformCoeffs");
//        Pta ptas = null;
//        Pta ptad = null;
//        PointerByReference pvc = null;

//        int expResult = 0;
//        int result = instance.getProjectiveXformCoeffs(ptas, ptad, pvc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of projectiveXformSampledPt method, of class Leptonica.
//     */
//    @Test
//    public void testProjectiveXformSampledPt() {
//        System.out.println("projectiveXformSampledPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer pxp = null;
//        IntBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.projectiveXformSampledPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of projectiveXformPt method, of class Leptonica.
//     */
//    @Test
//    public void testProjectiveXformPt() {
//        System.out.println("projectiveXformPt");
//        FloatBuffer vc = null;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pxp = null;
//        FloatBuffer pyp = null;

//        int expResult = 0;
//        int result = instance.projectiveXformPt(vc, x, y, pxp, pyp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFilesToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFilesToPS() {
//        System.out.println("convertFilesToPS");
//        String dirin = "";
//        String substr = "";
//        int res = 0;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertFilesToPS(dirin, substr, res, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayConvertFilesToPS method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayConvertFilesToPS() {
//        System.out.println("sarrayConvertFilesToPS");
//        Sarray sa = null;
//        int res = 0;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.sarrayConvertFilesToPS(sa, res, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFilesFittedToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFilesFittedToPS() {
//        System.out.println("convertFilesFittedToPS");
//        String dirin = "";
//        String substr = "";
//        float xpts = 0.0F;
//        float ypts = 0.0F;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertFilesFittedToPS(dirin, substr, xpts, ypts, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayConvertFilesFittedToPS method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayConvertFilesFittedToPS() {
//        System.out.println("sarrayConvertFilesFittedToPS");
//        Sarray sa = null;
//        float xpts = 0.0F;
//        float ypts = 0.0F;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.sarrayConvertFilesFittedToPS(sa, xpts, ypts, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of writeImageCompressedToPSFile method, of class Leptonica.
//     */
//    @Test
//    public void testWriteImageCompressedToPSFile() {
//        System.out.println("writeImageCompressedToPSFile");
//        String filein = "";
//        String fileout = "";
//        int res = 0;
//        IntBuffer pfirstfile = null;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.writeImageCompressedToPSFile(filein, fileout, res, pfirstfile, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertSegmentedPagesToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertSegmentedPagesToPS() {
//        System.out.println("convertSegmentedPagesToPS");
//        String pagedir = "";
//        String pagestr = "";
//        int page_numpre = 0;
//        String maskdir = "";
//        String maskstr = "";
//        int mask_numpre = 0;
//        int numpost = 0;
//        int maxnum = 0;
//        float textscale = 0.0F;
//        float imagescale = 0.0F;
//        int threshold = 0;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertSegmentedPagesToPS(pagedir, pagestr, page_numpre, maskdir, maskstr, mask_numpre, numpost, maxnum, textscale, imagescale, threshold, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteSegmentedPageToPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteSegmentedPageToPS() {
//        System.out.println("pixWriteSegmentedPageToPS");
//        Pix pixs = null;
//        Pix pixm = null;
//        float textscale = 0.0F;
//        float imagescale = 0.0F;
//        int threshold = 0;
//        int pageno = 0;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixWriteSegmentedPageToPS(pixs, pixm, textscale, imagescale, threshold, pageno, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMixedToPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMixedToPS() {
//        System.out.println("pixWriteMixedToPS");
//        Pix pixb = null;
//        Pix pixc = null;
//        float scale = 0.0F;
//        int pageno = 0;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixWriteMixedToPS(pixb, pixc, scale, pageno, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertToPSEmbed method, of class Leptonica.
//     */
//    @Test
//    public void testConvertToPSEmbed() {
//        System.out.println("convertToPSEmbed");
//        String filein = "";
//        String fileout = "";
//        int level = 0;

//        int expResult = 0;
//        int result = instance.convertToPSEmbed(filein, fileout, level);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaWriteCompressedToPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixaWriteCompressedToPS() {
//        System.out.println("pixaWriteCompressedToPS");
//        Pixa pixa = null;
//        String fileout = "";
//        int res = 0;
//        int level = 0;

//        int expResult = 0;
//        int result = instance.pixaWriteCompressedToPS(pixa, fileout, res, level);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWritePSEmbed method, of class Leptonica.
//     */
//    @Test
//    public void testPixWritePSEmbed() {
//        System.out.println("pixWritePSEmbed");
//        String filein = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.pixWritePSEmbed(filein, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamPS() {
//        System.out.println("pixWriteStreamPS");
//        PointerByReference fp = null;
//        Pix pix = null;
//        Box box = null;
//        int res = 0;
//        float scale = 0.0F;

//        int expResult = 0;
//        int result = instance.pixWriteStreamPS(fp, pix, box, res, scale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStringPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStringPS() {
//        System.out.println("pixWriteStringPS");
//        Pix pixs = null;
//        Box box = null;
//        int res = 0;
//        float scale = 0.0F;

//        Pointer expResult = null;
//        Pointer result = instance.pixWriteStringPS(pixs, box, res, scale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generateUncompressedPS method, of class Leptonica.
//     */
//    @Test
//    public void testGenerateUncompressedPS() {
//        System.out.println("generateUncompressedPS");
//        ByteBuffer hexdata = null;
//        int w = 0;
//        int h = 0;
//        int d = 0;
//        int psbpl = 0;
//        int bps = 0;
//        float xpt = 0.0F;
//        float ypt = 0.0F;
//        float wpt = 0.0F;
//        float hpt = 0.0F;
//        int boxflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.generateUncompressedPS(hexdata, w, h, d, psbpl, bps, xpt, ypt, wpt, hpt, boxflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getScaledParametersPS method, of class Leptonica.
//     */
//    @Test
//    public void testGetScaledParametersPS() {
//        System.out.println("getScaledParametersPS");
//        Box box = null;
//        int wpix = 0;
//        int hpix = 0;
//        int res = 0;
//        float scale = 0.0F;
//        FloatBuffer pxpt = null;
//        FloatBuffer pypt = null;
//        FloatBuffer pwpt = null;
//        FloatBuffer phpt = null;

//        instance.getScaledParametersPS(box, wpix, hpix, res, scale, pxpt, pypt, pwpt, phpt);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertByteToHexAscii method, of class Leptonica.
//     */
//    @Test
//    public void testConvertByteToHexAscii() {
//        System.out.println("convertByteToHexAscii");
//        byte byteval = 0;
//        ByteBuffer pnib1 = null;
//        ByteBuffer pnib2 = null;

//        instance.convertByteToHexAscii(byteval, pnib1, pnib2);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertJpegToPSEmbed method, of class Leptonica.
//     */
//    @Test
//    public void testConvertJpegToPSEmbed() {
//        System.out.println("convertJpegToPSEmbed");
//        String filein = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertJpegToPSEmbed(filein, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertJpegToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertJpegToPS() {
//        System.out.println("convertJpegToPS");
//        String filein = "";
//        String fileout = "";
//        String operation = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertJpegToPS(filein, fileout, operation, x, y, res, scale, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertJpegToPSString method, of class Leptonica.
//     */
//    @Test
//    public void testConvertJpegToPSString() {
//        System.out.println("convertJpegToPSString");
//        String filein = "";
//        PointerByReference poutstr = null;
//        IntBuffer pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertJpegToPSString(filein, poutstr, pnbytes, x, y, res, scale, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generateJpegPS method, of class Leptonica.
//     */
//    @Test
//    public void testGenerateJpegPS() {
//        System.out.println("generateJpegPS");
//        String filein = "";
//        L_Compressed_Data cid = null;
//        float xpt = 0.0F;
//        float ypt = 0.0F;
//        float wpt = 0.0F;
//        float hpt = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        Pointer expResult = null;
//        Pointer result = instance.generateJpegPS(filein, cid, xpt, ypt, wpt, hpt, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertG4ToPSEmbed method, of class Leptonica.
//     */
//    @Test
//    public void testConvertG4ToPSEmbed() {
//        System.out.println("convertG4ToPSEmbed");
//        String filein = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertG4ToPSEmbed(filein, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertG4ToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertG4ToPS() {
//        System.out.println("convertG4ToPS");
//        String filein = "";
//        String fileout = "";
//        String operation = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int maskflag = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertG4ToPS(filein, fileout, operation, x, y, res, scale, pageno, maskflag, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertG4ToPSString method, of class Leptonica.
//     */
//    @Test
//    public void testConvertG4ToPSString() {
//        System.out.println("convertG4ToPSString");
//        String filein = "";
//        PointerByReference poutstr = null;
//        IntBuffer pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int maskflag = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertG4ToPSString(filein, poutstr, pnbytes, x, y, res, scale, pageno, maskflag, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generateG4PS method, of class Leptonica.
//     */
//    @Test
//    public void testGenerateG4PS() {
//        System.out.println("generateG4PS");
//        String filein = "";
//        L_Compressed_Data cid = null;
//        float xpt = 0.0F;
//        float ypt = 0.0F;
//        float wpt = 0.0F;
//        float hpt = 0.0F;
//        int maskflag = 0;
//        int pageno = 0;
//        int endpage = 0;

//        Pointer expResult = null;
//        Pointer result = instance.generateG4PS(filein, cid, xpt, ypt, wpt, hpt, maskflag, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertTiffMultipageToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertTiffMultipageToPS() {
//        System.out.println("convertTiffMultipageToPS");
//        String filein = "";
//        String fileout = "";
//        String tempfile = "";
//        float fillfract = 0.0F;

//        int expResult = 0;
//        int result = instance.convertTiffMultipageToPS(filein, fileout, tempfile, fillfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFlateToPSEmbed method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFlateToPSEmbed() {
//        System.out.println("convertFlateToPSEmbed");
//        String filein = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.convertFlateToPSEmbed(filein, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFlateToPS method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFlateToPS() {
//        System.out.println("convertFlateToPS");
//        String filein = "";
//        String fileout = "";
//        String operation = "";
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertFlateToPS(filein, fileout, operation, x, y, res, scale, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertFlateToPSString method, of class Leptonica.
//     */
//    @Test
//    public void testConvertFlateToPSString() {
//        System.out.println("convertFlateToPSString");
//        String filein = "";
//        PointerByReference poutstr = null;
//        IntBuffer pnbytes = null;
//        int x = 0;
//        int y = 0;
//        int res = 0;
//        float scale = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        int expResult = 0;
//        int result = instance.convertFlateToPSString(filein, poutstr, pnbytes, x, y, res, scale, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of generateFlatePS method, of class Leptonica.
//     */
//    @Test
//    public void testGenerateFlatePS() {
//        System.out.println("generateFlatePS");
//        String filein = "";
//        L_Compressed_Data cid = null;
//        float xpt = 0.0F;
//        float ypt = 0.0F;
//        float wpt = 0.0F;
//        float hpt = 0.0F;
//        int pageno = 0;
//        int endpage = 0;

//        Pointer expResult = null;
//        Pointer result = instance.generateFlatePS(filein, cid, xpt, ypt, wpt, hpt, pageno, endpage);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemPS method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemPS() {
//        System.out.println("pixWriteMemPS");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        Box box = null;
//        int res = 0;
//        float scale = 0.0F;

//        int expResult = 0;
//        int result = instance.pixWriteMemPS(pdata, psize, pix, box, res, scale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getResLetterPage method, of class Leptonica.
//     */
//    @Test
//    public void testGetResLetterPage() {
//        System.out.println("getResLetterPage");
//        int w = 0;
//        int h = 0;
//        float fillfract = 0.0F;

//        int expResult = 0;
//        int result = instance.getResLetterPage(w, h, fillfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getResA4Page method, of class Leptonica.
//     */
//    @Test
//    public void testGetResA4Page() {
//        System.out.println("getResA4Page");
//        int w = 0;
//        int h = 0;
//        float fillfract = 0.0F;

//        int expResult = 0;
//        int result = instance.getResA4Page(w, h, fillfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of encodeAscii85 method, of class Leptonica.
//     */
//    @Test
//    public void testEncodeAscii85() {
//        System.out.println("encodeAscii85");
//        ByteBuffer inarray = null;
//        int insize = 0;
//        IntBuffer poutsize = null;

//        Pointer expResult = null;
//        Pointer result = instance.encodeAscii85(inarray, insize, poutsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of decodeAscii85 method, of class Leptonica.
//     */
//    @Test
//    public void testDecodeAscii85() {
//        System.out.println("decodeAscii85");
//        ByteBuffer ina = null;
//        int insize = 0;
//        IntBuffer poutsize = null;

//        Pointer expResult = null;
//        Pointer result = instance.decodeAscii85(ina, insize, poutsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_psWriteBoundingBox method, of class Leptonica.
//     */
//    @Test
//    public void testL_psWriteBoundingBox() {
//        System.out.println("l_psWriteBoundingBox");
//        int flag = 0;

//        instance.l_psWriteBoundingBox(flag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPtaCreate() {
//        System.out.println("ptaCreate");
//        int n = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaCreateFromNuma method, of class Leptonica.
//     */
//    @Test
//    public void testPtaCreateFromNuma() {
//        System.out.println("ptaCreateFromNuma");
//        Numa nax = null;
//        Numa nay = null;

//        Pta expResult = null;
//        Pta result = instance.ptaCreateFromNuma(nax, nay);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPtaDestroy() {
//        System.out.println("ptaDestroy");
//        Pta.ByReference[] ppta = null;

//        instance.ptaDestroy(ppta);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaCopy method, of class Leptonica.
//     */
//    @Test
//    public void testPtaCopy() {
//        System.out.println("ptaCopy");
//        Pta pta = null;

//        Pta expResult = null;
//        Pta result = instance.ptaCopy(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaCopyRange method, of class Leptonica.
//     */
//    @Test
//    public void testPtaCopyRange() {
//        System.out.println("ptaCopyRange");
//        Pta ptas = null;
//        int istart = 0;
//        int iend = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaCopyRange(ptas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaClone method, of class Leptonica.
//     */
//    @Test
//    public void testPtaClone() {
//        System.out.println("ptaClone");
//        Pta pta = null;

//        Pta expResult = null;
//        Pta result = instance.ptaClone(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaEmpty method, of class Leptonica.
//     */
//    @Test
//    public void testPtaEmpty() {
//        System.out.println("ptaEmpty");
//        Pta pta = null;

//        int expResult = 0;
//        int result = instance.ptaEmpty(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaAddPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaAddPt() {
//        System.out.println("ptaAddPt");
//        Pta pta = null;
//        float x = 0.0F;
//        float y = 0.0F;

//        int expResult = 0;
//        int result = instance.ptaAddPt(pta, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaInsertPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaInsertPt() {
//        System.out.println("ptaInsertPt");
//        Pta pta = null;
//        int index = 0;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.ptaInsertPt(pta, index, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaRemovePt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaRemovePt() {
//        System.out.println("ptaRemovePt");
//        Pta pta = null;
//        int index = 0;

//        int expResult = 0;
//        int result = instance.ptaRemovePt(pta, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetRefcount() {
//        System.out.println("ptaGetRefcount");
//        Pta pta = null;

//        int expResult = 0;
//        int result = instance.ptaGetRefcount(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testPtaChangeRefcount() {
//        System.out.println("ptaChangeRefcount");
//        Pta pta = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.ptaChangeRefcount(pta, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetCount() {
//        System.out.println("ptaGetCount");
//        Pta pta = null;

//        int expResult = 0;
//        int result = instance.ptaGetCount(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetPt() {
//        System.out.println("ptaGetPt");
//        Pta pta = null;
//        int index = 0;
//        FloatBuffer px = null;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.ptaGetPt(pta, index, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetIPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetIPt() {
//        System.out.println("ptaGetIPt");
//        Pta pta = null;
//        int index = 0;
//        IntBuffer px = null;
//        IntBuffer py = null;

//        int expResult = 0;
//        int result = instance.ptaGetIPt(pta, index, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaSetPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaSetPt() {
//        System.out.println("ptaSetPt");
//        Pta pta = null;
//        int index = 0;
//        float x = 0.0F;
//        float y = 0.0F;

//        int expResult = 0;
//        int result = instance.ptaSetPt(pta, index, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetArrays method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetArrays() {
//        System.out.println("ptaGetArrays");
//        Pta pta = null;
//        Numa.ByReference[] pnax = null;
//        Numa.ByReference[] pnay = null;

//        int expResult = 0;
//        int result = instance.ptaGetArrays(pta, pnax, pnay);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaRead method, of class Leptonica.
//     */
//    @Test
//    public void testPtaRead() {
//        System.out.println("ptaRead");
//        String filename = "";

//        Pta expResult = null;
//        Pta result = instance.ptaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPtaReadStream() {
//        System.out.println("ptaReadStream");
//        PointerByReference fp = null;

//        Pta expResult = null;
//        Pta result = instance.ptaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPtaWrite() {
//        System.out.println("ptaWrite");
//        String filename = "";
//        Pta pta = null;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.ptaWrite(filename, pta, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPtaWriteStream() {
//        System.out.println("ptaWriteStream");
//        PointerByReference fp = null;
//        Pta pta = null;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.ptaWriteStream(fp, pta, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaCreate() {
//        System.out.println("ptaaCreate");
//        int n = 0;

//        Ptaa expResult = null;
//        Ptaa result = instance.ptaaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaDestroy() {
//        System.out.println("ptaaDestroy");
//        Ptaa.ByReference[] pptaa = null;

//        instance.ptaaDestroy(pptaa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaAddPta method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaAddPta() {
//        System.out.println("ptaaAddPta");
//        Ptaa ptaa = null;
//        Pta pta = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.ptaaAddPta(ptaa, pta, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaGetCount() {
//        System.out.println("ptaaGetCount");
//        Ptaa ptaa = null;

//        int expResult = 0;
//        int result = instance.ptaaGetCount(ptaa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaGetPta method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaGetPta() {
//        System.out.println("ptaaGetPta");
//        Ptaa ptaa = null;
//        int index = 0;
//        int accessflag = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaaGetPta(ptaa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaGetPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaGetPt() {
//        System.out.println("ptaaGetPt");
//        Ptaa ptaa = null;
//        int ipta = 0;
//        int jpt = 0;
//        FloatBuffer px = null;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.ptaaGetPt(ptaa, ipta, jpt, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaInitFull method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaInitFull() {
//        System.out.println("ptaaInitFull");
//        Ptaa ptaa = null;
//        Pta pta = null;

//        int expResult = 0;
//        int result = instance.ptaaInitFull(ptaa, pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaReplacePta method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaReplacePta() {
//        System.out.println("ptaaReplacePta");
//        Ptaa ptaa = null;
//        int index = 0;
//        Pta pta = null;

//        int expResult = 0;
//        int result = instance.ptaaReplacePta(ptaa, index, pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaAddPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaAddPt() {
//        System.out.println("ptaaAddPt");
//        Ptaa ptaa = null;
//        int ipta = 0;
//        float x = 0.0F;
//        float y = 0.0F;

//        int expResult = 0;
//        int result = instance.ptaaAddPt(ptaa, ipta, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaTruncate method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaTruncate() {
//        System.out.println("ptaaTruncate");
//        Ptaa ptaa = null;

//        int expResult = 0;
//        int result = instance.ptaaTruncate(ptaa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaRead method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaRead() {
//        System.out.println("ptaaRead");
//        String filename = "";

//        Ptaa expResult = null;
//        Ptaa result = instance.ptaaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaReadStream() {
//        System.out.println("ptaaReadStream");
//        PointerByReference fp = null;

//        Ptaa expResult = null;
//        Ptaa result = instance.ptaaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaWrite() {
//        System.out.println("ptaaWrite");
//        String filename = "";
//        Ptaa ptaa = null;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.ptaaWrite(filename, ptaa, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaWriteStream() {
//        System.out.println("ptaaWriteStream");
//        PointerByReference fp = null;
//        Ptaa ptaa = null;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.ptaaWriteStream(fp, ptaa, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaSubsample method, of class Leptonica.
//     */
//    @Test
//    public void testPtaSubsample() {
//        System.out.println("ptaSubsample");
//        Pta ptas = null;
//        int subfactor = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaSubsample(ptas, subfactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPtaJoin() {
//        System.out.println("ptaJoin");
//        Pta ptad = null;
//        Pta ptas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.ptaJoin(ptad, ptas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaJoin() {
//        System.out.println("ptaaJoin");
//        Ptaa ptaad = null;
//        Ptaa ptaas = null;
//        int istart = 0;
//        int iend = 0;

//        int expResult = 0;
//        int result = instance.ptaaJoin(ptaad, ptaas, istart, iend);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaReverse method, of class Leptonica.
//     */
//    @Test
//    public void testPtaReverse() {
//        System.out.println("ptaReverse");
//        Pta ptas = null;
//        int type = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaReverse(ptas, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaTranspose method, of class Leptonica.
//     */
//    @Test
//    public void testPtaTranspose() {
//        System.out.println("ptaTranspose");
//        Pta ptas = null;

//        Pta expResult = null;
//        Pta result = instance.ptaTranspose(ptas);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaCyclicPerm method, of class Leptonica.
//     */
//    @Test
//    public void testPtaCyclicPerm() {
//        System.out.println("ptaCyclicPerm");
//        Pta ptas = null;
//        int xs = 0;
//        int ys = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaCyclicPerm(ptas, xs, ys);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaSort method, of class Leptonica.
//     */
//    @Test
//    public void testPtaSort() {
//        System.out.println("ptaSort");
//        Pta ptas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;

//        Pta expResult = null;
//        Pta result = instance.ptaSort(ptas, sorttype, sortorder, pnaindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetSortIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetSortIndex() {
//        System.out.println("ptaGetSortIndex");
//        Pta ptas = null;
//        int sorttype = 0;
//        int sortorder = 0;
//        Numa.ByReference[] pnaindex = null;

//        int expResult = 0;
//        int result = instance.ptaGetSortIndex(ptas, sorttype, sortorder, pnaindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaSortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPtaSortByIndex() {
//        System.out.println("ptaSortByIndex");
//        Pta ptas = null;
//        Numa naindex = null;

//        Pta expResult = null;
//        Pta result = instance.ptaSortByIndex(ptas, naindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaRemoveDuplicates method, of class Leptonica.
//     */
//    @Test
//    public void testPtaRemoveDuplicates() {
//        System.out.println("ptaRemoveDuplicates");
//        Pta ptas = null;
//        int factor = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaRemoveDuplicates(ptas, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaSortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaSortByIndex() {
//        System.out.println("ptaaSortByIndex");
//        Ptaa ptaas = null;
//        Numa naindex = null;

//        Ptaa expResult = null;
//        Ptaa result = instance.ptaaSortByIndex(ptaas, naindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetBoundingRegion method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetBoundingRegion() {
//        System.out.println("ptaGetBoundingRegion");
//        Pta pta = null;

//        Box expResult = null;
//        Box result = instance.ptaGetBoundingRegion(pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetRange method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetRange() {
//        System.out.println("ptaGetRange");
//        Pta pta = null;
//        FloatBuffer pminx = null;
//        FloatBuffer pmaxx = null;
//        FloatBuffer pminy = null;
//        FloatBuffer pmaxy = null;

//        int expResult = 0;
//        int result = instance.ptaGetRange(pta, pminx, pmaxx, pminy, pmaxy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetInsideBox method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetInsideBox() {
//        System.out.println("ptaGetInsideBox");
//        Pta ptas = null;
//        Box box = null;

//        Pta expResult = null;
//        Pta result = instance.ptaGetInsideBox(ptas, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindCornerPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindCornerPixels() {
//        System.out.println("pixFindCornerPixels");
//        Pix pixs = null;

//        Pta expResult = null;
//        Pta result = instance.pixFindCornerPixels(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaContainsPt method, of class Leptonica.
//     */
//    @Test
//    public void testPtaContainsPt() {
//        System.out.println("ptaContainsPt");
//        Pta pta = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.ptaContainsPt(pta, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaTestIntersection method, of class Leptonica.
//     */
//    @Test
//    public void testPtaTestIntersection() {
//        System.out.println("ptaTestIntersection");
//        Pta pta1 = null;
//        Pta pta2 = null;

//        int expResult = 0;
//        int result = instance.ptaTestIntersection(pta1, pta2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPtaTransform() {
//        System.out.println("ptaTransform");
//        Pta ptas = null;
//        int shiftx = 0;
//        int shifty = 0;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pta expResult = null;
//        Pta result = instance.ptaTransform(ptas, shiftx, shifty, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaPtInsidePolygon method, of class Leptonica.
//     */
//    @Test
//    public void testPtaPtInsidePolygon() {
//        System.out.println("ptaPtInsidePolygon");
//        Pta pta = null;
//        float x = 0.0F;
//        float y = 0.0F;
//        IntBuffer pinside = null;

//        int expResult = 0;
//        int result = instance.ptaPtInsidePolygon(pta, x, y, pinside);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_angleBetweenVectors method, of class Leptonica.
//     */
//    @Test
//    public void testL_angleBetweenVectors() {
//        System.out.println("l_angleBetweenVectors");
//        float x1 = 0.0F;
//        float y1 = 0.0F;
//        float x2 = 0.0F;
//        float y2 = 0.0F;

//        float expResult = 0.0F;
//        float result = instance.l_angleBetweenVectors(x1, y1, x2, y2);
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetLinearLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetLinearLSF_4args_1() {
//        System.out.println("ptaGetLinearLSF");
//        Pta pta = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetLinearLSF(pta, pa, pb, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetLinearLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetLinearLSF_4args_2() {
//        System.out.println("ptaGetLinearLSF");
//        Pta pta = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetLinearLSF(pta, pa, pb, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetQuadraticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetQuadraticLSF_5args_1() {
//        System.out.println("ptaGetQuadraticLSF");
//        Pta pta = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        FloatBuffer pc = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetQuadraticLSF(pta, pa, pb, pc, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetQuadraticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetQuadraticLSF_5args_2() {
//        System.out.println("ptaGetQuadraticLSF");
//        Pta pta = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        FloatByReference pc = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetQuadraticLSF(pta, pa, pb, pc, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetCubicLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetCubicLSF_6args_1() {
//        System.out.println("ptaGetCubicLSF");
//        Pta pta = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        FloatBuffer pc = null;
//        FloatBuffer pd = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetCubicLSF(pta, pa, pb, pc, pd, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetCubicLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetCubicLSF_6args_2() {
//        System.out.println("ptaGetCubicLSF");
//        Pta pta = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        FloatByReference pc = null;
//        FloatByReference pd = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetCubicLSF(pta, pa, pb, pc, pd, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetQuarticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetQuarticLSF_7args_1() {
//        System.out.println("ptaGetQuarticLSF");
//        Pta pta = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        FloatBuffer pc = null;
//        FloatBuffer pd = null;
//        FloatBuffer pe = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetQuarticLSF(pta, pa, pb, pc, pd, pe, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetQuarticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetQuarticLSF_7args_2() {
//        System.out.println("ptaGetQuarticLSF");
//        Pta pta = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        FloatByReference pc = null;
//        FloatByReference pd = null;
//        FloatByReference pe = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaGetQuarticLSF(pta, pa, pb, pc, pd, pe, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaNoisyLinearLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaNoisyLinearLSF_7args_1() {
//        System.out.println("ptaNoisyLinearLSF");
//        Pta pta = null;
//        float factor = 0.0F;
//        Pta.ByReference[] pptad = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        FloatBuffer pmederr = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaNoisyLinearLSF(pta, factor, pptad, pa, pb, pmederr, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaNoisyLinearLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaNoisyLinearLSF_7args_2() {
//        System.out.println("ptaNoisyLinearLSF");
//        Pta pta = null;
//        float factor = 0.0F;
//        Pta.ByReference[] pptad = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        FloatByReference pmederr = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaNoisyLinearLSF(pta, factor, pptad, pa, pb, pmederr, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaNoisyQuadraticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaNoisyQuadraticLSF_8args_1() {
//        System.out.println("ptaNoisyQuadraticLSF");
//        Pta pta = null;
//        float factor = 0.0F;
//        Pta.ByReference[] pptad = null;
//        FloatBuffer pa = null;
//        FloatBuffer pb = null;
//        FloatBuffer pc = null;
//        FloatBuffer pmederr = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaNoisyQuadraticLSF(pta, factor, pptad, pa, pb, pc, pmederr, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaNoisyQuadraticLSF method, of class Leptonica.
//     */
//    @Test
//    public void testPtaNoisyQuadraticLSF_8args_2() {
//        System.out.println("ptaNoisyQuadraticLSF");
//        Pta pta = null;
//        float factor = 0.0F;
//        Pta.ByReference[] pptad = null;
//        FloatByReference pa = null;
//        FloatByReference pb = null;
//        FloatByReference pc = null;
//        FloatByReference pmederr = null;
//        Numa.ByReference[] pnafit = null;

//        int expResult = 0;
//        int result = instance.ptaNoisyQuadraticLSF(pta, factor, pptad, pa, pb, pc, pmederr, pnafit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of applyLinearFit method, of class Leptonica.
//     */
//    @Test
//    public void testApplyLinearFit() {
//        System.out.println("applyLinearFit");
//        float a = 0.0F;
//        float b = 0.0F;
//        float x = 0.0F;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.applyLinearFit(a, b, x, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of applyQuadraticFit method, of class Leptonica.
//     */
//    @Test
//    public void testApplyQuadraticFit() {
//        System.out.println("applyQuadraticFit");
//        float a = 0.0F;
//        float b = 0.0F;
//        float c = 0.0F;
//        float x = 0.0F;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.applyQuadraticFit(a, b, c, x, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of applyCubicFit method, of class Leptonica.
//     */
//    @Test
//    public void testApplyCubicFit() {
//        System.out.println("applyCubicFit");
//        float a = 0.0F;
//        float b = 0.0F;
//        float c = 0.0F;
//        float d = 0.0F;
//        float x = 0.0F;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.applyCubicFit(a, b, c, d, x, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of applyQuarticFit method, of class Leptonica.
//     */
//    @Test
//    public void testApplyQuarticFit() {
//        System.out.println("applyQuarticFit");
//        float a = 0.0F;
//        float b = 0.0F;
//        float c = 0.0F;
//        float d = 0.0F;
//        float e = 0.0F;
//        float x = 0.0F;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.applyQuarticFit(a, b, c, d, e, x, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixPlotAlongPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixPlotAlongPta() {
//        System.out.println("pixPlotAlongPta");
//        Pix pixs = null;
//        Pta pta = null;
//        int outformat = 0;
//        String title = "";

//        int expResult = 0;
//        int result = instance.pixPlotAlongPta(pixs, pta, outformat, title);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetPixelsFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetPixelsFromPix() {
//        System.out.println("ptaGetPixelsFromPix");
//        Pix pixs = null;
//        Box box = null;

//        Pta expResult = null;
//        Pta result = instance.ptaGetPixelsFromPix(pixs, box);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateFromPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateFromPta() {
//        System.out.println("pixGenerateFromPta");
//        Pta pta = null;
//        int w = 0;
//        int h = 0;

//        Pix expResult = null;
//        Pix result = instance.pixGenerateFromPta(pta, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaGetBoundaryPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPtaGetBoundaryPixels() {
//        System.out.println("ptaGetBoundaryPixels");
//        Pix pixs = null;
//        int type = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaGetBoundaryPixels(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaaGetBoundaryPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPtaaGetBoundaryPixels() {
//        System.out.println("ptaaGetBoundaryPixels");
//        Pix pixs = null;
//        int type = 0;
//        int connectivity = 0;
//        Boxa.ByReference[] pboxa = null;
//        Pixa.ByReference[] ppixa = null;

//        Ptaa expResult = null;
//        Ptaa result = instance.ptaaGetBoundaryPixels(pixs, type, connectivity, pboxa, ppixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayPta method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayPta() {
//        System.out.println("pixDisplayPta");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pta pta = null;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayPta(pixd, pixs, pta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayPtaaPattern method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayPtaaPattern() {
//        System.out.println("pixDisplayPtaaPattern");
//        Pix pixd = null;
//        Pix pixs = null;
//        Ptaa ptaa = null;
//        Pix pixp = null;
//        int cx = 0;
//        int cy = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayPtaaPattern(pixd, pixs, ptaa, pixp, cx, cy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayPtaPattern method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayPtaPattern() {
//        System.out.println("pixDisplayPtaPattern");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pta pta = null;
//        Pix pixp = null;
//        int cx = 0;
//        int cy = 0;
//        int color = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayPtaPattern(pixd, pixs, pta, pixp, cx, cy, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptaReplicatePattern method, of class Leptonica.
//     */
//    @Test
//    public void testPtaReplicatePattern() {
//        System.out.println("ptaReplicatePattern");
//        Pta ptas = null;
//        Pix pixp = null;
//        Pta ptap = null;
//        int cx = 0;
//        int cy = 0;
//        int w = 0;
//        int h = 0;

//        Pta expResult = null;
//        Pta result = instance.ptaReplicatePattern(ptas, pixp, ptap, cx, cy, w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayPtaa method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayPtaa() {
//        System.out.println("pixDisplayPtaa");
//        Pix pixs = null;
//        Ptaa ptaa = null;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayPtaa(pixs, ptaa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPtraCreate() {
//        System.out.println("ptraCreate");
//        int n = 0;

//        L_Ptra expResult = null;
//        L_Ptra result = instance.ptraCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPtraDestroy() {
//        System.out.println("ptraDestroy");
//        L_Ptra.ByReference[] ppa = null;
//        int freeflag = 0;
//        int warnflag = 0;

//        instance.ptraDestroy(ppa, freeflag, warnflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraAdd method, of class Leptonica.
//     */
//    @Test
//    public void testPtraAdd() {
//        System.out.println("ptraAdd");
//        L_Ptra pa = null;
//        Pointer item = null;

//        int expResult = 0;
//        int result = instance.ptraAdd(pa, item);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraInsert method, of class Leptonica.
//     */
//    @Test
//    public void testPtraInsert() {
//        System.out.println("ptraInsert");
//        L_Ptra pa = null;
//        int index = 0;
//        Pointer item = null;
//        int shiftflag = 0;

//        int expResult = 0;
//        int result = instance.ptraInsert(pa, index, item, shiftflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraRemove method, of class Leptonica.
//     */
//    @Test
//    public void testPtraRemove() {
//        System.out.println("ptraRemove");
//        L_Ptra pa = null;
//        int index = 0;
//        int flag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.ptraRemove(pa, index, flag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraRemoveLast method, of class Leptonica.
//     */
//    @Test
//    public void testPtraRemoveLast() {
//        System.out.println("ptraRemoveLast");
//        L_Ptra pa = null;

//        Pointer expResult = null;
//        Pointer result = instance.ptraRemoveLast(pa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraReplace method, of class Leptonica.
//     */
//    @Test
//    public void testPtraReplace() {
//        System.out.println("ptraReplace");
//        L_Ptra pa = null;
//        int index = 0;
//        Pointer item = null;
//        int freeflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.ptraReplace(pa, index, item, freeflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraSwap method, of class Leptonica.
//     */
//    @Test
//    public void testPtraSwap() {
//        System.out.println("ptraSwap");
//        L_Ptra pa = null;
//        int index1 = 0;
//        int index2 = 0;

//        int expResult = 0;
//        int result = instance.ptraSwap(pa, index1, index2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraCompactArray method, of class Leptonica.
//     */
//    @Test
//    public void testPtraCompactArray() {
//        System.out.println("ptraCompactArray");
//        L_Ptra pa = null;

//        int expResult = 0;
//        int result = instance.ptraCompactArray(pa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraReverse method, of class Leptonica.
//     */
//    @Test
//    public void testPtraReverse() {
//        System.out.println("ptraReverse");
//        L_Ptra pa = null;

//        int expResult = 0;
//        int result = instance.ptraReverse(pa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPtraJoin() {
//        System.out.println("ptraJoin");
//        L_Ptra pa1 = null;
//        L_Ptra pa2 = null;

//        int expResult = 0;
//        int result = instance.ptraJoin(pa1, pa2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraGetMaxIndex method, of class Leptonica.
//     */
//    @Test
//    public void testPtraGetMaxIndex() {
//        System.out.println("ptraGetMaxIndex");
//        L_Ptra pa = null;
//        IntBuffer pmaxindex = null;

//        int expResult = 0;
//        int result = instance.ptraGetMaxIndex(pa, pmaxindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraGetActualCount method, of class Leptonica.
//     */
//    @Test
//    public void testPtraGetActualCount() {
//        System.out.println("ptraGetActualCount");
//        L_Ptra pa = null;
//        IntBuffer pcount = null;

//        int expResult = 0;
//        int result = instance.ptraGetActualCount(pa, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraGetPtrToItem method, of class Leptonica.
//     */
//    @Test
//    public void testPtraGetPtrToItem() {
//        System.out.println("ptraGetPtrToItem");
//        L_Ptra pa = null;
//        int index = 0;

//        Pointer expResult = null;
//        Pointer result = instance.ptraGetPtrToItem(pa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaCreate() {
//        System.out.println("ptraaCreate");
//        int n = 0;

//        L_Ptraa expResult = null;
//        L_Ptraa result = instance.ptraaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaDestroy() {
//        System.out.println("ptraaDestroy");
//        L_Ptraa.ByReference[] ppaa = null;
//        int freeflag = 0;
//        int warnflag = 0;

//        instance.ptraaDestroy(ppaa, freeflag, warnflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaGetSize method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaGetSize() {
//        System.out.println("ptraaGetSize");
//        L_Ptraa paa = null;
//        IntBuffer psize = null;

//        int expResult = 0;
//        int result = instance.ptraaGetSize(paa, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaInsertPtra method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaInsertPtra() {
//        System.out.println("ptraaInsertPtra");
//        L_Ptraa paa = null;
//        int index = 0;
//        L_Ptra pa = null;

//        int expResult = 0;
//        int result = instance.ptraaInsertPtra(paa, index, pa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaGetPtra method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaGetPtra() {
//        System.out.println("ptraaGetPtra");
//        L_Ptraa paa = null;
//        int index = 0;
//        int accessflag = 0;

//        L_Ptra expResult = null;
//        L_Ptra result = instance.ptraaGetPtra(paa, index, accessflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ptraaFlattenToPtra method, of class Leptonica.
//     */
//    @Test
//    public void testPtraaFlattenToPtra() {
//        System.out.println("ptraaFlattenToPtra");
//        L_Ptraa paa = null;

//        L_Ptra expResult = null;
//        L_Ptra result = instance.ptraaFlattenToPtra(paa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuadtreeMean method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuadtreeMean() {
//        System.out.println("pixQuadtreeMean");
//        Pix pixs = null;
//        int nlevels = 0;
//        Pix pix_ma = null;
//        FPixa.ByReference[] pfpixa = null;

//        int expResult = 0;
//        int result = instance.pixQuadtreeMean(pixs, nlevels, pix_ma, pfpixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuadtreeVariance method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuadtreeVariance() {
//        System.out.println("pixQuadtreeVariance");
//        Pix pixs = null;
//        int nlevels = 0;
//        Pix pix_ma = null;
//        DPix dpix_msa = null;
//        FPixa.ByReference[] pfpixa_v = null;
//        FPixa.ByReference[] pfpixa_rv = null;

//        int expResult = 0;
//        int result = instance.pixQuadtreeVariance(pixs, nlevels, pix_ma, dpix_msa, pfpixa_v, pfpixa_rv);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMeanInRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixMeanInRectangle() {
//        System.out.println("pixMeanInRectangle");
//        Pix pixs = null;
//        Box box = null;
//        Pix pixma = null;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.pixMeanInRectangle(pixs, box, pixma, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVarianceInRectangle method, of class Leptonica.
//     */
//    @Test
//    public void testPixVarianceInRectangle() {
//        System.out.println("pixVarianceInRectangle");
//        Pix pixs = null;
//        Box box = null;
//        Pix pix_ma = null;
//        DPix dpix_msa = null;
//        FloatBuffer pvar = null;
//        FloatBuffer prvar = null;

//        int expResult = 0;
//        int result = instance.pixVarianceInRectangle(pixs, box, pix_ma, dpix_msa, pvar, prvar);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of boxaaQuadtreeRegions method, of class Leptonica.
//     */
//    @Test
//    public void testBoxaaQuadtreeRegions() {
//        System.out.println("boxaaQuadtreeRegions");
//        int w = 0;
//        int h = 0;
//        int nlevels = 0;

//        Boxaa expResult = null;
//        Boxaa result = instance.boxaaQuadtreeRegions(w, h, nlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of quadtreeGetParent method, of class Leptonica.
//     */
//    @Test
//    public void testQuadtreeGetParent() {
//        System.out.println("quadtreeGetParent");
//        FPixa fpixa = null;
//        int level = 0;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pval = null;

//        int expResult = 0;
//        int result = instance.quadtreeGetParent(fpixa, level, x, y, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of quadtreeGetChildren method, of class Leptonica.
//     */
//    @Test
//    public void testQuadtreeGetChildren() {
//        System.out.println("quadtreeGetChildren");
//        FPixa fpixa = null;
//        int level = 0;
//        int x = 0;
//        int y = 0;
//        FloatBuffer pval00 = null;
//        FloatBuffer pval10 = null;
//        FloatBuffer pval01 = null;
//        FloatBuffer pval11 = null;

//        int expResult = 0;
//        int result = instance.quadtreeGetChildren(fpixa, level, x, y, pval00, pval10, pval01, pval11);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of quadtreeMaxLevels method, of class Leptonica.
//     */
//    @Test
//    public void testQuadtreeMaxLevels() {
//        System.out.println("quadtreeMaxLevels");
//        int w = 0;
//        int h = 0;

//        int expResult = 0;
//        int result = instance.quadtreeMaxLevels(w, h);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fpixaDisplayQuadtree method, of class Leptonica.
//     */
//    @Test
//    public void testFpixaDisplayQuadtree() {
//        System.out.println("fpixaDisplayQuadtree");
//        FPixa fpixa = null;
//        int factor = 0;
//        String fontdir = "";

//        Pix expResult = null;
//        Pix result = instance.fpixaDisplayQuadtree(fpixa, factor, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueueCreate method, of class Leptonica.
//     */
//    @Test
//    public void testLqueueCreate() {
//        System.out.println("lqueueCreate");
//        int nalloc = 0;

//        L_Queue expResult = null;
//        L_Queue result = instance.lqueueCreate(nalloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueueDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testLqueueDestroy() {
//        System.out.println("lqueueDestroy");
//        L_Queue.ByReference[] plq = null;
//        int freeflag = 0;

//        instance.lqueueDestroy(plq, freeflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueueAdd method, of class Leptonica.
//     */
//    @Test
//    public void testLqueueAdd() {
//        System.out.println("lqueueAdd");
//        L_Queue lq = null;
//        Pointer item = null;

//        int expResult = 0;
//        int result = instance.lqueueAdd(lq, item);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueueRemove method, of class Leptonica.
//     */
//    @Test
//    public void testLqueueRemove() {
//        System.out.println("lqueueRemove");
//        L_Queue lq = null;

//        Pointer expResult = null;
//        Pointer result = instance.lqueueRemove(lq);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueueGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testLqueueGetCount() {
//        System.out.println("lqueueGetCount");
//        L_Queue lq = null;

//        int expResult = 0;
//        int result = instance.lqueueGetCount(lq);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lqueuePrint method, of class Leptonica.
//     */
//    @Test
//    public void testLqueuePrint() {
//        System.out.println("lqueuePrint");
//        PointerByReference fp = null;
//        L_Queue lq = null;

//        int expResult = 0;
//        int result = instance.lqueuePrint(fp, lq);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankFilter method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankFilter() {
//        System.out.println("pixRankFilter");
//        Pix pixs = null;
//        int wf = 0;
//        int hf = 0;
//        float rank = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixRankFilter(pixs, wf, hf, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankFilterRGB method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankFilterRGB() {
//        System.out.println("pixRankFilterRGB");
//        Pix pixs = null;
//        int wf = 0;
//        int hf = 0;
//        float rank = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixRankFilterRGB(pixs, wf, hf, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankFilterGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankFilterGray() {
//        System.out.println("pixRankFilterGray");
//        Pix pixs = null;
//        int wf = 0;
//        int hf = 0;
//        float rank = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixRankFilterGray(pixs, wf, hf, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixMedianFilter method, of class Leptonica.
//     */
//    @Test
//    public void testPixMedianFilter() {
//        System.out.println("pixMedianFilter");
//        Pix pixs = null;
//        int wf = 0;
//        int hf = 0;

//        Pix expResult = null;
//        Pix result = instance.pixMedianFilter(pixs, wf, hf);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRankFilterWithScaling method, of class Leptonica.
//     */
//    @Test
//    public void testPixRankFilterWithScaling() {
//        System.out.println("pixRankFilterWithScaling");
//        Pix pixs = null;
//        int wf = 0;
//        int hf = 0;
//        float rank = 0.0F;
//        float scalefactor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixRankFilterWithScaling(pixs, wf, hf, rank, scalefactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixProcessBarcodes method, of class Leptonica.
//     */
//    @Test
//    public void testPixProcessBarcodes() {
//        System.out.println("pixProcessBarcodes");
//        Pix pixs = null;
//        int format = 0;
//        int method = 0;
//        Sarray.ByReference[] psaw = null;
//        int debugflag = 0;

//        Sarray expResult = null;
//        Sarray result = instance.pixProcessBarcodes(pixs, format, method, psaw, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBarcodes method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBarcodes() {
//        System.out.println("pixExtractBarcodes");
//        Pix pixs = null;
//        int debugflag = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixExtractBarcodes(pixs, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadBarcodes method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadBarcodes() {
//        System.out.println("pixReadBarcodes");
//        Pixa pixa = null;
//        int format = 0;
//        int method = 0;
//        Sarray.ByReference[] psaw = null;
//        int debugflag = 0;

//        Sarray expResult = null;
//        Sarray result = instance.pixReadBarcodes(pixa, format, method, psaw, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadBarcodeWidths method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadBarcodeWidths() {
//        System.out.println("pixReadBarcodeWidths");
//        Pix pixs = null;
//        int method = 0;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.pixReadBarcodeWidths(pixs, method, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixLocateBarcodes method, of class Leptonica.
//     */
//    @Test
//    public void testPixLocateBarcodes() {
//        System.out.println("pixLocateBarcodes");
//        Pix pixs = null;
//        int thresh = 0;
//        Pix.ByReference[] ppixb = null;
//        Pix.ByReference[] ppixm = null;

//        Boxa expResult = null;
//        Boxa result = instance.pixLocateBarcodes(pixs, thresh, ppixb, ppixm);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDeskewBarcode method, of class Leptonica.
//     */
//    @Test
//    public void testPixDeskewBarcode() {
//        System.out.println("pixDeskewBarcode");
//        Pix pixs = null;
//        Pix pixb = null;
//        Box box = null;
//        int margin = 0;
//        int threshold = 0;
//        FloatBuffer pangle = null;
//        FloatBuffer pconf = null;

//        Pix expResult = null;
//        Pix result = instance.pixDeskewBarcode(pixs, pixb, box, margin, threshold, pangle, pconf);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBarcodeWidths1 method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBarcodeWidths1() {
//        System.out.println("pixExtractBarcodeWidths1");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        float binfract = 0.0F;
//        Numa.ByReference[] pnaehist = null;
//        Numa.ByReference[] pnaohist = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.pixExtractBarcodeWidths1(pixs, thresh, binfract, pnaehist, pnaohist, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBarcodeWidths2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBarcodeWidths2_5args_1() {
//        System.out.println("pixExtractBarcodeWidths2");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        FloatBuffer pwidth = null;
//        Numa.ByReference[] pnac = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.pixExtractBarcodeWidths2(pixs, thresh, pwidth, pnac, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBarcodeWidths2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBarcodeWidths2_5args_2() {
//        System.out.println("pixExtractBarcodeWidths2");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        FloatByReference pwidth = null;
//        Numa.ByReference[] pnac = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.pixExtractBarcodeWidths2(pixs, thresh, pwidth, pnac, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBarcodeCrossings method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBarcodeCrossings() {
//        System.out.println("pixExtractBarcodeCrossings");
//        Pix pixs = null;
//        float thresh = 0.0F;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.pixExtractBarcodeCrossings(pixs, thresh, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaQuantizeCrossingsByWidth method, of class Leptonica.
//     */
//    @Test
//    public void testNumaQuantizeCrossingsByWidth() {
//        System.out.println("numaQuantizeCrossingsByWidth");
//        Numa nas = null;
//        float binfract = 0.0F;
//        Numa.ByReference[] pnaehist = null;
//        Numa.ByReference[] pnaohist = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.numaQuantizeCrossingsByWidth(nas, binfract, pnaehist, pnaohist, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaQuantizeCrossingsByWindow method, of class Leptonica.
//     */
//    @Test
//    public void testNumaQuantizeCrossingsByWindow_6args_1() {
//        System.out.println("numaQuantizeCrossingsByWindow");
//        Numa nas = null;
//        float ratio = 0.0F;
//        FloatBuffer pwidth = null;
//        FloatBuffer pfirstloc = null;
//        Numa.ByReference[] pnac = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.numaQuantizeCrossingsByWindow(nas, ratio, pwidth, pfirstloc, pnac, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of numaQuantizeCrossingsByWindow method, of class Leptonica.
//     */
//    @Test
//    public void testNumaQuantizeCrossingsByWindow_6args_2() {
//        System.out.println("numaQuantizeCrossingsByWindow");
//        Numa nas = null;
//        float ratio = 0.0F;
//        FloatByReference pwidth = null;
//        FloatByReference pfirstloc = null;
//        Numa.ByReference[] pnac = null;
//        int debugflag = 0;

//        Numa expResult = null;
//        Numa result = instance.numaQuantizeCrossingsByWindow(nas, ratio, pwidth, pfirstloc, pnac, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaReadFiles method, of class Leptonica.
//     */
//    @Test
//    public void testPixaReadFiles() {
//        System.out.println("pixaReadFiles");
//        String dirname = "";
//        String substr = "";

//        Pixa expResult = null;
//        Pixa result = instance.pixaReadFiles(dirname, substr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaReadFilesSA method, of class Leptonica.
//     */
//    @Test
//    public void testPixaReadFilesSA() {
//        System.out.println("pixaReadFilesSA");
//        Sarray sa = null;

//        Pixa expResult = null;
//        Pixa result = instance.pixaReadFilesSA(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }

    /**
     * Test of pixRead method, of class Leptonica.
     */
    @Test
    public void testPixRead() {
        System.out.println("pixRead");
        String filename = "eurotext.png";
        File image = new File(testResourcesPath, filename);
        Pix result = instance.pixRead(image.getPath());
        PointerByReference pRef = new PointerByReference();
        pRef.setValue(result.getPointer());
        instance.pixDestroy(pRef);
        assertNotNull(result);
    }

//    /**
//     * Test of pixReadWithHint method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadWithHint() {
//        System.out.println("pixReadWithHint");
//        String filename = "";
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadWithHint(filename, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadIndexed method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadIndexed() {
//        System.out.println("pixReadIndexed");
//        Sarray sa = null;
//        int index = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadIndexed(sa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStream() {
//        System.out.println("pixReadStream");
//        PointerByReference fp = null;
//        int hint = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadStream(fp, hint);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadHeader method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadHeader() {
//        System.out.println("pixReadHeader");
//        String filename = "";
//        IntBuffer pformat = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.pixReadHeader(filename, pformat, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findFileFormat method, of class Leptonica.
//     */
//    @Test
//    public void testFindFileFormat() {
//        System.out.println("findFileFormat");
//        String filename = "";
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.findFileFormat(filename, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findFileFormatStream method, of class Leptonica.
//     */
//    @Test
//    public void testFindFileFormatStream_PointerByReference_IntBuffer() {
//        System.out.println("findFileFormatStream");
//        PointerByReference fp = null;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.findFileFormatStream(fp, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findFileFormatStream method, of class Leptonica.
//     */
//    @Test
//    public void testFindFileFormatStream_PointerByReference_IntByReference() {
//        System.out.println("findFileFormatStream");
//        PointerByReference fp = null;
//        IntByReference pformat = null;

//        int expResult = 0;
//        int result = instance.findFileFormatStream(fp, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findFileFormatBuffer method, of class Leptonica.
//     */
//    @Test
//    public void testFindFileFormatBuffer() {
//        System.out.println("findFileFormatBuffer");
//        ByteBuffer buf = null;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.findFileFormatBuffer(buf, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileFormatIsTiff method, of class Leptonica.
//     */
//    @Test
//    public void testFileFormatIsTiff() {
//        System.out.println("fileFormatIsTiff");
//        PointerByReference fp = null;

//        int expResult = 0;
//        int result = instance.fileFormatIsTiff(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMem method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMem() {
//        System.out.println("pixReadMem");
//        ByteBuffer data = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMem(data, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadHeaderMem method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadHeaderMem() {
//        System.out.println("pixReadHeaderMem");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        IntBuffer pformat = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.pixReadHeaderMem(data, size, pformat, pw, ph, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of ioFormatTest method, of class Leptonica.
//     */
//    @Test
//    public void testIoFormatTest() {
//        System.out.println("ioFormatTest");
//        String filename = "";

//        int expResult = 0;
//        int result = instance.ioFormatTest(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaCreateFromRecog method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaCreateFromRecog() {
//        System.out.println("recogaCreateFromRecog");
//        L_Recog recog = null;

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogaCreateFromRecog(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaCreateFromPixaa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaCreateFromPixaa() {
//        System.out.println("recogaCreateFromPixaa");
//        Pixaa paa = null;
//        int scalew = 0;
//        int scaleh = 0;
//        int templ_type = 0;
//        int threshold = 0;
//        int maxyshift = 0;
//        String fontdir = "";

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogaCreateFromPixaa(paa, scalew, scaleh, templ_type, threshold, maxyshift, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaCreate() {
//        System.out.println("recogaCreate");
//        int n = 0;

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaAddRecog method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaAddRecog() {
//        System.out.println("recogaAddRecog");
//        L_Recoga recoga = null;
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogaAddRecog(recoga, recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogReplaceInRecoga method, of class Leptonica.
//     */
//    @Test
//    public void testRecogReplaceInRecoga() {
//        System.out.println("recogReplaceInRecoga");
//        L_Recog.ByReference[] precog1 = null;
//        L_Recog recog2 = null;

//        int expResult = 0;
//        int result = instance.recogReplaceInRecoga(precog1, recog2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaGetRecog method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaGetRecog() {
//        System.out.println("recogaGetRecog");
//        L_Recoga recoga = null;
//        int index = 0;

//        L_Recog expResult = null;
//        L_Recog result = instance.recogaGetRecog(recoga, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaGetCount() {
//        System.out.println("recogaGetCount");
//        L_Recoga recoga = null;

//        int expResult = 0;
//        int result = instance.recogaGetCount(recoga);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetCount() {
//        System.out.println("recogGetCount");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogGetCount(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetIndex method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetIndex() {
//        System.out.println("recogGetIndex");
//        L_Recog recog = null;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.recogGetIndex(recog, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetParent method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetParent() {
//        System.out.println("recogGetParent");
//        L_Recog recog = null;

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogGetParent(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSetBootflag method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSetBootflag() {
//        System.out.println("recogSetBootflag");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogSetBootflag(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCreateFromRecog method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCreateFromRecog() {
//        System.out.println("recogCreateFromRecog");
//        L_Recog recs = null;
//        int scalew = 0;
//        int scaleh = 0;
//        int templ_type = 0;
//        int threshold = 0;
//        int maxyshift = 0;
//        String fontdir = "";

//        L_Recog expResult = null;
//        L_Recog result = instance.recogCreateFromRecog(recs, scalew, scaleh, templ_type, threshold, maxyshift, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCreateFromPixa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCreateFromPixa() {
//        System.out.println("recogCreateFromPixa");
//        Pixa pixa = null;
//        int scalew = 0;
//        int scaleh = 0;
//        int templ_type = 0;
//        int threshold = 0;
//        int maxyshift = 0;
//        String fontdir = "";

//        L_Recog expResult = null;
//        L_Recog result = instance.recogCreateFromPixa(pixa, scalew, scaleh, templ_type, threshold, maxyshift, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCreate method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCreate() {
//        System.out.println("recogCreate");
//        int scalew = 0;
//        int scaleh = 0;
//        int templ_type = 0;
//        int threshold = 0;
//        int maxyshift = 0;
//        String fontdir = "";

//        L_Recog expResult = null;
//        L_Recog result = instance.recogCreate(scalew, scaleh, templ_type, threshold, maxyshift, fontdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testRecogDestroy() {
//        System.out.println("recogDestroy");
//        L_Recog.ByReference[] precog = null;

//        instance.recogDestroy(precog);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogAppend method, of class Leptonica.
//     */
//    @Test
//    public void testRecogAppend() {
//        System.out.println("recogAppend");
//        L_Recog recog1 = null;
//        L_Recog recog2 = null;

//        int expResult = 0;
//        int result = instance.recogAppend(recog1, recog2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetClassIndex method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetClassIndex() {
//        System.out.println("recogGetClassIndex");
//        L_Recog recog = null;
//        int val = 0;
//        ByteBuffer text = null;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.recogGetClassIndex(recog, val, text, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogStringToIndex method, of class Leptonica.
//     */
//    @Test
//    public void testRecogStringToIndex() {
//        System.out.println("recogStringToIndex");
//        L_Recog recog = null;
//        ByteBuffer text = null;
//        IntBuffer pindex = null;

//        int expResult = 0;
//        int result = instance.recogStringToIndex(recog, text, pindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetClassString method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetClassString() {
//        System.out.println("recogGetClassString");
//        L_Recog recog = null;
//        int index = 0;
//        PointerByReference pcharstr = null;

//        int expResult = 0;
//        int result = instance.recogGetClassString(recog, index, pcharstr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_convertCharstrToInt method, of class Leptonica.
//     */
//    @Test
//    public void testL_convertCharstrToInt() {
//        System.out.println("l_convertCharstrToInt");
//        String str = "";
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.l_convertCharstrToInt(str, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaRead method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaRead() {
//        System.out.println("recogaRead");
//        String filename = "";

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogaRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaReadStream() {
//        System.out.println("recogaReadStream");
//        PointerByReference fp = null;

//        L_Recoga expResult = null;
//        L_Recoga result = instance.recogaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaWrite() {
//        System.out.println("recogaWrite");
//        String filename = "";
//        L_Recoga recoga = null;

//        int expResult = 0;
//        int result = instance.recogaWrite(filename, recoga);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaWriteStream_3args_1() {
//        System.out.println("recogaWriteStream");
//        PointerByReference fp = null;
//        L_Recoga recoga = null;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.recogaWriteStream(fp, recoga, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaWriteStream_3args_2() {
//        System.out.println("recogaWriteStream");
//        PointerByReference fp = null;
//        L_Recoga recoga = null;
//        Pointer filename = null;

//        int expResult = 0;
//        int result = instance.recogaWriteStream(fp, recoga, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaWritePixaa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaWritePixaa() {
//        System.out.println("recogaWritePixaa");
//        String filename = "";
//        L_Recoga recoga = null;

//        int expResult = 0;
//        int result = instance.recogaWritePixaa(filename, recoga);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogRead method, of class Leptonica.
//     */
//    @Test
//    public void testRecogRead() {
//        System.out.println("recogRead");
//        String filename = "";

//        L_Recog expResult = null;
//        L_Recog result = instance.recogRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogReadStream() {
//        System.out.println("recogReadStream");
//        PointerByReference fp = null;

//        L_Recog expResult = null;
//        L_Recog result = instance.recogReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogWrite method, of class Leptonica.
//     */
//    @Test
//    public void testRecogWrite() {
//        System.out.println("recogWrite");
//        String filename = "";
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogWrite(filename, recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogWriteStream_3args_1() {
//        System.out.println("recogWriteStream");
//        PointerByReference fp = null;
//        L_Recog recog = null;
//        String filename = "";

//        int expResult = 0;
//        int result = instance.recogWriteStream(fp, recog, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testRecogWriteStream_3args_2() {
//        System.out.println("recogWriteStream");
//        PointerByReference fp = null;
//        L_Recog recog = null;
//        Pointer filename = null;

//        int expResult = 0;
//        int result = instance.recogWriteStream(fp, recog, filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogWritePixa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogWritePixa() {
//        System.out.println("recogWritePixa");
//        String filename = "";
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogWritePixa(filename, recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogDecode method, of class Leptonica.
//     */
//    @Test
//    public void testRecogDecode() {
//        System.out.println("recogDecode");
//        L_Recog recog = null;
//        Pix pixs = null;
//        int nlevels = 0;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogDecode(recog, pixs, nlevels, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogMakeDecodingArrays method, of class Leptonica.
//     */
//    @Test
//    public void testRecogMakeDecodingArrays() {
//        System.out.println("recogMakeDecodingArrays");
//        L_Recog recog = null;
//        Pix pixs = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogMakeDecodingArrays(recog, pixs, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogRunViterbi method, of class Leptonica.
//     */
//    @Test
//    public void testRecogRunViterbi() {
//        System.out.println("recogRunViterbi");
//        L_Recog recog = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogRunViterbi(recog, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCreateDid method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCreateDid() {
//        System.out.println("recogCreateDid");
//        L_Recog recog = null;
//        Pix pixs = null;

//        int expResult = 0;
//        int result = instance.recogCreateDid(recog, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogDestroyDid method, of class Leptonica.
//     */
//    @Test
//    public void testRecogDestroyDid() {
//        System.out.println("recogDestroyDid");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogDestroyDid(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogDidExists method, of class Leptonica.
//     */
//    @Test
//    public void testRecogDidExists() {
//        System.out.println("recogDidExists");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogDidExists(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogGetDid method, of class Leptonica.
//     */
//    @Test
//    public void testRecogGetDid() {
//        System.out.println("recogGetDid");
//        L_Recog recog = null;

//        L_Rdid expResult = null;
//        L_Rdid result = instance.recogGetDid(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSetChannelParams method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSetChannelParams() {
//        System.out.println("recogSetChannelParams");
//        L_Recog recog = null;
//        int nlevels = 0;

//        int expResult = 0;
//        int result = instance.recogSetChannelParams(recog, nlevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaIdentifyMultiple method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaIdentifyMultiple() {
//        System.out.println("recogaIdentifyMultiple");
//        L_Recoga recoga = null;
//        Pix pixs = null;
//        int nitems = 0;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;
//        Pixa.ByReference[] ppixa = null;
//        Pix.ByReference[] ppixdb = null;
//        int debugsplit = 0;

//        int expResult = 0;
//        int result = instance.recogaIdentifyMultiple(recoga, pixs, nitems, minw, minh, pboxa, ppixa, ppixdb, debugsplit);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSplitIntoCharacters method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSplitIntoCharacters() {
//        System.out.println("recogSplitIntoCharacters");
//        L_Recog recog = null;
//        Pix pixs = null;
//        int minw = 0;
//        int minh = 0;
//        Boxa.ByReference[] pboxa = null;
//        Pixa.ByReference[] ppixa = null;
//        Numa.ByReference[] pnaid = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogSplitIntoCharacters(recog, pixs, minw, minh, pboxa, ppixa, pnaid, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCorrelationBestRow method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCorrelationBestRow() {
//        System.out.println("recogCorrelationBestRow");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Boxa.ByReference[] pboxa = null;
//        Numa.ByReference[] pnascore = null;
//        Numa.ByReference[] pnaindex = null;
//        Sarray.ByReference[] psachar = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogCorrelationBestRow(recog, pixs, pboxa, pnascore, pnaindex, psachar, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCorrelationBestChar method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCorrelationBestChar_7args_1() {
//        System.out.println("recogCorrelationBestChar");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box.ByReference[] pbox = null;
//        FloatBuffer pscore = null;
//        IntBuffer pindex = null;
//        PointerByReference pcharstr = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogCorrelationBestChar(recog, pixs, pbox, pscore, pindex, pcharstr, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCorrelationBestChar method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCorrelationBestChar_7args_2() {
//        System.out.println("recogCorrelationBestChar");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box.ByReference[] pbox = null;
//        FloatByReference pscore = null;
//        IntByReference pindex = null;
//        PointerByReference pcharstr = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogCorrelationBestChar(recog, pixs, pbox, pscore, pindex, pcharstr, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaIdentifyPixa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaIdentifyPixa() {
//        System.out.println("recogaIdentifyPixa");
//        L_Recoga recoga = null;
//        Pixa pixa = null;
//        Numa naid = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogaIdentifyPixa(recoga, pixa, naid, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogIdentifyPixa method, of class Leptonica.
//     */
//    @Test
//    public void testRecogIdentifyPixa() {
//        System.out.println("recogIdentifyPixa");
//        L_Recog recog = null;
//        Pixa pixa = null;
//        Numa naid = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogIdentifyPixa(recog, pixa, naid, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogIdentifyPix method, of class Leptonica.
//     */
//    @Test
//    public void testRecogIdentifyPix() {
//        System.out.println("recogIdentifyPix");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Pix.ByReference[] ppixdb = null;

//        int expResult = 0;
//        int result = instance.recogIdentifyPix(recog, pixs, ppixdb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSkipIdentify method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSkipIdentify() {
//        System.out.println("recogSkipIdentify");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogSkipIdentify(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rchaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testRchaDestroy() {
//        System.out.println("rchaDestroy");
//        L_Rcha.ByReference[] prcha = null;

//        instance.rchaDestroy(prcha);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rchDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testRchDestroy() {
//        System.out.println("rchDestroy");
//        L_Rch.ByReference[] prch = null;

//        instance.rchDestroy(prch);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rchaExtract method, of class Leptonica.
//     */
//    @Test
//    public void testRchaExtract() {
//        System.out.println("rchaExtract");
//        L_Rcha rcha = null;
//        Numa.ByReference[] pnaindex = null;
//        Numa.ByReference[] pnascore = null;
//        Sarray.ByReference[] psatext = null;
//        Numa.ByReference[] pnasample = null;
//        Numa.ByReference[] pnaxloc = null;
//        Numa.ByReference[] pnayloc = null;
//        Numa.ByReference[] pnawidth = null;

//        int expResult = 0;
//        int result = instance.rchaExtract(rcha, pnaindex, pnascore, psatext, pnasample, pnaxloc, pnayloc, pnawidth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rchExtract method, of class Leptonica.
//     */
//    @Test
//    public void testRchExtract() {
//        System.out.println("rchExtract");
//        L_Rch rch = null;
//        IntBuffer pindex = null;
//        FloatBuffer pscore = null;
//        PointerByReference ptext = null;
//        IntBuffer psample = null;
//        IntBuffer pxloc = null;
//        IntBuffer pyloc = null;
//        IntBuffer pwidth = null;

//        int expResult = 0;
//        int result = instance.rchExtract(rch, pindex, pscore, ptext, psample, pxloc, pyloc, pwidth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogProcessToIdentify method, of class Leptonica.
//     */
//    @Test
//    public void testRecogProcessToIdentify() {
//        System.out.println("recogProcessToIdentify");
//        L_Recog recog = null;
//        Pix pixs = null;
//        int pad = 0;

//        Pix expResult = null;
//        Pix result = instance.recogProcessToIdentify(recog, pixs, pad);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogPreSplittingFilter method, of class Leptonica.
//     */
//    @Test
//    public void testRecogPreSplittingFilter() {
//        System.out.println("recogPreSplittingFilter");
//        L_Recog recog = null;
//        Pix pixs = null;
//        float maxasp = 0.0F;
//        float minaf = 0.0F;
//        float maxaf = 0.0F;
//        int debug = 0;

//        Pix expResult = null;
//        Pix result = instance.recogPreSplittingFilter(recog, pixs, maxasp, minaf, maxaf, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSplittingFilter method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSplittingFilter() {
//        System.out.println("recogSplittingFilter");
//        L_Recog recog = null;
//        Pix pixs = null;
//        float maxasp = 0.0F;
//        float minaf = 0.0F;
//        float maxaf = 0.0F;
//        IntBuffer premove = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogSplittingFilter(recog, pixs, maxasp, minaf, maxaf, premove, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaExtractNumbers method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaExtractNumbers() {
//        System.out.println("recogaExtractNumbers");
//        L_Recoga recoga = null;
//        Boxa boxas = null;
//        float scorethresh = 0.0F;
//        int spacethresh = 0;
//        Boxaa.ByReference[] pbaa = null;
//        Numaa.ByReference[] pnaa = null;

//        Sarray expResult = null;
//        Sarray result = instance.recogaExtractNumbers(recoga, boxas, scorethresh, spacethresh, pbaa, pnaa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSetTemplateType method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSetTemplateType() {
//        System.out.println("recogSetTemplateType");
//        L_Recog recog = null;
//        int templ_type = 0;

//        int expResult = 0;
//        int result = instance.recogSetTemplateType(recog, templ_type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSetScaling method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSetScaling() {
//        System.out.println("recogSetScaling");
//        L_Recog recog = null;
//        int scalew = 0;
//        int scaleh = 0;

//        int expResult = 0;
//        int result = instance.recogSetScaling(recog, scalew, scaleh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogTrainLabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogTrainLabelled() {
//        System.out.println("recogTrainLabelled");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box box = null;
//        ByteBuffer text = null;
//        int multflag = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogTrainLabelled(recog, pixs, box, text, multflag, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogProcessMultLabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogProcessMultLabelled_6args_1() {
//        System.out.println("recogProcessMultLabelled");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box box = null;
//        ByteBuffer text = null;
//        Pixa.ByReference[] ppixa = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogProcessMultLabelled(recog, pixs, box, text, ppixa, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogProcessMultLabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogProcessMultLabelled_6args_2() {
//        System.out.println("recogProcessMultLabelled");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box box = null;
//        Pointer text = null;
//        Pixa.ByReference[] ppixa = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogProcessMultLabelled(recog, pixs, box, text, ppixa, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogProcessSingleLabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogProcessSingleLabelled_5args_1() {
//        System.out.println("recogProcessSingleLabelled");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box box = null;
//        ByteBuffer text = null;
//        Pixa.ByReference[] ppixa = null;

//        int expResult = 0;
//        int result = instance.recogProcessSingleLabelled(recog, pixs, box, text, ppixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogProcessSingleLabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogProcessSingleLabelled_5args_2() {
//        System.out.println("recogProcessSingleLabelled");
//        L_Recog recog = null;
//        Pix pixs = null;
//        Box box = null;
//        Pointer text = null;
//        Pixa.ByReference[] ppixa = null;

//        int expResult = 0;
//        int result = instance.recogProcessSingleLabelled(recog, pixs, box, text, ppixa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogAddSamples method, of class Leptonica.
//     */
//    @Test
//    public void testRecogAddSamples() {
//        System.out.println("recogAddSamples");
//        L_Recog recog = null;
//        Pixa pixa = null;
//        int classindex = 0;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogAddSamples(recog, pixa, classindex, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogScaleCharacter method, of class Leptonica.
//     */
//    @Test
//    public void testRecogScaleCharacter() {
//        System.out.println("recogScaleCharacter");
//        L_Recog recog = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.recogScaleCharacter(recog, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogAverageSamples method, of class Leptonica.
//     */
//    @Test
//    public void testRecogAverageSamples() {
//        System.out.println("recogAverageSamples");
//        L_Recog recog = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogAverageSamples(recog, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAccumulateSamples method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAccumulateSamples_5args_1() {
//        System.out.println("pixaAccumulateSamples");
//        Pixa pixa = null;
//        Pta pta = null;
//        Pix.ByReference[] ppixd = null;
//        FloatBuffer px = null;
//        FloatBuffer py = null;

//        int expResult = 0;
//        int result = instance.pixaAccumulateSamples(pixa, pta, ppixd, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAccumulateSamples method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAccumulateSamples_5args_2() {
//        System.out.println("pixaAccumulateSamples");
//        Pixa pixa = null;
//        Pta pta = null;
//        Pix.ByReference[] ppixd = null;
//        FloatByReference px = null;
//        FloatByReference py = null;

//        int expResult = 0;
//        int result = instance.pixaAccumulateSamples(pixa, pta, ppixd, px, py);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogTrainingFinished method, of class Leptonica.
//     */
//    @Test
//    public void testRecogTrainingFinished() {
//        System.out.println("recogTrainingFinished");
//        L_Recog recog = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogTrainingFinished(recog, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogRemoveOutliers method, of class Leptonica.
//     */
//    @Test
//    public void testRecogRemoveOutliers() {
//        System.out.println("recogRemoveOutliers");
//        L_Recog recog = null;
//        float targetscore = 0.0F;
//        float minfract = 0.0F;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogRemoveOutliers(recog, targetscore, minfract, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaTrainingDone method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaTrainingDone() {
//        System.out.println("recogaTrainingDone");
//        L_Recoga recoga = null;
//        IntBuffer pdone = null;

//        int expResult = 0;
//        int result = instance.recogaTrainingDone(recoga, pdone);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaFinishAveraging method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaFinishAveraging() {
//        System.out.println("recogaFinishAveraging");
//        L_Recoga recoga = null;

//        int expResult = 0;
//        int result = instance.recogaFinishAveraging(recoga);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogTrainUnlabelled method, of class Leptonica.
//     */
//    @Test
//    public void testRecogTrainUnlabelled() {
//        System.out.println("recogTrainUnlabelled");
//        L_Recog recog = null;
//        L_Recog recogboot = null;
//        Pix pixs = null;
//        Box box = null;
//        int singlechar = 0;
//        float minscore = 0.0F;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogTrainUnlabelled(recog, recogboot, pixs, box, singlechar, minscore, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogPadTrainingSet method, of class Leptonica.
//     */
//    @Test
//    public void testRecogPadTrainingSet() {
//        System.out.println("recogPadTrainingSet");
//        L_Recog.ByReference[] precog = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogPadTrainingSet(precog, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogBestCorrelForPadding method, of class Leptonica.
//     */
//    @Test
//    public void testRecogBestCorrelForPadding() {
//        System.out.println("recogBestCorrelForPadding");
//        L_Recog recog = null;
//        L_Recoga recoga = null;
//        Numa.ByReference[] pnaset = null;
//        Numa.ByReference[] pnaindex = null;
//        Numa.ByReference[] pnascore = null;
//        Numa.ByReference[] pnasum = null;
//        Pixa.ByReference[] ppixadb = null;

//        int expResult = 0;
//        int result = instance.recogBestCorrelForPadding(recog, recoga, pnaset, pnaindex, pnascore, pnasum, ppixadb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogCorrelAverages method, of class Leptonica.
//     */
//    @Test
//    public void testRecogCorrelAverages() {
//        System.out.println("recogCorrelAverages");
//        L_Recog recog1 = null;
//        L_Recog recog2 = null;
//        Numa.ByReference[] pnaindex = null;
//        Numa.ByReference[] pnascore = null;
//        Pixa.ByReference[] ppixadb = null;

//        int expResult = 0;
//        int result = instance.recogCorrelAverages(recog1, recog2, pnaindex, pnascore, ppixadb);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogSetPadParams method, of class Leptonica.
//     */
//    @Test
//    public void testRecogSetPadParams() {
//        System.out.println("recogSetPadParams");
//        L_Recog recog = null;
//        String bootdir = "";
//        String bootpattern = "";
//        String bootpath = "";
//        int type = 0;
//        int min_nopad = 0;
//        int max_afterpad = 0;

//        int expResult = 0;
//        int result = instance.recogSetPadParams(recog, bootdir, bootpattern, bootpath, type, min_nopad, max_afterpad);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogaShowContent method, of class Leptonica.
//     */
//    @Test
//    public void testRecogaShowContent() {
//        System.out.println("recogaShowContent");
//        PointerByReference fp = null;
//        L_Recoga recoga = null;
//        int display = 0;

//        int expResult = 0;
//        int result = instance.recogaShowContent(fp, recoga, display);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogShowContent method, of class Leptonica.
//     */
//    @Test
//    public void testRecogShowContent() {
//        System.out.println("recogShowContent");
//        PointerByReference fp = null;
//        L_Recog recog = null;
//        int display = 0;

//        int expResult = 0;
//        int result = instance.recogShowContent(fp, recog, display);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogDebugAverages method, of class Leptonica.
//     */
//    @Test
//    public void testRecogDebugAverages() {
//        System.out.println("recogDebugAverages");
//        L_Recog recog = null;
//        int debug = 0;

//        int expResult = 0;
//        int result = instance.recogDebugAverages(recog, debug);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogShowAverageTemplates method, of class Leptonica.
//     */
//    @Test
//    public void testRecogShowAverageTemplates() {
//        System.out.println("recogShowAverageTemplates");
//        L_Recog recog = null;

//        int expResult = 0;
//        int result = instance.recogShowAverageTemplates(recog);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogShowMatchesInRange method, of class Leptonica.
//     */
//    @Test
//    public void testRecogShowMatchesInRange() {
//        System.out.println("recogShowMatchesInRange");
//        L_Recog recog = null;
//        Pixa pixa = null;
//        float minscore = 0.0F;
//        float maxscore = 0.0F;
//        int display = 0;

//        int expResult = 0;
//        int result = instance.recogShowMatchesInRange(recog, pixa, minscore, maxscore, display);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of recogShowMatch method, of class Leptonica.
//     */
//    @Test
//    public void testRecogShowMatch() {
//        System.out.println("recogShowMatch");
//        L_Recog recog = null;
//        Pix pix1 = null;
//        Pix pix2 = null;
//        Box box = null;
//        int index = 0;
//        float score = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.recogShowMatch(recog, pix1, pix2, box, index, score);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestSetup method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestSetup() {
//        System.out.println("regTestSetup");
//        int argc = 0;
//        PointerByReference argv = null;
//        L_RegParams.ByReference[] prp = null;

//        int expResult = 0;
//        int result = instance.regTestSetup(argc, argv, prp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCleanup method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCleanup() {
//        System.out.println("regTestCleanup");
//        L_RegParams rp = null;

//        int expResult = 0;
//        int result = instance.regTestCleanup(rp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCompareValues method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCompareValues() {
//        System.out.println("regTestCompareValues");
//        L_RegParams rp = null;
//        float val1 = 0.0F;
//        float val2 = 0.0F;
//        float delta = 0.0F;

//        int expResult = 0;
//        int result = instance.regTestCompareValues(rp, val1, val2, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCompareStrings method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCompareStrings() {
//        System.out.println("regTestCompareStrings");
//        L_RegParams rp = null;
//        ByteBuffer string1 = null;
//        NativeSize bytes1 = null;
//        ByteBuffer string2 = null;
//        NativeSize bytes2 = null;

//        int expResult = 0;
//        int result = instance.regTestCompareStrings(rp, string1, bytes1, string2, bytes2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestComparePix method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestComparePix() {
//        System.out.println("regTestComparePix");
//        L_RegParams rp = null;
//        Pix pix1 = null;
//        Pix pix2 = null;

//        int expResult = 0;
//        int result = instance.regTestComparePix(rp, pix1, pix2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCompareSimilarPix method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCompareSimilarPix() {
//        System.out.println("regTestCompareSimilarPix");
//        L_RegParams rp = null;
//        Pix pix1 = null;
//        Pix pix2 = null;
//        int mindiff = 0;
//        float maxfract = 0.0F;
//        int printstats = 0;

//        int expResult = 0;
//        int result = instance.regTestCompareSimilarPix(rp, pix1, pix2, mindiff, maxfract, printstats);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCheckFile method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCheckFile() {
//        System.out.println("regTestCheckFile");
//        L_RegParams rp = null;
//        String localname = "";

//        int expResult = 0;
//        int result = instance.regTestCheckFile(rp, localname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestCompareFiles method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestCompareFiles() {
//        System.out.println("regTestCompareFiles");
//        L_RegParams rp = null;
//        int index1 = 0;
//        int index2 = 0;

//        int expResult = 0;
//        int result = instance.regTestCompareFiles(rp, index1, index2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of regTestWritePixAndCheck method, of class Leptonica.
//     */
//    @Test
//    public void testRegTestWritePixAndCheck() {
//        System.out.println("regTestWritePixAndCheck");
//        L_RegParams rp = null;
//        Pix pix = null;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.regTestWritePixAndCheck(rp, pix, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRasterop method, of class Leptonica.
//     */
//    @Test
//    public void testPixRasterop() {
//        System.out.println("pixRasterop");
//        Pix pixd = null;
//        int dx = 0;
//        int dy = 0;
//        int dw = 0;
//        int dh = 0;
//        int op = 0;
//        Pix pixs = null;
//        int sx = 0;
//        int sy = 0;

//        int expResult = 0;
//        int result = instance.pixRasterop(pixd, dx, dy, dw, dh, op, pixs, sx, sy);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRasteropVip method, of class Leptonica.
//     */
//    @Test
//    public void testPixRasteropVip() {
//        System.out.println("pixRasteropVip");
//        Pix pixd = null;
//        int bx = 0;
//        int bw = 0;
//        int vshift = 0;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixRasteropVip(pixd, bx, bw, vshift, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRasteropHip method, of class Leptonica.
//     */
//    @Test
//    public void testPixRasteropHip() {
//        System.out.println("pixRasteropHip");
//        Pix pixd = null;
//        int by = 0;
//        int bh = 0;
//        int hshift = 0;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixRasteropHip(pixd, by, bh, hshift, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixTranslate method, of class Leptonica.
//     */
//    @Test
//    public void testPixTranslate() {
//        System.out.println("pixTranslate");
//        Pix pixd = null;
//        Pix pixs = null;
//        int hshift = 0;
//        int vshift = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixTranslate(pixd, pixs, hshift, vshift, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRasteropIP method, of class Leptonica.
//     */
//    @Test
//    public void testPixRasteropIP() {
//        System.out.println("pixRasteropIP");
//        Pix pixd = null;
//        int hshift = 0;
//        int vshift = 0;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixRasteropIP(pixd, hshift, vshift, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRasteropFullImage method, of class Leptonica.
//     */
//    @Test
//    public void testPixRasteropFullImage() {
//        System.out.println("pixRasteropFullImage");
//        Pix pixd = null;
//        Pix pixs = null;
//        int op = 0;

//        int expResult = 0;
//        int result = instance.pixRasteropFullImage(pixd, pixs, op);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rasteropVipLow method, of class Leptonica.
//     */
//    @Test
//    public void testRasteropVipLow() {
//        System.out.println("rasteropVipLow");
//        IntBuffer data = null;
//        int pixw = 0;
//        int pixh = 0;
//        int depth = 0;
//        int wpl = 0;
//        int x = 0;
//        int w = 0;
//        int shift = 0;

//        instance.rasteropVipLow(data, pixw, pixh, depth, wpl, x, w, shift);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rasteropHipLow method, of class Leptonica.
//     */
//    @Test
//    public void testRasteropHipLow() {
//        System.out.println("rasteropHipLow");
//        IntBuffer data = null;
//        int pixh = 0;
//        int depth = 0;
//        int wpl = 0;
//        int y = 0;
//        int h = 0;
//        int shift = 0;

//        instance.rasteropHipLow(data, pixh, depth, wpl, y, h, shift);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rasteropUniLow method, of class Leptonica.
//     */
//    @Test
//    public void testRasteropUniLow() {
//        System.out.println("rasteropUniLow");
//        IntBuffer datad = null;
//        int dpixw = 0;
//        int dpixh = 0;
//        int depth = 0;
//        int dwpl = 0;
//        int dx = 0;
//        int dy = 0;
//        int dw = 0;
//        int dh = 0;
//        int op = 0;

//        instance.rasteropUniLow(datad, dpixw, dpixh, depth, dwpl, dx, dy, dw, dh, op);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rasteropLow method, of class Leptonica.
//     */
//    @Test
//    public void testRasteropLow() {
//        System.out.println("rasteropLow");
//        IntBuffer datad = null;
//        int dpixw = 0;
//        int dpixh = 0;
//        int depth = 0;
//        int dwpl = 0;
//        int dx = 0;
//        int dy = 0;
//        int dw = 0;
//        int dh = 0;
//        int op = 0;
//        IntBuffer datas = null;
//        int spixw = 0;
//        int spixh = 0;
//        int swpl = 0;
//        int sx = 0;
//        int sy = 0;

//        instance.rasteropLow(datad, dpixw, dpixh, depth, dwpl, dx, dy, dw, dh, op, datas, spixw, spixh, swpl, sx, sy);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotate method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotate() {
//        System.out.println("pixRotate");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int type = 0;
//        int incolor = 0;
//        int width = 0;
//        int height = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotate(pixs, angle, type, incolor, width, height);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixEmbedForRotation method, of class Leptonica.
//     */
//    @Test
//    public void testPixEmbedForRotation() {
//        System.out.println("pixEmbedForRotation");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;
//        int width = 0;
//        int height = 0;

//        Pix expResult = null;
//        Pix result = instance.pixEmbedForRotation(pixs, angle, incolor, width, height);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateBySampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateBySampling() {
//        System.out.println("pixRotateBySampling");
//        Pix pixs = null;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateBySampling(pixs, xcen, ycen, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateBinaryNice method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateBinaryNice() {
//        System.out.println("pixRotateBinaryNice");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateBinaryNice(pixs, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateWithAlpha() {
//        System.out.println("pixRotateWithAlpha");
//        Pix pixs = null;
//        float angle = 0.0F;
//        Pix pixg = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixRotateWithAlpha(pixs, angle, pixg, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAM method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAM() {
//        System.out.println("pixRotateAM");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAM(pixs, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMColor method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMColor() {
//        System.out.println("pixRotateAMColor");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMColor(pixs, angle, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMGray() {
//        System.out.println("pixRotateAMGray");
//        Pix pixs = null;
//        float angle = 0.0F;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMGray(pixs, angle, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMCorner method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMCorner() {
//        System.out.println("pixRotateAMCorner");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMCorner(pixs, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMColorCorner method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMColorCorner() {
//        System.out.println("pixRotateAMColorCorner");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int fillval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMColorCorner(pixs, angle, fillval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMGrayCorner method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMGrayCorner() {
//        System.out.println("pixRotateAMGrayCorner");
//        Pix pixs = null;
//        float angle = 0.0F;
//        byte grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMGrayCorner(pixs, angle, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateAMColorFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateAMColorFast() {
//        System.out.println("pixRotateAMColorFast");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int colorval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateAMColorFast(pixs, angle, colorval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rotateAMGrayCornerLow method, of class Leptonica.
//     */
//    @Test
//    public void testRotateAMGrayCornerLow() {
//        System.out.println("rotateAMGrayCornerLow");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        float angle = 0.0F;
//        byte grayval = 0;

//        instance.rotateAMGrayCornerLow(datad, w, h, wpld, datas, wpls, angle, grayval);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of rotateAMColorFastLow method, of class Leptonica.
//     */
//    @Test
//    public void testRotateAMColorFastLow() {
//        System.out.println("rotateAMColorFastLow");
//        IntBuffer datad = null;
//        int w = 0;
//        int h = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        float angle = 0.0F;
//        int colorval = 0;

//        instance.rotateAMColorFastLow(datad, w, h, wpld, datas, wpls, angle, colorval);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateOrth method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateOrth() {
//        System.out.println("pixRotateOrth");
//        Pix pixs = null;
//        int quads = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateOrth(pixs, quads);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotate180 method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotate180() {
//        System.out.println("pixRotate180");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixRotate180(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotate90 method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotate90() {
//        System.out.println("pixRotate90");
//        Pix pixs = null;
//        int direction = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotate90(pixs, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFlipLR method, of class Leptonica.
//     */
//    @Test
//    public void testPixFlipLR() {
//        System.out.println("pixFlipLR");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixFlipLR(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFlipTB method, of class Leptonica.
//     */
//    @Test
//    public void testPixFlipTB() {
//        System.out.println("pixFlipTB");
//        Pix pixd = null;
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixFlipTB(pixd, pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateShear method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateShear() {
//        System.out.println("pixRotateShear");
//        Pix pixs = null;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateShear(pixs, xcen, ycen, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotate2Shear method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotate2Shear() {
//        System.out.println("pixRotate2Shear");
//        Pix pixs = null;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotate2Shear(pixs, xcen, ycen, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotate3Shear method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotate3Shear() {
//        System.out.println("pixRotate3Shear");
//        Pix pixs = null;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotate3Shear(pixs, xcen, ycen, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateShearIP method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateShearIP() {
//        System.out.println("pixRotateShearIP");
//        Pix pixs = null;
//        int xcen = 0;
//        int ycen = 0;
//        float angle = 0.0F;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixRotateShearIP(pixs, xcen, ycen, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateShearCenter method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateShearCenter() {
//        System.out.println("pixRotateShearCenter");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRotateShearCenter(pixs, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRotateShearCenterIP method, of class Leptonica.
//     */
//    @Test
//    public void testPixRotateShearCenterIP() {
//        System.out.println("pixRotateShearCenterIP");
//        Pix pixs = null;
//        float angle = 0.0F;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixRotateShearCenterIP(pixs, angle, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixStrokeWidthTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixStrokeWidthTransform() {
//        System.out.println("pixStrokeWidthTransform");
//        Pix pixs = null;
//        int color = 0;
//        int depth = 0;
//        int nangles = 0;

//        Pix expResult = null;
//        Pix result = instance.pixStrokeWidthTransform(pixs, color, depth, nangles);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRunlengthTransform method, of class Leptonica.
//     */
//    @Test
//    public void testPixRunlengthTransform() {
//        System.out.println("pixRunlengthTransform");
//        Pix pixs = null;
//        int color = 0;
//        int direction = 0;
//        int depth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRunlengthTransform(pixs, color, direction, depth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindHorizontalRuns method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindHorizontalRuns() {
//        System.out.println("pixFindHorizontalRuns");
//        Pix pix = null;
//        int y = 0;
//        IntBuffer xstart = null;
//        IntBuffer xend = null;
//        IntBuffer pn = null;

//        int expResult = 0;
//        int result = instance.pixFindHorizontalRuns(pix, y, xstart, xend, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindVerticalRuns method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindVerticalRuns() {
//        System.out.println("pixFindVerticalRuns");
//        Pix pix = null;
//        int x = 0;
//        IntBuffer ystart = null;
//        IntBuffer yend = null;
//        IntBuffer pn = null;

//        int expResult = 0;
//        int result = instance.pixFindVerticalRuns(pix, x, ystart, yend, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindMaxRuns method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindMaxRuns() {
//        System.out.println("pixFindMaxRuns");
//        Pix pix = null;
//        int direction = 0;
//        Numa.ByReference[] pnastart = null;

//        Numa expResult = null;
//        Numa result = instance.pixFindMaxRuns(pix, direction, pnastart);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindMaxHorizontalRunOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindMaxHorizontalRunOnLine() {
//        System.out.println("pixFindMaxHorizontalRunOnLine");
//        Pix pix = null;
//        int y = 0;
//        IntBuffer pxstart = null;
//        IntBuffer psize = null;

//        int expResult = 0;
//        int result = instance.pixFindMaxHorizontalRunOnLine(pix, y, pxstart, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindMaxVerticalRunOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindMaxVerticalRunOnLine() {
//        System.out.println("pixFindMaxVerticalRunOnLine");
//        Pix pix = null;
//        int x = 0;
//        IntBuffer pystart = null;
//        IntBuffer psize = null;

//        int expResult = 0;
//        int result = instance.pixFindMaxVerticalRunOnLine(pix, x, pystart, psize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of runlengthMembershipOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testRunlengthMembershipOnLine() {
//        System.out.println("runlengthMembershipOnLine");
//        IntBuffer buffer = null;
//        int size = 0;
//        int depth = 0;
//        IntBuffer start = null;
//        IntBuffer end = null;
//        int n = 0;

//        int expResult = 0;
//        int result = instance.runlengthMembershipOnLine(buffer, size, depth, start, end, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeMSBitLocTab method, of class Leptonica.
//     */
//    @Test
//    public void testMakeMSBitLocTab() {
//        System.out.println("makeMSBitLocTab");
//        int bitval = 0;

//        IntByReference expResult = null;
//        IntByReference result = instance.makeMSBitLocTab(bitval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayCreate method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayCreate() {
//        System.out.println("sarrayCreate");
//        int n = 0;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayCreateInitialized method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayCreateInitialized() {
//        System.out.println("sarrayCreateInitialized");
//        int n = 0;
//        ByteBuffer initstr = null;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayCreateInitialized(n, initstr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayCreateWordsFromString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayCreateWordsFromString() {
//        System.out.println("sarrayCreateWordsFromString");
//        String string = "";

//        Sarray expResult = null;
//        Sarray result = instance.sarrayCreateWordsFromString(string);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayCreateLinesFromString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayCreateLinesFromString() {
//        System.out.println("sarrayCreateLinesFromString");
//        ByteBuffer string = null;
//        int blankflag = 0;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayCreateLinesFromString(string, blankflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayDestroy() {
//        System.out.println("sarrayDestroy");
//        Sarray.ByReference[] psa = null;

//        instance.sarrayDestroy(psa);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayCopy method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayCopy() {
//        System.out.println("sarrayCopy");
//        Sarray sa = null;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayCopy(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayClone method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayClone() {
//        System.out.println("sarrayClone");
//        Sarray sa = null;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayClone(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayAddString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayAddString() {
//        System.out.println("sarrayAddString");
//        Sarray sa = null;
//        ByteBuffer string = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.sarrayAddString(sa, string, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayRemoveString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayRemoveString() {
//        System.out.println("sarrayRemoveString");
//        Sarray sa = null;
//        int index = 0;

//        Pointer expResult = null;
//        Pointer result = instance.sarrayRemoveString(sa, index);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayReplaceString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayReplaceString() {
//        System.out.println("sarrayReplaceString");
//        Sarray sa = null;
//        int index = 0;
//        ByteBuffer newstr = null;
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.sarrayReplaceString(sa, index, newstr, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayClear method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayClear() {
//        System.out.println("sarrayClear");
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayClear(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayGetCount() {
//        System.out.println("sarrayGetCount");
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayGetCount(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayGetArray method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayGetArray() {
//        System.out.println("sarrayGetArray");
//        Sarray sa = null;
//        IntBuffer pnalloc = null;
//        IntBuffer pn = null;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.sarrayGetArray(sa, pnalloc, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayGetString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayGetString() {
//        System.out.println("sarrayGetString");
//        Sarray sa = null;
//        int index = 0;
//        int copyflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.sarrayGetString(sa, index, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayGetRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayGetRefcount() {
//        System.out.println("sarrayGetRefcount");
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayGetRefcount(sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayChangeRefcount method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayChangeRefcount() {
//        System.out.println("sarrayChangeRefcount");
//        Sarray sa = null;
//        int delta = 0;

//        int expResult = 0;
//        int result = instance.sarrayChangeRefcount(sa, delta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayToString method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayToString() {
//        System.out.println("sarrayToString");
//        Sarray sa = null;
//        int addnlflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.sarrayToString(sa, addnlflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayToStringRange method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayToStringRange() {
//        System.out.println("sarrayToStringRange");
//        Sarray sa = null;
//        int first = 0;
//        int nstrings = 0;
//        int addnlflag = 0;

//        Pointer expResult = null;
//        Pointer result = instance.sarrayToStringRange(sa, first, nstrings, addnlflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayConcatenate method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayConcatenate() {
//        System.out.println("sarrayConcatenate");
//        Sarray sa1 = null;
//        Sarray sa2 = null;

//        int expResult = 0;
//        int result = instance.sarrayConcatenate(sa1, sa2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayAppendRange method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayAppendRange() {
//        System.out.println("sarrayAppendRange");
//        Sarray sa1 = null;
//        Sarray sa2 = null;
//        int start = 0;
//        int end = 0;

//        int expResult = 0;
//        int result = instance.sarrayAppendRange(sa1, sa2, start, end);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayPadToSameSize method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayPadToSameSize() {
//        System.out.println("sarrayPadToSameSize");
//        Sarray sa1 = null;
//        Sarray sa2 = null;
//        ByteBuffer padstring = null;

//        int expResult = 0;
//        int result = instance.sarrayPadToSameSize(sa1, sa2, padstring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayConvertWordsToLines method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayConvertWordsToLines() {
//        System.out.println("sarrayConvertWordsToLines");
//        Sarray sa = null;
//        int linesize = 0;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayConvertWordsToLines(sa, linesize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarraySplitString method, of class Leptonica.
//     */
//    @Test
//    public void testSarraySplitString() {
//        System.out.println("sarraySplitString");
//        Sarray sa = null;
//        String str = "";
//        String separators = "";

//        int expResult = 0;
//        int result = instance.sarraySplitString(sa, str, separators);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarraySelectBySubstring method, of class Leptonica.
//     */
//    @Test
//    public void testSarraySelectBySubstring() {
//        System.out.println("sarraySelectBySubstring");
//        Sarray sain = null;
//        String substr = "";

//        Sarray expResult = null;
//        Sarray result = instance.sarraySelectBySubstring(sain, substr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarraySelectByRange method, of class Leptonica.
//     */
//    @Test
//    public void testSarraySelectByRange() {
//        System.out.println("sarraySelectByRange");
//        Sarray sain = null;
//        int first = 0;
//        int last = 0;

//        Sarray expResult = null;
//        Sarray result = instance.sarraySelectByRange(sain, first, last);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayParseRange method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayParseRange() {
//        System.out.println("sarrayParseRange");
//        Sarray sa = null;
//        int start = 0;
//        IntBuffer pactualstart = null;
//        IntBuffer pend = null;
//        IntBuffer pnewstart = null;
//        String substr = "";
//        int loc = 0;

//        int expResult = 0;
//        int result = instance.sarrayParseRange(sa, start, pactualstart, pend, pnewstart, substr, loc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarraySort method, of class Leptonica.
//     */
//    @Test
//    public void testSarraySort() {
//        System.out.println("sarraySort");
//        Sarray saout = null;
//        Sarray sain = null;
//        int sortorder = 0;

//        Sarray expResult = null;
//        Sarray result = instance.sarraySort(saout, sain, sortorder);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarraySortByIndex method, of class Leptonica.
//     */
//    @Test
//    public void testSarraySortByIndex() {
//        System.out.println("sarraySortByIndex");
//        Sarray sain = null;
//        Numa naindex = null;

//        Sarray expResult = null;
//        Sarray result = instance.sarraySortByIndex(sain, naindex);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringCompareLexical method, of class Leptonica.
//     */
//    @Test
//    public void testStringCompareLexical() {
//        System.out.println("stringCompareLexical");
//        String str1 = "";
//        String str2 = "";

//        int expResult = 0;
//        int result = instance.stringCompareLexical(str1, str2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayRead method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayRead() {
//        System.out.println("sarrayRead");
//        String filename = "";

//        Sarray expResult = null;
//        Sarray result = instance.sarrayRead(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayReadStream() {
//        System.out.println("sarrayReadStream");
//        PointerByReference fp = null;

//        Sarray expResult = null;
//        Sarray result = instance.sarrayReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayWrite method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayWrite() {
//        System.out.println("sarrayWrite");
//        String filename = "";
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayWrite(filename, sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayWriteStream() {
//        System.out.println("sarrayWriteStream");
//        PointerByReference fp = null;
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayWriteStream(fp, sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sarrayAppend method, of class Leptonica.
//     */
//    @Test
//    public void testSarrayAppend() {
//        System.out.println("sarrayAppend");
//        String filename = "";
//        Sarray sa = null;

//        int expResult = 0;
//        int result = instance.sarrayAppend(filename, sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getNumberedPathnamesInDirectory method, of class Leptonica.
//     */
//    @Test
//    public void testGetNumberedPathnamesInDirectory() {
//        System.out.println("getNumberedPathnamesInDirectory");
//        String dirname = "";
//        String substr = "";
//        int numpre = 0;
//        int numpost = 0;
//        int maxnum = 0;

//        Sarray expResult = null;
//        Sarray result = instance.getNumberedPathnamesInDirectory(dirname, substr, numpre, numpost, maxnum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getSortedPathnamesInDirectory method, of class Leptonica.
//     */
//    @Test
//    public void testGetSortedPathnamesInDirectory() {
//        System.out.println("getSortedPathnamesInDirectory");
//        String dirname = "";
//        String substr = "";
//        int first = 0;
//        int nfiles = 0;

//        Sarray expResult = null;
//        Sarray result = instance.getSortedPathnamesInDirectory(dirname, substr, first, nfiles);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertSortedToNumberedPathnames method, of class Leptonica.
//     */
//    @Test
//    public void testConvertSortedToNumberedPathnames() {
//        System.out.println("convertSortedToNumberedPathnames");
//        Sarray sa = null;
//        int numpre = 0;
//        int numpost = 0;
//        int maxnum = 0;

//        Sarray expResult = null;
//        Sarray result = instance.convertSortedToNumberedPathnames(sa, numpre, numpost, maxnum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getFilenamesInDirectory method, of class Leptonica.
//     */
//    @Test
//    public void testGetFilenamesInDirectory() {
//        System.out.println("getFilenamesInDirectory");
//        String dirname = "";

//        Sarray expResult = null;
//        Sarray result = instance.getFilenamesInDirectory(dirname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScale method, of class Leptonica.
//     */
//    @Test
//    public void testPixScale() {
//        System.out.println("pixScale");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScale(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToSize() {
//        System.out.println("pixScaleToSize");
//        Pix pixs = null;
//        int wd = 0;
//        int hd = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToSize(pixs, wd, hd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGeneral() {
//        System.out.println("pixScaleGeneral");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        float sharpfract = 0.0F;
//        int sharpwidth = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGeneral(pixs, scalex, scaley, sharpfract, sharpwidth);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleLI() {
//        System.out.println("pixScaleLI");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleLI(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleColorLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleColorLI() {
//        System.out.println("pixScaleColorLI");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleColorLI(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleColor2xLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleColor2xLI() {
//        System.out.println("pixScaleColor2xLI");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleColor2xLI(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleColor4xLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleColor4xLI() {
//        System.out.println("pixScaleColor4xLI");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleColor4xLI(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayLI() {
//        System.out.println("pixScaleGrayLI");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayLI(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGray2xLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGray2xLI() {
//        System.out.println("pixScaleGray2xLI");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGray2xLI(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGray4xLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGray4xLI() {
//        System.out.println("pixScaleGray4xLI");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGray4xLI(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleBySampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleBySampling() {
//        System.out.println("pixScaleBySampling");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleBySampling(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleBySamplingToSize method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleBySamplingToSize() {
//        System.out.println("pixScaleBySamplingToSize");
//        Pix pixs = null;
//        int wd = 0;
//        int hd = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleBySamplingToSize(pixs, wd, hd);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleByIntSampling method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleByIntSampling() {
//        System.out.println("pixScaleByIntSampling");
//        Pix pixs = null;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleByIntSampling(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleRGBToGrayFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleRGBToGrayFast() {
//        System.out.println("pixScaleRGBToGrayFast");
//        Pix pixs = null;
//        int factor = 0;
//        int color = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleRGBToGrayFast(pixs, factor, color);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleRGBToBinaryFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleRGBToBinaryFast() {
//        System.out.println("pixScaleRGBToBinaryFast");
//        Pix pixs = null;
//        int factor = 0;
//        int thresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleRGBToBinaryFast(pixs, factor, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayToBinaryFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayToBinaryFast() {
//        System.out.println("pixScaleGrayToBinaryFast");
//        Pix pixs = null;
//        int factor = 0;
//        int thresh = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayToBinaryFast(pixs, factor, thresh);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleSmooth method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleSmooth() {
//        System.out.println("pixScaleSmooth");
//        Pix pix = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleSmooth(pix, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleRGBToGray2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleRGBToGray2() {
//        System.out.println("pixScaleRGBToGray2");
//        Pix pixs = null;
//        float rwt = 0.0F;
//        float gwt = 0.0F;
//        float bwt = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleRGBToGray2(pixs, rwt, gwt, bwt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleAreaMap method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleAreaMap() {
//        System.out.println("pixScaleAreaMap");
//        Pix pix = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleAreaMap(pix, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleAreaMap2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleAreaMap2() {
//        System.out.println("pixScaleAreaMap2");
//        Pix pix = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleAreaMap2(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleBinary() {
//        System.out.println("pixScaleBinary");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleBinary(pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray() {
//        System.out.println("pixScaleToGray");
//        Pix pixs = null;
//        float scalefactor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray(pixs, scalefactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGrayFast method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGrayFast() {
//        System.out.println("pixScaleToGrayFast");
//        Pix pixs = null;
//        float scalefactor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGrayFast(pixs, scalefactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray2() {
//        System.out.println("pixScaleToGray2");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray2(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray3 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray3() {
//        System.out.println("pixScaleToGray3");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray3(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray4 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray4() {
//        System.out.println("pixScaleToGray4");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray4(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray6 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray6() {
//        System.out.println("pixScaleToGray6");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray6(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray8 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray8() {
//        System.out.println("pixScaleToGray8");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray8(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGray16 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGray16() {
//        System.out.println("pixScaleToGray16");
//        Pix pixs = null;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGray16(pixs);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleToGrayMipmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleToGrayMipmap() {
//        System.out.println("pixScaleToGrayMipmap");
//        Pix pixs = null;
//        float scalefactor = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleToGrayMipmap(pixs, scalefactor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleMipmap method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleMipmap() {
//        System.out.println("pixScaleMipmap");
//        Pix pixs1 = null;
//        Pix pixs2 = null;
//        float scale = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleMipmap(pixs1, pixs2, scale);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExpandReplicate method, of class Leptonica.
//     */
//    @Test
//    public void testPixExpandReplicate() {
//        System.out.println("pixExpandReplicate");
//        Pix pixs = null;
//        int factor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExpandReplicate(pixs, factor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayMinMax method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayMinMax() {
//        System.out.println("pixScaleGrayMinMax");
//        Pix pixs = null;
//        int xfact = 0;
//        int yfact = 0;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayMinMax(pixs, xfact, yfact, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayMinMax2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayMinMax2() {
//        System.out.println("pixScaleGrayMinMax2");
//        Pix pixs = null;
//        int type = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayMinMax2(pixs, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayRankCascade method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayRankCascade() {
//        System.out.println("pixScaleGrayRankCascade");
//        Pix pixs = null;
//        int level1 = 0;
//        int level2 = 0;
//        int level3 = 0;
//        int level4 = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayRankCascade(pixs, level1, level2, level3, level4);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleGrayRank2 method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleGrayRank2() {
//        System.out.println("pixScaleGrayRank2");
//        Pix pixs = null;
//        int rank = 0;

//        Pix expResult = null;
//        Pix result = instance.pixScaleGrayRank2(pixs, rank);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleAndTransferAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleAndTransferAlpha() {
//        System.out.println("pixScaleAndTransferAlpha");
//        Pix pixd = null;
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;

//        int expResult = 0;
//        int result = instance.pixScaleAndTransferAlpha(pixd, pixs, scalex, scaley);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixScaleWithAlpha method, of class Leptonica.
//     */
//    @Test
//    public void testPixScaleWithAlpha() {
//        System.out.println("pixScaleWithAlpha");
//        Pix pixs = null;
//        float scalex = 0.0F;
//        float scaley = 0.0F;
//        Pix pixg = null;
//        float fract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixScaleWithAlpha(pixs, scalex, scaley, pixg, fract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//

//    /**
//     * Test of scaleColor2xLILow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleColor2xLILow() {
//        System.out.println("scaleColor2xLILow");
//        IntBuffer datad = null;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int wpls = 0;

//        instance.scaleColor2xLILow(datad, wpld, datas, ws, hs, wpls);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleColor2xLILineLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleColor2xLILineLow() {
//        System.out.println("scaleColor2xLILineLow");
//        IntBuffer lined = null;
//        int wpld = 0;
//        IntBuffer lines = null;
//        int ws = 0;
//        int wpls = 0;
//        int lastlineflag = 0;

//        instance.scaleColor2xLILineLow(lined, wpld, lines, ws, wpls, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleGray2xLILow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleGray2xLILow() {
//        System.out.println("scaleGray2xLILow");
//        IntBuffer datad = null;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int wpls = 0;

//        instance.scaleGray2xLILow(datad, wpld, datas, ws, hs, wpls);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleGray2xLILineLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleGray2xLILineLow() {
//        System.out.println("scaleGray2xLILineLow");
//        IntBuffer lined = null;
//        int wpld = 0;
//        IntBuffer lines = null;
//        int ws = 0;
//        int wpls = 0;
//        int lastlineflag = 0;

//        instance.scaleGray2xLILineLow(lined, wpld, lines, ws, wpls, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleGray4xLILow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleGray4xLILow() {
//        System.out.println("scaleGray4xLILow");
//        IntBuffer datad = null;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int wpls = 0;

//        instance.scaleGray4xLILow(datad, wpld, datas, ws, hs, wpls);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleGray4xLILineLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleGray4xLILineLow() {
//        System.out.println("scaleGray4xLILineLow");
//        IntBuffer lined = null;
//        int wpld = 0;
//        IntBuffer lines = null;
//        int ws = 0;
//        int wpls = 0;
//        int lastlineflag = 0;

//        instance.scaleGray4xLILineLow(lined, wpld, lines, ws, wpls, lastlineflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleBySamplingLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleBySamplingLow() {
//        System.out.println("scaleBySamplingLow");
//        IntBuffer datad = null;
//        int wd = 0;
//        int hd = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int d = 0;
//        int wpls = 0;

//        int expResult = 0;
//        int result = instance.scaleBySamplingLow(datad, wd, hd, wpld, datas, ws, hs, d, wpls);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleSmoothLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleSmoothLow() {
//        System.out.println("scaleSmoothLow");
//        IntBuffer datad = null;
//        int wd = 0;
//        int hd = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int d = 0;
//        int wpls = 0;
//        int size = 0;

//        int expResult = 0;
//        int result = instance.scaleSmoothLow(datad, wd, hd, wpld, datas, ws, hs, d, wpls, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleRGBToGray2Low method, of class Leptonica.
//     */
//    @Test
//    public void testScaleRGBToGray2Low() {
//        System.out.println("scaleRGBToGray2Low");
//        IntBuffer datad = null;
//        int wd = 0;
//        int hd = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int wpls = 0;
//        float rwt = 0.0F;
//        float gwt = 0.0F;
//        float bwt = 0.0F;

//        instance.scaleRGBToGray2Low(datad, wd, hd, wpld, datas, wpls, rwt, gwt, bwt);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleColorAreaMapLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleColorAreaMapLow() {
//        System.out.println("scaleColorAreaMapLow");
//        IntBuffer datad = null;
//        int wd = 0;
//        int hd = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int wpls = 0;

//        instance.scaleColorAreaMapLow(datad, wd, hd, wpld, datas, ws, hs, wpls);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of scaleGrayAreaMapLow method, of class Leptonica.
//     */
//    @Test
//    public void testScaleGrayAreaMapLow() {
//        System.out.println("scaleGrayAreaMapLow");
//        IntBuffer datad = null;
//        int wd = 0;
//        int hd = 0;
//        int wpld = 0;
//        IntBuffer datas = null;
//        int ws = 0;
//        int hs = 0;
//        int wpls = 0;

//        instance.scaleGrayAreaMapLow(datad, wd, hd, wpld, datas, ws, hs, wpls);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillBinary method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillBinary() {
//        System.out.println("pixSeedfillBinary");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSeedfillBinary(pixd, pixs, pixm, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillBinaryRestricted method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillBinaryRestricted() {
//        System.out.println("pixSeedfillBinaryRestricted");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;
//        int xmax = 0;
//        int ymax = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSeedfillBinaryRestricted(pixd, pixs, pixm, connectivity, xmax, ymax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHolesByFilling method, of class Leptonica.
//     */
//    @Test
//    public void testPixHolesByFilling() {
//        System.out.println("pixHolesByFilling");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHolesByFilling(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFillClosedBorders method, of class Leptonica.
//     */
//    @Test
//    public void testPixFillClosedBorders() {
//        System.out.println("pixFillClosedBorders");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFillClosedBorders(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixExtractBorderConnComps method, of class Leptonica.
//     */
//    @Test
//    public void testPixExtractBorderConnComps() {
//        System.out.println("pixExtractBorderConnComps");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixExtractBorderConnComps(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveBorderConnComps method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveBorderConnComps() {
//        System.out.println("pixRemoveBorderConnComps");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveBorderConnComps(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFillBgFromBorder method, of class Leptonica.
//     */
//    @Test
//    public void testPixFillBgFromBorder() {
//        System.out.println("pixFillBgFromBorder");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixFillBgFromBorder(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFillHolesToBoundingRect method, of class Leptonica.
//     */
//    @Test
//    public void testPixFillHolesToBoundingRect() {
//        System.out.println("pixFillHolesToBoundingRect");
//        Pix pixs = null;
//        int minsize = 0;
//        float maxhfract = 0.0F;
//        float minfgfract = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixFillHolesToBoundingRect(pixs, minsize, maxhfract, minfgfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillGray method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillGray() {
//        System.out.println("pixSeedfillGray");
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfillGray(pixs, pixm, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillGrayInv method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillGrayInv() {
//        System.out.println("pixSeedfillGrayInv");
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfillGrayInv(pixs, pixm, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillGraySimple method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillGraySimple() {
//        System.out.println("pixSeedfillGraySimple");
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfillGraySimple(pixs, pixm, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillGrayInvSimple method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillGrayInvSimple() {
//        System.out.println("pixSeedfillGrayInvSimple");
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;

//        int expResult = 0;
//        int result = instance.pixSeedfillGrayInvSimple(pixs, pixm, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedfillGrayBasin method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedfillGrayBasin() {
//        System.out.println("pixSeedfillGrayBasin");
//        Pix pixb = null;
//        Pix pixm = null;
//        int delta = 0;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSeedfillGrayBasin(pixb, pixm, delta, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDistanceFunction method, of class Leptonica.
//     */
//    @Test
//    public void testPixDistanceFunction() {
//        System.out.println("pixDistanceFunction");
//        Pix pixs = null;
//        int connectivity = 0;
//        int outdepth = 0;
//        int boundcond = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDistanceFunction(pixs, connectivity, outdepth, boundcond);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSeedspread method, of class Leptonica.
//     */
//    @Test
//    public void testPixSeedspread() {
//        System.out.println("pixSeedspread");
//        Pix pixs = null;
//        int connectivity = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSeedspread(pixs, connectivity);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixLocalExtrema method, of class Leptonica.
//     */
//    @Test
//    public void testPixLocalExtrema() {
//        System.out.println("pixLocalExtrema");
//        Pix pixs = null;
//        int maxmin = 0;
//        int minmax = 0;
//        Pix.ByReference[] ppixmin = null;
//        Pix.ByReference[] ppixmax = null;

//        int expResult = 0;
//        int result = instance.pixLocalExtrema(pixs, maxmin, minmax, ppixmin, ppixmax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectedLocalExtrema method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectedLocalExtrema() {
//        System.out.println("pixSelectedLocalExtrema");
//        Pix pixs = null;
//        int mindist = 0;
//        Pix.ByReference[] ppixmin = null;
//        Pix.ByReference[] ppixmax = null;

//        int expResult = 0;
//        int result = instance.pixSelectedLocalExtrema(pixs, mindist, ppixmin, ppixmax);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindEqualValues method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindEqualValues() {
//        System.out.println("pixFindEqualValues");
//        Pix pixs1 = null;
//        Pix pixs2 = null;

//        Pix expResult = null;
//        Pix result = instance.pixFindEqualValues(pixs1, pixs2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSelectMinInConnComp method, of class Leptonica.
//     */
//    @Test
//    public void testPixSelectMinInConnComp() {
//        System.out.println("pixSelectMinInConnComp");
//        Pix pixs = null;
//        Pix pixm = null;
//        Pta.ByReference[] ppta = null;
//        Numa.ByReference[] pnav = null;

//        int expResult = 0;
//        int result = instance.pixSelectMinInConnComp(pixs, pixm, ppta, pnav);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRemoveSeededComponents method, of class Leptonica.
//     */
//    @Test
//    public void testPixRemoveSeededComponents() {
//        System.out.println("pixRemoveSeededComponents");
//        Pix pixd = null;
//        Pix pixs = null;
//        Pix pixm = null;
//        int connectivity = 0;
//        int bordersize = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRemoveSeededComponents(pixd, pixs, pixm, connectivity, bordersize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaCreate method, of class Leptonica.
//     */
//    @Test
//    public void testSelaCreate() {
//        System.out.println("selaCreate");
//        int n = 0;

//        Sela expResult = null;
//        Sela result = instance.selaCreate(n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testSelaDestroy() {
//        System.out.println("selaDestroy");
//        Sela.ByReference[] psela = null;

//        instance.selaDestroy(psela);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreate method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreate() {
//        System.out.println("selCreate");
//        int height = 0;
//        int width = 0;
//        String name = "";

//        Sel expResult = null;
//        Sel result = instance.selCreate(height, width, name);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testSelDestroy() {
//        System.out.println("selDestroy");
//        PointerByReference psel = null;

//        instance.selDestroy(psel);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCopy method, of class Leptonica.
//     */
//    @Test
//    public void testSelCopy() {
//        System.out.println("selCopy");
//        Pointer sel = null;

//        Sel expResult = null;
//        Sel result = instance.selCopy(sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateBrick method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateBrick() {
//        System.out.println("selCreateBrick");
//        int h = 0;
//        int w = 0;
//        int cy = 0;
//        int cx = 0;
//        int type = 0;

//        Sel expResult = null;
//        Sel result = instance.selCreateBrick(h, w, cy, cx, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateComb method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateComb() {
//        System.out.println("selCreateComb");
//        int factor1 = 0;
//        int factor2 = 0;
//        int direction = 0;

//        Sel expResult = null;
//        Sel result = instance.selCreateComb(factor1, factor2, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of create2dIntArray method, of class Leptonica.
//     */
//    @Test
//    public void testCreate2dIntArray() {
//        System.out.println("create2dIntArray");
//        int sy = 0;
//        int sx = 0;

//        PointerByReference expResult = null;
//        PointerByReference result = instance.create2dIntArray(sy, sx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddSel method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddSel() {
//        System.out.println("selaAddSel");
//        Sela sela = null;
//        Pointer sel = null;
//        String selname = "";
//        int copyflag = 0;

//        int expResult = 0;
//        int result = instance.selaAddSel(sela, sel, selname, copyflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testSelaGetCount() {
//        System.out.println("selaGetCount");
//        Sela sela = null;

//        int expResult = 0;
//        int result = instance.selaGetCount(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaGetSel method, of class Leptonica.
//     */
//    @Test
//    public void testSelaGetSel() {
//        System.out.println("selaGetSel");
//        Sela sela = null;
//        int i = 0;

//        Sel expResult = null;
//        Sel result = instance.selaGetSel(sela, i);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selGetName method, of class Leptonica.
//     */
//    @Test
//    public void testSelGetName() {
//        System.out.println("selGetName");
//        Pointer sel = null;

//        Pointer expResult = null;
//        Pointer result = instance.selGetName(sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selSetName method, of class Leptonica.
//     */
//    @Test
//    public void testSelSetName() {
//        System.out.println("selSetName");
//        Pointer sel = null;
//        String name = "";

//        int expResult = 0;
//        int result = instance.selSetName(sel, name);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaFindSelByName method, of class Leptonica.
//     */
//    @Test
//    public void testSelaFindSelByName() {
//        System.out.println("selaFindSelByName");
//        Sela sela = null;
//        String name = "";
//        IntBuffer pindex = null;
//        PointerByReference psel = null;

//        int expResult = 0;
//        int result = instance.selaFindSelByName(sela, name, pindex, psel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selGetElement method, of class Leptonica.
//     */
//    @Test
//    public void testSelGetElement() {
//        System.out.println("selGetElement");
//        Pointer sel = null;
//        int row = 0;
//        int col = 0;
//        IntBuffer ptype = null;

//        int expResult = 0;
//        int result = instance.selGetElement(sel, row, col, ptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selSetElement method, of class Leptonica.
//     */
//    @Test
//    public void testSelSetElement() {
//        System.out.println("selSetElement");
//        Pointer sel = null;
//        int row = 0;
//        int col = 0;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.selSetElement(sel, row, col, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selGetParameters method, of class Leptonica.
//     */
//    @Test
//    public void testSelGetParameters() {
//        System.out.println("selGetParameters");
//        Pointer sel = null;
//        IntBuffer psy = null;
//        IntBuffer psx = null;
//        IntBuffer pcy = null;
//        IntBuffer pcx = null;

//        int expResult = 0;
//        int result = instance.selGetParameters(sel, psy, psx, pcy, pcx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selSetOrigin method, of class Leptonica.
//     */
//    @Test
//    public void testSelSetOrigin() {
//        System.out.println("selSetOrigin");
//        Pointer sel = null;
//        int cy = 0;
//        int cx = 0;

//        int expResult = 0;
//        int result = instance.selSetOrigin(sel, cy, cx);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selGetTypeAtOrigin method, of class Leptonica.
//     */
//    @Test
//    public void testSelGetTypeAtOrigin() {
//        System.out.println("selGetTypeAtOrigin");
//        Pointer sel = null;
//        IntBuffer ptype = null;

//        int expResult = 0;
//        int result = instance.selGetTypeAtOrigin(sel, ptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaGetBrickName method, of class Leptonica.
//     */
//    @Test
//    public void testSelaGetBrickName() {
//        System.out.println("selaGetBrickName");
//        Sela sela = null;
//        int hsize = 0;
//        int vsize = 0;

//        Pointer expResult = null;
//        Pointer result = instance.selaGetBrickName(sela, hsize, vsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaGetCombName method, of class Leptonica.
//     */
//    @Test
//    public void testSelaGetCombName() {
//        System.out.println("selaGetCombName");
//        Sela sela = null;
//        int size = 0;
//        int direction = 0;

//        Pointer expResult = null;
//        Pointer result = instance.selaGetCombName(sela, size, direction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getCompositeParameters method, of class Leptonica.
//     */
//    @Test
//    public void testGetCompositeParameters() {
//        System.out.println("getCompositeParameters");
//        int size = 0;
//        IntBuffer psize1 = null;
//        IntBuffer psize2 = null;
//        PointerByReference pnameh1 = null;
//        PointerByReference pnameh2 = null;
//        PointerByReference pnamev1 = null;
//        PointerByReference pnamev2 = null;

//        int expResult = 0;
//        int result = instance.getCompositeParameters(size, psize1, psize2, pnameh1, pnameh2, pnamev1, pnamev2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaGetSelnames method, of class Leptonica.
//     */
//    @Test
//    public void testSelaGetSelnames() {
//        System.out.println("selaGetSelnames");
//        Sela sela = null;

//        Sarray expResult = null;
//        Sarray result = instance.selaGetSelnames(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selFindMaxTranslations method, of class Leptonica.
//     */
//    @Test
//    public void testSelFindMaxTranslations() {
//        System.out.println("selFindMaxTranslations");
//        Pointer sel = null;
//        IntBuffer pxp = null;
//        IntBuffer pyp = null;
//        IntBuffer pxn = null;
//        IntBuffer pyn = null;

//        int expResult = 0;
//        int result = instance.selFindMaxTranslations(sel, pxp, pyp, pxn, pyn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selRotateOrth method, of class Leptonica.
//     */
//    @Test
//    public void testSelRotateOrth() {
//        System.out.println("selRotateOrth");
//        Pointer sel = null;
//        int quads = 0;

//        Sel expResult = null;
//        Sel result = instance.selRotateOrth(sel, quads);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaRead method, of class Leptonica.
//     */
//    @Test
//    public void testSelaRead() {
//        System.out.println("selaRead");
//        String fname = "";

//        Sela expResult = null;
//        Sela result = instance.selaRead(fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testSelaReadStream() {
//        System.out.println("selaReadStream");
//        PointerByReference fp = null;

//        Sela expResult = null;
//        Sela result = instance.selaReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selRead method, of class Leptonica.
//     */
//    @Test
//    public void testSelRead() {
//        System.out.println("selRead");
//        String fname = "";

//        Sel expResult = null;
//        Sel result = instance.selRead(fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testSelReadStream() {
//        System.out.println("selReadStream");
//        PointerByReference fp = null;

//        Sel expResult = null;
//        Sel result = instance.selReadStream(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaWrite method, of class Leptonica.
//     */
//    @Test
//    public void testSelaWrite() {
//        System.out.println("selaWrite");
//        String fname = "";
//        Sela sela = null;

//        int expResult = 0;
//        int result = instance.selaWrite(fname, sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testSelaWriteStream() {
//        System.out.println("selaWriteStream");
//        PointerByReference fp = null;
//        Sela sela = null;

//        int expResult = 0;
//        int result = instance.selaWriteStream(fp, sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selWrite method, of class Leptonica.
//     */
//    @Test
//    public void testSelWrite() {
//        System.out.println("selWrite");
//        String fname = "";
//        Pointer sel = null;

//        int expResult = 0;
//        int result = instance.selWrite(fname, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testSelWriteStream() {
//        System.out.println("selWriteStream");
//        PointerByReference fp = null;
//        Pointer sel = null;

//        int expResult = 0;
//        int result = instance.selWriteStream(fp, sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateFromString method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateFromString() {
//        System.out.println("selCreateFromString");
//        String text = "";
//        int h = 0;
//        int w = 0;
//        String name = "";

//        Sel expResult = null;
//        Sel result = instance.selCreateFromString(text, h, w, name);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selPrintToString method, of class Leptonica.
//     */
//    @Test
//    public void testSelPrintToString() {
//        System.out.println("selPrintToString");
//        Pointer sel = null;

//        Pointer expResult = null;
//        Pointer result = instance.selPrintToString(sel);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaCreateFromFile method, of class Leptonica.
//     */
//    @Test
//    public void testSelaCreateFromFile() {
//        System.out.println("selaCreateFromFile");
//        String filename = "";

//        Sela expResult = null;
//        Sela result = instance.selaCreateFromFile(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateFromPta method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateFromPta() {
//        System.out.println("selCreateFromPta");
//        Pta pta = null;
//        int cy = 0;
//        int cx = 0;
//        String name = "";

//        Sel expResult = null;
//        Sel result = instance.selCreateFromPta(pta, cy, cx, name);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateFromPix method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateFromPix() {
//        System.out.println("selCreateFromPix");
//        Pix pix = null;
//        int cy = 0;
//        int cx = 0;
//        String name = "";

//        Sel expResult = null;
//        Sel result = instance.selCreateFromPix(pix, cy, cx, name);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selReadFromColorImage method, of class Leptonica.
//     */
//    @Test
//    public void testSelReadFromColorImage() {
//        System.out.println("selReadFromColorImage");
//        String pathname = "";

//        Sel expResult = null;
//        Sel result = instance.selReadFromColorImage(pathname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selCreateFromColorPix method, of class Leptonica.
//     */
//    @Test
//    public void testSelCreateFromColorPix() {
//        System.out.println("selCreateFromColorPix");
//        Pix pixs = null;
//        ByteBuffer selname = null;

//        Sel expResult = null;
//        Sel result = instance.selCreateFromColorPix(pixs, selname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selDisplayInPix method, of class Leptonica.
//     */
//    @Test
//    public void testSelDisplayInPix() {
//        System.out.println("selDisplayInPix");
//        Pointer sel = null;
//        int size = 0;
//        int gthick = 0;

//        Pix expResult = null;
//        Pix result = instance.selDisplayInPix(sel, size, gthick);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaDisplayInPix method, of class Leptonica.
//     */
//    @Test
//    public void testSelaDisplayInPix() {
//        System.out.println("selaDisplayInPix");
//        Sela sela = null;
//        int size = 0;
//        int gthick = 0;
//        int spacing = 0;
//        int ncols = 0;

//        Pix expResult = null;
//        Pix result = instance.selaDisplayInPix(sela, size, gthick, spacing, ncols);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddBasic method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddBasic() {
//        System.out.println("selaAddBasic");
//        Sela sela = null;

//        Sela expResult = null;
//        Sela result = instance.selaAddBasic(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddHitMiss method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddHitMiss() {
//        System.out.println("selaAddHitMiss");
//        Sela sela = null;

//        Sela expResult = null;
//        Sela result = instance.selaAddHitMiss(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddDwaLinear method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddDwaLinear() {
//        System.out.println("selaAddDwaLinear");
//        Sela sela = null;

//        Sela expResult = null;
//        Sela result = instance.selaAddDwaLinear(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddDwaCombs method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddDwaCombs() {
//        System.out.println("selaAddDwaCombs");
//        Sela sela = null;

//        Sela expResult = null;
//        Sela result = instance.selaAddDwaCombs(sela);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddCrossJunctions method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddCrossJunctions() {
//        System.out.println("selaAddCrossJunctions");
//        Sela sela = null;
//        float hlsize = 0.0F;
//        float mdist = 0.0F;
//        int norient = 0;
//        int debugflag = 0;

//        Sela expResult = null;
//        Sela result = instance.selaAddCrossJunctions(sela, hlsize, mdist, norient, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of selaAddTJunctions method, of class Leptonica.
//     */
//    @Test
//    public void testSelaAddTJunctions() {
//        System.out.println("selaAddTJunctions");
//        Sela sela = null;
//        float hlsize = 0.0F;
//        float mdist = 0.0F;
//        int norient = 0;
//        int debugflag = 0;

//        Sela expResult = null;
//        Sela result = instance.selaAddTJunctions(sela, hlsize, mdist, norient, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateSelWithRuns method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateSelWithRuns() {
//        System.out.println("pixGenerateSelWithRuns");
//        Pix pixs = null;
//        int nhlines = 0;
//        int nvlines = 0;
//        int distance = 0;
//        int minlength = 0;
//        int toppix = 0;
//        int botpix = 0;
//        int leftpix = 0;
//        int rightpix = 0;
//        Pix.ByReference[] ppixe = null;

//        Sel expResult = null;
//        Sel result = instance.pixGenerateSelWithRuns(pixs, nhlines, nvlines, distance, minlength, toppix, botpix, leftpix, rightpix, ppixe);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateSelRandom method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateSelRandom() {
//        System.out.println("pixGenerateSelRandom");
//        Pix pixs = null;
//        float hitfract = 0.0F;
//        float missfract = 0.0F;
//        int distance = 0;
//        int toppix = 0;
//        int botpix = 0;
//        int leftpix = 0;
//        int rightpix = 0;
//        Pix.ByReference[] ppixe = null;

//        Sel expResult = null;
//        Sel result = instance.pixGenerateSelRandom(pixs, hitfract, missfract, distance, toppix, botpix, leftpix, rightpix, ppixe);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGenerateSelBoundary method, of class Leptonica.
//     */
//    @Test
//    public void testPixGenerateSelBoundary() {
//        System.out.println("pixGenerateSelBoundary");
//        Pix pixs = null;
//        int hitdist = 0;
//        int missdist = 0;
//        int hitskip = 0;
//        int missskip = 0;
//        int topflag = 0;
//        int botflag = 0;
//        int leftflag = 0;
//        int rightflag = 0;
//        Pix.ByReference[] ppixe = null;

//        Sel expResult = null;
//        Sel result = instance.pixGenerateSelBoundary(pixs, hitdist, missdist, hitskip, missskip, topflag, botflag, leftflag, rightflag, ppixe);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRunCentersOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRunCentersOnLine() {
//        System.out.println("pixGetRunCentersOnLine");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;
//        int minlength = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetRunCentersOnLine(pixs, x, y, minlength);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixGetRunsOnLine method, of class Leptonica.
//     */
//    @Test
//    public void testPixGetRunsOnLine() {
//        System.out.println("pixGetRunsOnLine");
//        Pix pixs = null;
//        int x1 = 0;
//        int y1 = 0;
//        int x2 = 0;
//        int y2 = 0;

//        Numa expResult = null;
//        Numa result = instance.pixGetRunsOnLine(pixs, x1, y1, x2, y2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSubsampleBoundaryPixels method, of class Leptonica.
//     */
//    @Test
//    public void testPixSubsampleBoundaryPixels() {
//        System.out.println("pixSubsampleBoundaryPixels");
//        Pix pixs = null;
//        int skip = 0;

//        Pta expResult = null;
//        Pta result = instance.pixSubsampleBoundaryPixels(pixs, skip);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of adjacentOnPixelInRaster method, of class Leptonica.
//     */
//    @Test
//    public void testAdjacentOnPixelInRaster() {
//        System.out.println("adjacentOnPixelInRaster");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;
//        IntBuffer pxa = null;
//        IntBuffer pya = null;

//        int expResult = 0;
//        int result = instance.adjacentOnPixelInRaster(pixs, x, y, pxa, pya);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayHitMissSel method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayHitMissSel() {
//        System.out.println("pixDisplayHitMissSel");
//        Pix pixs = null;
//        Pointer sel = null;
//        int scalefactor = 0;
//        int hitcolor = 0;
//        int misscolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixDisplayHitMissSel(pixs, sel, scalefactor, hitcolor, misscolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHShear method, of class Leptonica.
//     */
//    @Test
//    public void testPixHShear() {
//        System.out.println("pixHShear");
//        Pix pixd = null;
//        Pix pixs = null;
//        int yloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHShear(pixd, pixs, yloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVShear method, of class Leptonica.
//     */
//    @Test
//    public void testPixVShear() {
//        System.out.println("pixVShear");
//        Pix pixd = null;
//        Pix pixs = null;
//        int xloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixVShear(pixd, pixs, xloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHShearCorner method, of class Leptonica.
//     */
//    @Test
//    public void testPixHShearCorner() {
//        System.out.println("pixHShearCorner");
//        Pix pixd = null;
//        Pix pixs = null;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHShearCorner(pixd, pixs, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVShearCorner method, of class Leptonica.
//     */
//    @Test
//    public void testPixVShearCorner() {
//        System.out.println("pixVShearCorner");
//        Pix pixd = null;
//        Pix pixs = null;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixVShearCorner(pixd, pixs, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHShearCenter method, of class Leptonica.
//     */
//    @Test
//    public void testPixHShearCenter() {
//        System.out.println("pixHShearCenter");
//        Pix pixd = null;
//        Pix pixs = null;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHShearCenter(pixd, pixs, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVShearCenter method, of class Leptonica.
//     */
//    @Test
//    public void testPixVShearCenter() {
//        System.out.println("pixVShearCenter");
//        Pix pixd = null;
//        Pix pixs = null;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixVShearCenter(pixd, pixs, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHShearIP method, of class Leptonica.
//     */
//    @Test
//    public void testPixHShearIP() {
//        System.out.println("pixHShearIP");
//        Pix pixs = null;
//        int yloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixHShearIP(pixs, yloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVShearIP method, of class Leptonica.
//     */
//    @Test
//    public void testPixVShearIP() {
//        System.out.println("pixVShearIP");
//        Pix pixs = null;
//        int xloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        int expResult = 0;
//        int result = instance.pixVShearIP(pixs, xloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHShearLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixHShearLI() {
//        System.out.println("pixHShearLI");
//        Pix pixs = null;
//        int yloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixHShearLI(pixs, yloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixVShearLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixVShearLI() {
//        System.out.println("pixVShearLI");
//        Pix pixs = null;
//        int xloc = 0;
//        float radang = 0.0F;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixVShearLI(pixs, xloc, radang, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDeskew method, of class Leptonica.
//     */
//    @Test
//    public void testPixDeskew() {
//        System.out.println("pixDeskew");
//        Pix pix = null;
//        int redsearch = 0;
//        String filename = "eurotext_deskew.png";
//        File image = new File(testResourcesPath, filename);
//        pix = instance.pixRead(image.getPath());
//        Pix pixd = instance.pixDeskew(pix, redsearch);
//        String outputfilename = "test-results/eurotext_deskewed.png";
//        instance.pixWrite(outputfilename, pixd, IFF_PNG);
//        instance.pixDisplayWrite(pixd, 1);
//        assertTrue(pixd != null);
//        
//        PointerByReference pRef = new PointerByReference();
//        pRef.setValue(pix.getPointer());
//        instance.pixDestroy(pRef);
//        pRef.setValue(pixd.getPointer());
//        instance.pixDestroy(pRef);
//    }

    /**
     * Test of pixFindSkewAndDeskew method, of class Leptonica.
     */
    @Test
    public void testPixFindSkewAndDeskew() {
        System.out.println("pixFindSkewAndDeskew");
        File input = new File(testResourcesPath, "eurotext_deskew.png");
        Pix pixs = instance.pixRead(input.getPath());
        int redsearch = 0;
        FloatBuffer pangle = FloatBuffer.allocate(1);
        FloatBuffer pconf = FloatBuffer.allocate(1);
        Pix result = instance.pixFindSkewAndDeskew(pixs, redsearch, pangle, pconf);
        float angle = pangle.get();
        float conf = pconf.get();
        System.out.println(String.format("Confidence: %s, Angle: %s degree", conf , angle));
        LeptUtils.dispose(pixs);
        LeptUtils.dispose(result);
        assertNotNull(result);
    }
//
//    /**
//     * Test of pixDeskewGeneral method, of class Leptonica.
//     */
//    @Test
//    public void testPixDeskewGeneral() {
//        System.out.println("pixDeskewGeneral");
//        Pix pixs = null;
//        int redsweep = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        int redsearch = 0;
//        int thresh = 0;
//        FloatBuffer pangle = FloatBuffer.allocate(1);
//        FloatBuffer pconf = FloatBuffer.allocate(1);

//        Pix expResult = null;
//        Pix result = instance.pixDeskewGeneral(pixs, redsweep, sweeprange, sweepdelta, redsearch, thresh, pangle, pconf);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
    /**
     * Test of pixFindSkew method, of class Leptonica.
     */
    @Test
    public void testPixFindSkew() {
        System.out.println("pixFindSkew");
        int expResult = 0;
        File input = new File(testResourcesPath, "eurotext_deskew.png");
        Pix pix = instance.pixRead(input.getPath());
        Pix pixb = instance.pixScaleRGBToBinaryFast(pix, 1, 1);
        FloatBuffer pangle = FloatBuffer.allocate(1);
        FloatBuffer pconf = FloatBuffer.allocate(1);
        int result = instance.pixFindSkew(pixb, pangle, pconf);
        LeptUtils.dispose(pix);
        LeptUtils.dispose(pixb);
        
        if (result == 0) {
            float angle = pangle.get();
            float conf = pconf.get();
            System.out.println(String.format("Confidence: %s, Angle: %s degree", conf , angle));
            assertTrue(expResult < Math.abs(angle));
        } else {
            System.out.println("Need to binarize the image first");
            assertTrue(false);
        }
    }
//
//    /**
//     * Test of pixFindSkewSweep method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindSkewSweep() {
//        System.out.println("pixFindSkewSweep");
//        Pix pixs = null;
//        FloatBuffer pangle = null;
//        int reduction = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;

//        int expResult = 0;
//        int result = instance.pixFindSkewSweep(pixs, pangle, reduction, sweeprange, sweepdelta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindSkewSweepAndSearch method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindSkewSweepAndSearch() {
//        System.out.println("pixFindSkewSweepAndSearch");
//        Pix pixs = null;
//        FloatBuffer pangle = null;
//        FloatBuffer pconf = null;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;

//        int expResult = 0;
//        int result = instance.pixFindSkewSweepAndSearch(pixs, pangle, pconf, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindSkewSweepAndSearchScore method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindSkewSweepAndSearchScore() {
//        System.out.println("pixFindSkewSweepAndSearchScore");
//        Pix pixs = null;
//        FloatBuffer pangle = null;
//        FloatBuffer pconf = null;
//        FloatBuffer pendscore = null;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweepcenter = 0.0F;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;

//        int expResult = 0;
//        int result = instance.pixFindSkewSweepAndSearchScore(pixs, pangle, pconf, pendscore, redsweep, redsearch, sweepcenter, sweeprange, sweepdelta, minbsdelta);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindSkewSweepAndSearchScorePivot method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindSkewSweepAndSearchScorePivot() {
//        System.out.println("pixFindSkewSweepAndSearchScorePivot");
//        Pix pixs = null;
//        FloatBuffer pangle = null;
//        FloatBuffer pconf = null;
//        FloatBuffer pendscore = null;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweepcenter = 0.0F;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;
//        int pivot = 0;

//        int expResult = 0;
//        int result = instance.pixFindSkewSweepAndSearchScorePivot(pixs, pangle, pconf, pendscore, redsweep, redsearch, sweepcenter, sweeprange, sweepdelta, minbsdelta, pivot);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindSkewOrthogonalRange method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindSkewOrthogonalRange() {
//        System.out.println("pixFindSkewOrthogonalRange");
//        Pix pixs = null;
//        FloatBuffer pangle = null;
//        FloatBuffer pconf = null;
//        int redsweep = 0;
//        int redsearch = 0;
//        float sweeprange = 0.0F;
//        float sweepdelta = 0.0F;
//        float minbsdelta = 0.0F;
//        float confprior = 0.0F;

//        int expResult = 0;
//        int result = instance.pixFindSkewOrthogonalRange(pixs, pangle, pconf, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, confprior);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindDifferentialSquareSum method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindDifferentialSquareSum() {
//        System.out.println("pixFindDifferentialSquareSum");
//        Pix pixs = null;
//        FloatBuffer psum = null;

//        int expResult = 0;
//        int result = instance.pixFindDifferentialSquareSum(pixs, psum);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixFindNormalizedSquareSum method, of class Leptonica.
//     */
//    @Test
//    public void testPixFindNormalizedSquareSum() {
//        System.out.println("pixFindNormalizedSquareSum");
//        Pix pixs = null;
//        FloatBuffer phratio = null;
//        FloatBuffer pvratio = null;
//        FloatBuffer pfract = null;

//        int expResult = 0;
//        int result = instance.pixFindNormalizedSquareSum(pixs, phratio, pvratio, pfract);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamSpix method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamSpix() {
//        System.out.println("pixReadStreamSpix");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamSpix(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderSpix method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderSpix() {
//        System.out.println("readHeaderSpix");
//        String filename = "";
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.readHeaderSpix(filename, pwidth, pheight, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderSpix method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderSpix_6args_1() {
//        System.out.println("freadHeaderSpix");
//        PointerByReference fp = null;
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.freadHeaderSpix(fp, pwidth, pheight, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderSpix method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderSpix_6args_2() {
//        System.out.println("freadHeaderSpix");
//        PointerByReference fp = null;
//        IntByReference pwidth = null;
//        IntByReference pheight = null;
//        IntByReference pbps = null;
//        IntByReference pspp = null;
//        IntByReference piscmap = null;

//        int expResult = 0;
//        int result = instance.freadHeaderSpix(fp, pwidth, pheight, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sreadHeaderSpix method, of class Leptonica.
//     */
//    @Test
//    public void testSreadHeaderSpix() {
//        System.out.println("sreadHeaderSpix");
//        IntBuffer data = null;
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer piscmap = null;

//        int expResult = 0;
//        int result = instance.sreadHeaderSpix(data, pwidth, pheight, pbps, pspp, piscmap);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamSpix method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamSpix() {
//        System.out.println("pixWriteStreamSpix");
//        PointerByReference fp = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteStreamSpix(fp, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemSpix method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemSpix() {
//        System.out.println("pixReadMemSpix");
//        ByteBuffer data = null;
//        NativeSize size = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemSpix(data, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemSpix method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemSpix() {
//        System.out.println("pixWriteMemSpix");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixWriteMemSpix(pdata, psize, pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSerializeToMemory method, of class Leptonica.
//     */
//    @Test
//    public void testPixSerializeToMemory() {
//        System.out.println("pixSerializeToMemory");
//        Pix pixs = null;
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;

//        int expResult = 0;
//        int result = instance.pixSerializeToMemory(pixs, pdata, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDeserializeFromMemory method, of class Leptonica.
//     */
//    @Test
//    public void testPixDeserializeFromMemory() {
//        System.out.println("pixDeserializeFromMemory");
//        IntBuffer data = null;
//        NativeSize nbytes = null;

//        Pix expResult = null;
//        Pix result = instance.pixDeserializeFromMemory(data, nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackCreate method, of class Leptonica.
//     */
//    @Test
//    public void testLstackCreate() {
//        System.out.println("lstackCreate");
//        int nalloc = 0;

//        L_Stack expResult = null;
//        L_Stack result = instance.lstackCreate(nalloc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testLstackDestroy() {
//        System.out.println("lstackDestroy");
//        L_Stack.ByReference[] plstack = null;
//        int freeflag = 0;

//        instance.lstackDestroy(plstack, freeflag);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackAdd method, of class Leptonica.
//     */
//    @Test
//    public void testLstackAdd() {
//        System.out.println("lstackAdd");
//        L_Stack lstack = null;
//        Pointer item = null;

//        int expResult = 0;
//        int result = instance.lstackAdd(lstack, item);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackRemove method, of class Leptonica.
//     */
//    @Test
//    public void testLstackRemove() {
//        System.out.println("lstackRemove");
//        L_Stack lstack = null;

//        Pointer expResult = null;
//        Pointer result = instance.lstackRemove(lstack);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testLstackGetCount() {
//        System.out.println("lstackGetCount");
//        L_Stack lstack = null;

//        int expResult = 0;
//        int result = instance.lstackGetCount(lstack);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lstackPrint method, of class Leptonica.
//     */
//    @Test
//    public void testLstackPrint() {
//        System.out.println("lstackPrint");
//        PointerByReference fp = null;
//        L_Stack lstack = null;

//        int expResult = 0;
//        int result = instance.lstackPrint(fp, lstack);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuReadFile method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuReadFile() {
//        System.out.println("sudokuReadFile");
//        String filename = "";

//        IntByReference expResult = null;
//        IntByReference result = instance.sudokuReadFile(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuReadString method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuReadString() {
//        System.out.println("sudokuReadString");
//        String str = "";

//        IntByReference expResult = null;
//        IntByReference result = instance.sudokuReadString(str);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuCreate method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuCreate() {
//        System.out.println("sudokuCreate");
//        IntBuffer array = null;

//        L_Sudoku expResult = null;
//        L_Sudoku result = instance.sudokuCreate(array);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuDestroy() {
//        System.out.println("sudokuDestroy");
//        L_Sudoku.ByReference[] psud = null;

//        instance.sudokuDestroy(psud);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuSolve method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuSolve() {
//        System.out.println("sudokuSolve");
//        L_Sudoku sud = null;

//        int expResult = 0;
//        int result = instance.sudokuSolve(sud);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuTestUniqueness method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuTestUniqueness() {
//        System.out.println("sudokuTestUniqueness");
//        IntBuffer array = null;
//        IntBuffer punique = null;

//        int expResult = 0;
//        int result = instance.sudokuTestUniqueness(array, punique);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuGenerate method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuGenerate() {
//        System.out.println("sudokuGenerate");
//        IntBuffer array = null;
//        int seed = 0;
//        int minelems = 0;
//        int maxtries = 0;

//        L_Sudoku expResult = null;
//        L_Sudoku result = instance.sudokuGenerate(array, seed, minelems, maxtries);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of sudokuOutput method, of class Leptonica.
//     */
//    @Test
//    public void testSudokuOutput() {
//        System.out.println("sudokuOutput");
//        L_Sudoku sud = null;
//        int arraytype = 0;

//        int expResult = 0;
//        int result = instance.sudokuOutput(sud, arraytype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddSingleTextblock method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddSingleTextblock() {
//        System.out.println("pixAddSingleTextblock");
//        Pix pixs = null;
//        L_Bmf bmf = null;
//        String textstr = "";
//        int val = 0;
//        int location = 0;
//        IntBuffer poverflow = null;

//        Pix expResult = null;
//        Pix result = instance.pixAddSingleTextblock(pixs, bmf, textstr, val, location, poverflow);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixAddSingleTextline method, of class Leptonica.
//     */
//    @Test
//    public void testPixAddSingleTextline() {
//        System.out.println("pixAddSingleTextline");
//        Pix pixs = null;
//        L_Bmf bmf = null;
//        String textstr = "";
//        int val = 0;
//        int location = 0;

//        Pix expResult = null;
//        Pix result = instance.pixAddSingleTextline(pixs, bmf, textstr, val, location);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetTextblock method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetTextblock() {
//        System.out.println("pixSetTextblock");
//        Pix pixs = null;
//        L_Bmf bmf = null;
//        String textstr = "";
//        int val = 0;
//        int x0 = 0;
//        int y0 = 0;
//        int wtext = 0;
//        int firstindent = 0;
//        IntBuffer poverflow = null;

//        int expResult = 0;
//        int result = instance.pixSetTextblock(pixs, bmf, textstr, val, x0, y0, wtext, firstindent, poverflow);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSetTextline method, of class Leptonica.
//     */
//    @Test
//    public void testPixSetTextline() {
//        System.out.println("pixSetTextline");
//        Pix pixs = null;
//        L_Bmf bmf = null;
//        String textstr = "";
//        int val = 0;
//        int x0 = 0;
//        int y0 = 0;
//        IntBuffer pwidth = null;
//        IntBuffer poverflow = null;

//        int expResult = 0;
//        int result = instance.pixSetTextline(pixs, bmf, textstr, val, x0, y0, pwidth, poverflow);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAddTextNumber method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAddTextNumber() {
//        System.out.println("pixaAddTextNumber");
//        Pixa pixas = null;
//        L_Bmf bmf = null;
//        Numa na = null;
//        int val = 0;
//        int location = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaAddTextNumber(pixas, bmf, na, val, location);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaAddTextline method, of class Leptonica.
//     */
//    @Test
//    public void testPixaAddTextline() {
//        System.out.println("pixaAddTextline");
//        Pixa pixas = null;
//        L_Bmf bmf = null;
//        Sarray sa = null;
//        int val = 0;
//        int location = 0;

//        Pixa expResult = null;
//        Pixa result = instance.pixaAddTextline(pixas, bmf, sa, val, location);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetLineStrings method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetLineStrings() {
//        System.out.println("bmfGetLineStrings");
//        L_Bmf bmf = null;
//        String textstr = "";
//        int maxw = 0;
//        int firstindent = 0;
//        IntBuffer ph = null;

//        Sarray expResult = null;
//        Sarray result = instance.bmfGetLineStrings(bmf, textstr, maxw, firstindent, ph);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetWordWidths method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetWordWidths() {
//        System.out.println("bmfGetWordWidths");
//        L_Bmf bmf = null;
//        String textstr = "";
//        Sarray sa = null;

//        Numa expResult = null;
//        Numa result = instance.bmfGetWordWidths(bmf, textstr, sa);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of bmfGetStringWidth method, of class Leptonica.
//     */
//    @Test
//    public void testBmfGetStringWidth() {
//        System.out.println("bmfGetStringWidth");
//        L_Bmf bmf = null;
//        String textstr = "";
//        IntBuffer pw = null;

//        int expResult = 0;
//        int result = instance.bmfGetStringWidth(bmf, textstr, pw);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of splitStringToParagraphs method, of class Leptonica.
//     */
//    @Test
//    public void testSplitStringToParagraphs() {
//        System.out.println("splitStringToParagraphs");
//        ByteBuffer textstr = null;
//        int splitflag = 0;

//        Sarray expResult = null;
//        Sarray result = instance.splitStringToParagraphs(textstr, splitflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadTiff() {
//        System.out.println("pixReadTiff");
//        String filename = "";
//        int n = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadTiff(filename, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamTiff() {
//        System.out.println("pixReadStreamTiff");
//        PointerByReference fp = null;
//        int n = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamTiff(fp, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteTiff() {
//        System.out.println("pixWriteTiff");
//        String filename = "";
//        Pix pix = null;
//        int comptype = 0;
//        String modestring = "";

//        int expResult = 0;
//        int result = instance.pixWriteTiff(filename, pix, comptype, modestring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteTiffCustom method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteTiffCustom() {
//        System.out.println("pixWriteTiffCustom");
//        String filename = "";
//        Pix pix = null;
//        int comptype = 0;
//        String modestring = "";
//        Numa natags = null;
//        Sarray savals = null;
//        Sarray satypes = null;
//        Numa nasizes = null;

//        int expResult = 0;
//        int result = instance.pixWriteTiffCustom(filename, pix, comptype, modestring, natags, savals, satypes, nasizes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
  
    /**
     * Test of pixReadFromMultipageTiff method, of class Leptonica.
     */
    @Test
    public void testPixReadFromMultipageTiff() {
        System.out.println("pixReadFromMultipageTiff");
        String filename = "multi-page.tif";
        File image = new File(testResourcesPath, filename);
        Pixa pixa = instance.pixaReadMultipageTiff(image.getPath()); // read all pages at once
        int i = 0;
        NativeSizeByReference poffset = new NativeSizeByReference(new NativeSize(0));

        do {
            // read pages one at a time
            Pix pix1 = instance.pixaGetPix(pixa, i++, ILeptonica.L_COPY);
            Pix pix2 = instance.pixReadFromMultipageTiff(image.getPath(), poffset); // read pages one at a time
            IntBuffer psame = IntBuffer.allocate(1);
            instance.pixEqual(pix1, pix2, psame);
            LeptUtils.dispose(pix1);
            LeptUtils.dispose(pix2);
            int result = psame.get();
            assertEquals(1, result);
        } while (poffset.getValue().intValue() != 0);

        LeptUtils.dispose(pixa);
    }

    /**
     * Test of pixaReadMultipageTiff method, of class Leptonica.
     */
    @Test
    public void testPixaReadMultipageTiff() {
        System.out.println("pixaReadMultipageTiff");
        String filename = "multi-page.tif";
        File image = new File(testResourcesPath, filename);
        int expResult = 3;
        Pixa result = instance.pixaReadMultipageTiff(image.getPath());
        assertEquals(expResult, instance.pixaGetCount(result));
    }
//    /**
//     * Test of pixWriteStreamTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamTiff() {
//        System.out.println("pixWriteStreamTiff");
//        PointerByReference fp = null;
//        Pix pix = null;
//        int comptype = 0;
//        int expResult = 0;
//        int result = instance.pixWriteStreamTiff(fp, pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of writeMultipageTiff method, of class Leptonica.
//     */
//    @Test
//    public void testWriteMultipageTiff() {
//        System.out.println("writeMultipageTiff");
//        String dirin = "";
//        String substr = "";
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.writeMultipageTiff(dirin, substr, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of writeMultipageTiffSA method, of class Leptonica.
//     */
//    @Test
//    public void testWriteMultipageTiffSA() {
//        System.out.println("writeMultipageTiffSA");
//        Sarray sa = null;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.writeMultipageTiffSA(sa, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fprintTiffInfo method, of class Leptonica.
//     */
//    @Test
//    public void testFprintTiffInfo_PointerByReference_String() {
//        System.out.println("fprintTiffInfo");
//        PointerByReference fpout = null;
//        String tiffile = "";

//        int expResult = 0;
//        int result = instance.fprintTiffInfo(fpout, tiffile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fprintTiffInfo method, of class Leptonica.
//     */
//    @Test
//    public void testFprintTiffInfo_PointerByReference_Pointer() {
//        System.out.println("fprintTiffInfo");
//        PointerByReference fpout = null;
//        Pointer tiffile = null;

//        int expResult = 0;
//        int result = instance.fprintTiffInfo(fpout, tiffile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of tiffGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testTiffGetCount_PointerByReference_IntBuffer() {
//        System.out.println("tiffGetCount");
//        PointerByReference fp = null;
//        IntBuffer pn = null;

//        int expResult = 0;
//        int result = instance.tiffGetCount(fp, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of tiffGetCount method, of class Leptonica.
//     */
//    @Test
//    public void testTiffGetCount_PointerByReference_IntByReference() {
//        System.out.println("tiffGetCount");
//        PointerByReference fp = null;
//        IntByReference pn = null;

//        int expResult = 0;
//        int result = instance.tiffGetCount(fp, pn);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getTiffResolution method, of class Leptonica.
//     */
//    @Test
//    public void testGetTiffResolution_3args_1() {
//        System.out.println("getTiffResolution");
//        PointerByReference fp = null;
//        IntBuffer pxres = null;
//        IntBuffer pyres = null;

//        int expResult = 0;
//        int result = instance.getTiffResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getTiffResolution method, of class Leptonica.
//     */
//    @Test
//    public void testGetTiffResolution_3args_2() {
//        System.out.println("getTiffResolution");
//        PointerByReference fp = null;
//        IntByReference pxres = null;
//        IntByReference pyres = null;

//        int expResult = 0;
//        int result = instance.getTiffResolution(fp, pxres, pyres);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderTiff method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderTiff() {
//        System.out.println("readHeaderTiff");
//        String filename = "";
//        int n = 0;
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer pres = null;
//        IntBuffer pcmap = null;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.readHeaderTiff(filename, n, pwidth, pheight, pbps, pspp, pres, pcmap, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderTiff method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderTiff_9args_1() {
//        System.out.println("freadHeaderTiff");
//        PointerByReference fp = null;
//        int n = 0;
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer pres = null;
//        IntBuffer pcmap = null;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.freadHeaderTiff(fp, n, pwidth, pheight, pbps, pspp, pres, pcmap, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of freadHeaderTiff method, of class Leptonica.
//     */
//    @Test
//    public void testFreadHeaderTiff_9args_2() {
//        System.out.println("freadHeaderTiff");
//        PointerByReference fp = null;
//        int n = 0;
//        IntByReference pwidth = null;
//        IntByReference pheight = null;
//        IntByReference pbps = null;
//        IntByReference pspp = null;
//        IntByReference pres = null;
//        IntByReference pcmap = null;
//        IntByReference pformat = null;

//        int expResult = 0;
//        int result = instance.freadHeaderTiff(fp, n, pwidth, pheight, pbps, pspp, pres, pcmap, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemTiff method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemTiff() {
//        System.out.println("readHeaderMemTiff");
//        ByteBuffer cdata = null;
//        NativeSize size = null;
//        int n = 0;
//        IntBuffer pwidth = null;
//        IntBuffer pheight = null;
//        IntBuffer pbps = null;
//        IntBuffer pspp = null;
//        IntBuffer pres = null;
//        IntBuffer pcmap = null;
//        IntBuffer pformat = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemTiff(cdata, size, n, pwidth, pheight, pbps, pspp, pres, pcmap, pformat);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findTiffCompression method, of class Leptonica.
//     */
//    @Test
//    public void testFindTiffCompression_PointerByReference_IntBuffer() {
//        System.out.println("findTiffCompression");
//        PointerByReference fp = null;
//        IntBuffer pcomptype = null;

//        int expResult = 0;
//        int result = instance.findTiffCompression(fp, pcomptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of findTiffCompression method, of class Leptonica.
//     */
//    @Test
//    public void testFindTiffCompression_PointerByReference_IntByReference() {
//        System.out.println("findTiffCompression");
//        PointerByReference fp = null;
//        IntByReference pcomptype = null;

//        int expResult = 0;
//        int result = instance.findTiffCompression(fp, pcomptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of extractG4DataFromFile method, of class Leptonica.
//     */
//    @Test
//    public void testExtractG4DataFromFile() {
//        System.out.println("extractG4DataFromFile");
//        String filein = "";
//        PointerByReference pdata = null;
//        NativeSizeByReference pnbytes = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pminisblack = null;

//        int expResult = 0;
//        int result = instance.extractG4DataFromFile(filein, pdata, pnbytes, pw, ph, pminisblack);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemTiff() {
//        System.out.println("pixReadMemTiff");
//        ByteBuffer cdata = null;
//        NativeSize size = null;
//        int n = 0;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemTiff(cdata, size, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemTiff method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemTiff() {
//        System.out.println("pixWriteMemTiff");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        int comptype = 0;

//        int expResult = 0;
//        int result = instance.pixWriteMemTiff(pdata, psize, pix, comptype);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemTiffCustom method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemTiffCustom() {
//        System.out.println("pixWriteMemTiffCustom");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        int comptype = 0;
//        Numa natags = null;
//        Sarray savals = null;
//        Sarray satypes = null;
//        Numa nasizes = null;

//        int expResult = 0;
//        int result = instance.pixWriteMemTiffCustom(pdata, psize, pix, comptype, natags, savals, satypes, nasizes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of setMsgSeverity method, of class Leptonica.
//     */
//    @Test
//    public void testSetMsgSeverity() {
//        System.out.println("setMsgSeverity");
//        int newsev = 0;

//        int expResult = 0;
//        int result = instance.setMsgSeverity(newsev);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of returnErrorInt method, of class Leptonica.
//     */
//    @Test
//    public void testReturnErrorInt() {
//        System.out.println("returnErrorInt");
//        String msg = "";
//        String procname = "";
//        int ival = 0;

//        int expResult = 0;
//        int result = instance.returnErrorInt(msg, procname, ival);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of returnErrorFloat method, of class Leptonica.
//     */
//    @Test
//    public void testReturnErrorFloat() {
//        System.out.println("returnErrorFloat");
//        String msg = "";
//        String procname = "";
//        float fval = 0.0F;

//        float expResult = 0.0F;
//        float result = instance.returnErrorFloat(msg, procname, fval);
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of returnErrorPtr method, of class Leptonica.
//     */
//    @Test
//    public void testReturnErrorPtr() {
//        System.out.println("returnErrorPtr");
//        String msg = "";
//        String procname = "";
//        Pointer pval = null;

//        Pointer expResult = null;
//        Pointer result = instance.returnErrorPtr(msg, procname, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringNew method, of class Leptonica.
//     */
//    @Test
//    public void testStringNew() {
//        System.out.println("stringNew");
//        String src = "";

//        Pointer expResult = null;
//        Pointer result = instance.stringNew(src);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringCopy method, of class Leptonica.
//     */
//    @Test
//    public void testStringCopy() {
//        System.out.println("stringCopy");
//        ByteBuffer dest = null;
//        String src = "";
//        int n = 0;

//        int expResult = 0;
//        int result = instance.stringCopy(dest, src, n);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringReplace method, of class Leptonica.
//     */
//    @Test
//    public void testStringReplace() {
//        System.out.println("stringReplace");
//        PointerByReference pdest = null;
//        String src = "";

//        int expResult = 0;
//        int result = instance.stringReplace(pdest, src);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringLength method, of class Leptonica.
//     */
//    @Test
//    public void testStringLength() {
//        System.out.println("stringLength");
//        String src = "";
//        NativeSize size = null;

//        int expResult = 0;
//        int result = instance.stringLength(src, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringCat method, of class Leptonica.
//     */
//    @Test
//    public void testStringCat() {
//        System.out.println("stringCat");
//        ByteBuffer dest = null;
//        NativeSize size = null;
//        String src = "";

//        int expResult = 0;
//        int result = instance.stringCat(dest, size, src);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringConcatNew method, of class Leptonica.
//     */
//    @Test
//    public void testStringConcatNew() {
//        System.out.println("stringConcatNew");
//        String first = "";
//        Object[] varArgs1 = null;

//        Pointer expResult = null;
//        Pointer result = instance.stringConcatNew(first, varArgs1);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringJoin method, of class Leptonica.
//     */
//    @Test
//    public void testStringJoin() {
//        System.out.println("stringJoin");
//        String src1 = "";
//        String src2 = "";

//        Pointer expResult = null;
//        Pointer result = instance.stringJoin(src1, src2);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringReverse method, of class Leptonica.
//     */
//    @Test
//    public void testStringReverse() {
//        System.out.println("stringReverse");
//        String src = "";

//        Pointer expResult = null;
//        Pointer result = instance.stringReverse(src);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of strtokSafe method, of class Leptonica.
//     */
//    @Test
//    public void testStrtokSafe() {
//        System.out.println("strtokSafe");
//        ByteBuffer cstr = null;
//        String seps = "";
//        PointerByReference psaveptr = null;

//        Pointer expResult = null;
//        Pointer result = instance.strtokSafe(cstr, seps, psaveptr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringSplitOnToken method, of class Leptonica.
//     */
//    @Test
//    public void testStringSplitOnToken() {
//        System.out.println("stringSplitOnToken");
//        ByteBuffer cstr = null;
//        String seps = "";
//        PointerByReference phead = null;
//        PointerByReference ptail = null;

//        int expResult = 0;
//        int result = instance.stringSplitOnToken(cstr, seps, phead, ptail);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringRemoveChars method, of class Leptonica.
//     */
//    @Test
//    public void testStringRemoveChars() {
//        System.out.println("stringRemoveChars");
//        String src = "";
//        String remchars = "";

//        Pointer expResult = null;
//        Pointer result = instance.stringRemoveChars(src, remchars);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringFindSubstr method, of class Leptonica.
//     */
//    @Test
//    public void testStringFindSubstr() {
//        System.out.println("stringFindSubstr");
//        String src = "";
//        String sub = "";
//        IntBuffer ploc = null;

//        int expResult = 0;
//        int result = instance.stringFindSubstr(src, sub, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringReplaceSubstr method, of class Leptonica.
//     */
//    @Test
//    public void testStringReplaceSubstr() {
//        System.out.println("stringReplaceSubstr");
//        String src = "";
//        String sub1 = "";
//        String sub2 = "";
//        IntBuffer pfound = null;
//        IntBuffer ploc = null;

//        Pointer expResult = null;
//        Pointer result = instance.stringReplaceSubstr(src, sub1, sub2, pfound, ploc);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stringReplaceEachSubstr method, of class Leptonica.
//     */
//    @Test
//    public void testStringReplaceEachSubstr() {
//        System.out.println("stringReplaceEachSubstr");
//        String src = "";
//        String sub1 = "";
//        String sub2 = "";
//        IntBuffer pcount = null;

//        Pointer expResult = null;
//        Pointer result = instance.stringReplaceEachSubstr(src, sub1, sub2, pcount);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of arrayFindEachSequence method, of class Leptonica.
//     */
//    @Test
//    public void testArrayFindEachSequence() {
//        System.out.println("arrayFindEachSequence");
//        ByteBuffer data = null;
//        NativeSize datalen = null;
//        ByteBuffer sequence = null;
//        NativeSize seqlen = null;

//        L_Dna expResult = null;
//        L_Dna result = instance.arrayFindEachSequence(data, datalen, sequence, seqlen);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of arrayFindSequence method, of class Leptonica.
//     */
//    @Test
//    public void testArrayFindSequence() {
//        System.out.println("arrayFindSequence");
//        ByteBuffer data = null;
//        NativeSize datalen = null;
//        ByteBuffer sequence = null;
//        NativeSize seqlen = null;
//        IntBuffer poffset = null;
//        IntBuffer pfound = null;

//        int expResult = 0;
//        int result = instance.arrayFindSequence(data, datalen, sequence, seqlen, poffset, pfound);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of reallocNew method, of class Leptonica.
//     */
//    @Test
//    public void testReallocNew() {
//        System.out.println("reallocNew");
//        PointerByReference pindata = null;
//        int oldsize = 0;
//        int newsize = 0;

//        Pointer expResult = null;
//        Pointer result = instance.reallocNew(pindata, oldsize, newsize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryRead method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryRead() {
//        System.out.println("l_binaryRead");
//        String filename = "";
//        NativeSizeByReference pnbytes = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_binaryRead(filename, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryReadStream() {
//        System.out.println("l_binaryReadStream");
//        PointerByReference fp = null;
//        NativeSizeByReference pnbytes = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_binaryReadStream(fp, pnbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryReadSelect method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryReadSelect() {
//        System.out.println("l_binaryReadSelect");
//        String filename = "";
//        NativeSize start = null;
//        NativeSize nbytes = null;
//        NativeSizeByReference pnread = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_binaryReadSelect(filename, start, nbytes, pnread);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryReadSelectStream method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryReadSelectStream() {
//        System.out.println("l_binaryReadSelectStream");
//        PointerByReference fp = null;
//        NativeSize start = null;
//        NativeSize nbytes = null;
//        NativeSizeByReference pnread = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_binaryReadSelectStream(fp, start, nbytes, pnread);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryWrite method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryWrite() {
//        System.out.println("l_binaryWrite");
//        String filename = "";
//        String operation = "";
//        Pointer data = null;
//        NativeSize nbytes = null;

//        int expResult = 0;
//        int result = instance.l_binaryWrite(filename, operation, data, nbytes);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of nbytesInFile method, of class Leptonica.
//     */
//    @Test
//    public void testNbytesInFile() {
//        System.out.println("nbytesInFile");
//        String filename = "";

//        NativeSize expResult = null;
//        NativeSize result = instance.nbytesInFile(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fnbytesInFile method, of class Leptonica.
//     */
//    @Test
//    public void testFnbytesInFile() {
//        System.out.println("fnbytesInFile");
//        PointerByReference fp = null;

//        NativeSize expResult = null;
//        NativeSize result = instance.fnbytesInFile(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_binaryCopy method, of class Leptonica.
//     */
//    @Test
//    public void testL_binaryCopy() {
//        System.out.println("l_binaryCopy");
//        ByteBuffer datas = null;
//        NativeSize size = null;

//        Pointer expResult = null;
//        Pointer result = instance.l_binaryCopy(datas, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileCopy method, of class Leptonica.
//     */
//    @Test
//    public void testFileCopy() {
//        System.out.println("fileCopy");
//        String srcfile = "";
//        String newfile = "";

//        int expResult = 0;
//        int result = instance.fileCopy(srcfile, newfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileConcatenate method, of class Leptonica.
//     */
//    @Test
//    public void testFileConcatenate() {
//        System.out.println("fileConcatenate");
//        String srcfile = "";
//        String destfile = "";

//        int expResult = 0;
//        int result = instance.fileConcatenate(srcfile, destfile);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileAppendString method, of class Leptonica.
//     */
//    @Test
//    public void testFileAppendString() {
//        System.out.println("fileAppendString");
//        String filename = "";
//        String str = "";

//        int expResult = 0;
//        int result = instance.fileAppendString(filename, str);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of filesAreIdentical method, of class Leptonica.
//     */
//    @Test
//    public void testFilesAreIdentical() {
//        System.out.println("filesAreIdentical");
//        String fname1 = "";
//        String fname2 = "";
//        IntBuffer psame = null;

//        int expResult = 0;
//        int result = instance.filesAreIdentical(fname1, fname2, psame);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertOnLittleEnd16 method, of class Leptonica.
//     */
//    @Test
//    public void testConvertOnLittleEnd16() {
//        System.out.println("convertOnLittleEnd16");
//        short shortin = 0;

//        short expResult = 0;
//        short result = instance.convertOnLittleEnd16(shortin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertOnBigEnd16 method, of class Leptonica.
//     */
//    @Test
//    public void testConvertOnBigEnd16() {
//        System.out.println("convertOnBigEnd16");
//        short shortin = 0;

//        short expResult = 0;
//        short result = instance.convertOnBigEnd16(shortin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertOnLittleEnd32 method, of class Leptonica.
//     */
//    @Test
//    public void testConvertOnLittleEnd32() {
//        System.out.println("convertOnLittleEnd32");
//        int wordin = 0;

//        int expResult = 0;
//        int result = instance.convertOnLittleEnd32(wordin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertOnBigEnd32 method, of class Leptonica.
//     */
//    @Test
//    public void testConvertOnBigEnd32() {
//        System.out.println("convertOnBigEnd32");
//        int wordin = 0;

//        int expResult = 0;
//        int result = instance.convertOnBigEnd32(wordin);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fopenReadStream method, of class Leptonica.
//     */
//    @Test
//    public void testFopenReadStream() {
//        System.out.println("fopenReadStream");
//        String filename = "";

//        PointerByReference expResult = null;
//        PointerByReference result = instance.fopenReadStream(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fopenWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testFopenWriteStream() {
//        System.out.println("fopenWriteStream");
//        String filename = "";
//        String modestring = "";

//        PointerByReference expResult = null;
//        PointerByReference result = instance.fopenWriteStream(filename, modestring);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_fopen method, of class Leptonica.
//     */
//    @Test
//    public void testLept_fopen() {
//        System.out.println("lept_fopen");
//        String filename = "";
//        String mode = "";

//        PointerByReference expResult = null;
//        PointerByReference result = instance.lept_fopen(filename, mode);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_fclose method, of class Leptonica.
//     */
//    @Test
//    public void testLept_fclose() {
//        System.out.println("lept_fclose");
//        PointerByReference fp = null;

//        int expResult = 0;
//        int result = instance.lept_fclose(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_calloc method, of class Leptonica.
//     */
//    @Test
//    public void testLept_calloc() {
//        System.out.println("lept_calloc");
//        NativeSize nmemb = null;
//        NativeSize size = null;

//        Pointer expResult = null;
//        Pointer result = instance.lept_calloc(nmemb, size);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_free method, of class Leptonica.
//     */
//    @Test
//    public void testLept_free() {
//        System.out.println("lept_free");
//        Pointer ptr = null;

//        instance.lept_free(ptr);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_mkdir method, of class Leptonica.
//     */
//    @Test
//    public void testLept_mkdir() {
//        System.out.println("lept_mkdir");
//        String subdir = "";

//        int expResult = 0;
//        int result = instance.lept_mkdir(subdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_rmdir method, of class Leptonica.
//     */
//    @Test
//    public void testLept_rmdir() {
//        System.out.println("lept_rmdir");
//        String subdir = "";

//        int expResult = 0;
//        int result = instance.lept_rmdir(subdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_direxists method, of class Leptonica.
//     */
//    @Test
//    public void testLept_direxists() {
//        System.out.println("lept_direxists");
//        String dir = "";
//        IntBuffer pexists = null;

//        instance.lept_direxists(dir, pexists);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_rm_match method, of class Leptonica.
//     */
//    @Test
//    public void testLept_rm_match() {
//        System.out.println("lept_rm_match");
//        String subdir = "";
//        String substr = "";

//        int expResult = 0;
//        int result = instance.lept_rm_match(subdir, substr);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_rm method, of class Leptonica.
//     */
//    @Test
//    public void testLept_rm() {
//        System.out.println("lept_rm");
//        String subdir = "";
//        String tail = "";

//        int expResult = 0;
//        int result = instance.lept_rm(subdir, tail);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_rmfile method, of class Leptonica.
//     */
//    @Test
//    public void testLept_rmfile() {
//        System.out.println("lept_rmfile");
//        String filepath = "";

//        int expResult = 0;
//        int result = instance.lept_rmfile(filepath);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_mv method, of class Leptonica.
//     */
//    @Test
//    public void testLept_mv() {
//        System.out.println("lept_mv");
//        String srcfile = "";
//        String newdir = "";
//        String newtail = "";
//        PointerByReference pnewpath = null;

//        int expResult = 0;
//        int result = instance.lept_mv(srcfile, newdir, newtail, pnewpath);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_cp method, of class Leptonica.
//     */
//    @Test
//    public void testLept_cp() {
//        System.out.println("lept_cp");
//        String srcfile = "";
//        String newdir = "";
//        String newtail = "";
//        PointerByReference pnewpath = null;

//        int expResult = 0;
//        int result = instance.lept_cp(srcfile, newdir, newtail, pnewpath);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of splitPathAtDirectory method, of class Leptonica.
//     */
//    @Test
//    public void testSplitPathAtDirectory() {
//        System.out.println("splitPathAtDirectory");
//        String pathname = "";
//        PointerByReference pdir = null;
//        PointerByReference ptail = null;

//        int expResult = 0;
//        int result = instance.splitPathAtDirectory(pathname, pdir, ptail);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of splitPathAtExtension method, of class Leptonica.
//     */
//    @Test
//    public void testSplitPathAtExtension() {
//        System.out.println("splitPathAtExtension");
//        String pathname = "";
//        PointerByReference pbasename = null;
//        PointerByReference pextension = null;

//        int expResult = 0;
//        int result = instance.splitPathAtExtension(pathname, pbasename, pextension);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pathJoin method, of class Leptonica.
//     */
//    @Test
//    public void testPathJoin() {
//        System.out.println("pathJoin");
//        String dir = "";
//        String fname = "";

//        Pointer expResult = null;
//        Pointer result = instance.pathJoin(dir, fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of appendSubdirectory method, of class Leptonica.
//     */
//    @Test
//    public void testAppendSubdirectory() {
//        System.out.println("appendSubdirectory");
//        String dir = "";
//        String subdir = "";

//        Pointer expResult = null;
//        Pointer result = instance.appendSubdirectory(dir, subdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertSepCharsInPath method, of class Leptonica.
//     */
//    @Test
//    public void testConvertSepCharsInPath() {
//        System.out.println("convertSepCharsInPath");
//        ByteBuffer path = null;
//        int type = 0;

//        int expResult = 0;
//        int result = instance.convertSepCharsInPath(path, type);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of genPathname method, of class Leptonica.
//     */
//    @Test
//    public void testGenPathname() {
//        System.out.println("genPathname");
//        String dir = "";
//        String fname = "";

//        Pointer expResult = null;
//        Pointer result = instance.genPathname(dir, fname);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of makeTempDirname method, of class Leptonica.
//     */
//    @Test
//    public void testMakeTempDirname() {
//        System.out.println("makeTempDirname");
//        ByteBuffer result_2 = null;
//        NativeSize nbytes = null;
//        String subdir = "";

//        int expResult = 0;
//        int result = instance.makeTempDirname(result_2, nbytes, subdir);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of modifyTrailingSlash method, of class Leptonica.
//     */
//    @Test
//    public void testModifyTrailingSlash() {
//        System.out.println("modifyTrailingSlash");
//        ByteBuffer path = null;
//        NativeSize nbytes = null;
//        int flag = 0;

//        int expResult = 0;
//        int result = instance.modifyTrailingSlash(path, nbytes, flag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of genTempFilename method, of class Leptonica.
//     */
//    @Test
//    public void testGenTempFilename() {
//        System.out.println("genTempFilename");
//        String dir = "";
//        String tail = "";
//        int usetime = 0;
//        int usepid = 0;

//        Pointer expResult = null;
//        Pointer result = instance.genTempFilename(dir, tail, usetime, usepid);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of extractNumberFromFilename method, of class Leptonica.
//     */
//    @Test
//    public void testExtractNumberFromFilename() {
//        System.out.println("extractNumberFromFilename");
//        String fname = "";
//        int numpre = 0;
//        int numpost = 0;

//        int expResult = 0;
//        int result = instance.extractNumberFromFilename(fname, numpre, numpost);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileCorruptByDeletion method, of class Leptonica.
//     */
//    @Test
//    public void testFileCorruptByDeletion() {
//        System.out.println("fileCorruptByDeletion");
//        String filein = "";
//        float loc = 0.0F;
//        float size = 0.0F;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.fileCorruptByDeletion(filein, loc, size, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of fileCorruptByMutation method, of class Leptonica.
//     */
//    @Test
//    public void testFileCorruptByMutation() {
//        System.out.println("fileCorruptByMutation");
//        String filein = "";
//        float loc = 0.0F;
//        float size = 0.0F;
//        String fileout = "";

//        int expResult = 0;
//        int result = instance.fileCorruptByMutation(filein, loc, size, fileout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of genRandomIntegerInRange method, of class Leptonica.
//     */
//    @Test
//    public void testGenRandomIntegerInRange() {
//        System.out.println("genRandomIntegerInRange");
//        int range = 0;
//        int seed = 0;
//        IntBuffer pval = null;

//        int expResult = 0;
//        int result = instance.genRandomIntegerInRange(range, seed, pval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of lept_roundftoi method, of class Leptonica.
//     */
//    @Test
//    public void testLept_roundftoi() {
//        System.out.println("lept_roundftoi");
//        float fval = 0.0F;

//        int expResult = 0;
//        int result = instance.lept_roundftoi(fval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertBinaryToGrayCode method, of class Leptonica.
//     */
//    @Test
//    public void testConvertBinaryToGrayCode() {
//        System.out.println("convertBinaryToGrayCode");
//        int val = 0;

//        int expResult = 0;
//        int result = instance.convertBinaryToGrayCode(val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of convertGrayCodeToBinary method, of class Leptonica.
//     */
//    @Test
//    public void testConvertGrayCodeToBinary() {
//        System.out.println("convertGrayCodeToBinary");
//        int val = 0;

//        int expResult = 0;
//        int result = instance.convertGrayCodeToBinary(val);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
    /**
     * Test of getLeptonicaVersion method, of class Leptonica.
     */
    @Test
    public void testGetLeptonicaVersion() {
        System.out.println("getLeptonicaVersion");
        String expResult = "leptonica-1.83.0";
        Pointer result = instance.getLeptonicaVersion();
        assertTrue(result.getString(0).startsWith(expResult));
    }
//
//    /**
//     * Test of startTimer method, of class Leptonica.
//     */
//    @Test
//    public void testStartTimer() {
//        System.out.println("startTimer");

//        instance.startTimer();
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stopTimer method, of class Leptonica.
//     */
//    @Test
//    public void testStopTimer() {
//        System.out.println("stopTimer");

//        float expResult = 0.0F;
//        float result = instance.stopTimer();
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of startTimerNested method, of class Leptonica.
//     */
//    @Test
//    public void testStartTimerNested() {
//        System.out.println("startTimerNested");

//        Pointer expResult = null;
//        Pointer result = instance.startTimerNested();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of stopTimerNested method, of class Leptonica.
//     */
//    @Test
//    public void testStopTimerNested() {
//        System.out.println("stopTimerNested");
//        Pointer rusage_start = null;

//        float expResult = 0.0F;
//        float result = instance.stopTimerNested(rusage_start);
//        assertEquals(expResult, result, 0.0);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_getCurrentTime method, of class Leptonica.
//     */
//    @Test
//    public void testL_getCurrentTime() {
//        System.out.println("l_getCurrentTime");
//        IntBuffer sec = null;
//        IntBuffer usec = null;

//        instance.l_getCurrentTime(sec, usec);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }

    /**
     * Test of startWallTimer method, of class Leptonica.
     */
    @Test
    public void testStartWallTimer() {
        System.out.println("startWallTimer");
        L_WallTimer timer = instance.startWallTimer();
        assertNotNull(timer);
        System.out.println("stopWallTimer");
        PointerByReference ptimer = new PointerByReference();
        ptimer.setValue(timer.getPointer());
        float elapsed = instance.stopWallTimer(ptimer);
        System.out.println("Time elapsed: " + elapsed);
    }

//
//    /**
//     * Test of l_getFormattedDate method, of class Leptonica.
//     */
//    @Test
//    public void testL_getFormattedDate() {
//        System.out.println("l_getFormattedDate");

//        Pointer expResult = null;
//        Pointer result = instance.l_getFormattedDate();
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixHtmlViewer method, of class Leptonica.
//     */
//    @Test
//    public void testPixHtmlViewer() {
//        System.out.println("pixHtmlViewer");
//        String dirin = "";
//        String dirout = "";
//        String rootname = "";
//        int thumbwidth = 0;
//        int viewwidth = 0;
//        int copyorig = 0;

//        int expResult = 0;
//        int result = instance.pixHtmlViewer(dirin, dirout, rootname, thumbwidth, viewwidth, copyorig);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSimpleCaptcha method, of class Leptonica.
//     */
//    @Test
//    public void testPixSimpleCaptcha() {
//        System.out.println("pixSimpleCaptcha");
//        Pix pixs = null;
//        int border = 0;
//        int nterms = 0;
//        int seed = 0;
//        int color = 0;
//        int cmapflag = 0;

//        Pix expResult = null;
//        Pix result = instance.pixSimpleCaptcha(pixs, border, nterms, seed, color, cmapflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixRandomHarmonicWarp method, of class Leptonica.
//     */
//    @Test
//    public void testPixRandomHarmonicWarp() {
//        System.out.println("pixRandomHarmonicWarp");
//        Pix pixs = null;
//        float xmag = 0.0F;
//        float ymag = 0.0F;
//        float xfreq = 0.0F;
//        float yfreq = 0.0F;
//        int nx = 0;
//        int ny = 0;
//        int seed = 0;
//        int grayval = 0;

//        Pix expResult = null;
//        Pix result = instance.pixRandomHarmonicWarp(pixs, xmag, ymag, xfreq, yfreq, nx, ny, seed, grayval);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWarpStereoscopic method, of class Leptonica.
//     */
//    @Test
//    public void testPixWarpStereoscopic() {
//        System.out.println("pixWarpStereoscopic");
//        Pix pixs = null;
//        int zbend = 0;
//        int zshiftt = 0;
//        int zshiftb = 0;
//        int ybendt = 0;
//        int ybendb = 0;
//        int redleft = 0;

//        Pix expResult = null;
//        Pix result = instance.pixWarpStereoscopic(pixs, zbend, zshiftt, zshiftb, ybendt, ybendb, redleft);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixStretchHorizontal method, of class Leptonica.
//     */
//    @Test
//    public void testPixStretchHorizontal() {
//        System.out.println("pixStretchHorizontal");
//        Pix pixs = null;
//        int dir = 0;
//        int type = 0;
//        int hmax = 0;
//        int operation = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixStretchHorizontal(pixs, dir, type, hmax, operation, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixStretchHorizontalSampled method, of class Leptonica.
//     */
//    @Test
//    public void testPixStretchHorizontalSampled() {
//        System.out.println("pixStretchHorizontalSampled");
//        Pix pixs = null;
//        int dir = 0;
//        int type = 0;
//        int hmax = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixStretchHorizontalSampled(pixs, dir, type, hmax, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixStretchHorizontalLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixStretchHorizontalLI() {
//        System.out.println("pixStretchHorizontalLI");
//        Pix pixs = null;
//        int dir = 0;
//        int type = 0;
//        int hmax = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixStretchHorizontalLI(pixs, dir, type, hmax, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuadraticVShear method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuadraticVShear() {
//        System.out.println("pixQuadraticVShear");
//        Pix pixs = null;
//        int dir = 0;
//        int vmaxt = 0;
//        int vmaxb = 0;
//        int operation = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixQuadraticVShear(pixs, dir, vmaxt, vmaxb, operation, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuadraticVShearSampled method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuadraticVShearSampled() {
//        System.out.println("pixQuadraticVShearSampled");
//        Pix pixs = null;
//        int dir = 0;
//        int vmaxt = 0;
//        int vmaxb = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixQuadraticVShearSampled(pixs, dir, vmaxt, vmaxb, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixQuadraticVShearLI method, of class Leptonica.
//     */
//    @Test
//    public void testPixQuadraticVShearLI() {
//        System.out.println("pixQuadraticVShearLI");
//        Pix pixs = null;
//        int dir = 0;
//        int vmaxt = 0;
//        int vmaxb = 0;
//        int incolor = 0;

//        Pix expResult = null;
//        Pix result = instance.pixQuadraticVShearLI(pixs, dir, vmaxt, vmaxb, incolor);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixStereoFromPair method, of class Leptonica.
//     */
//    @Test
//    public void testPixStereoFromPair() {
//        System.out.println("pixStereoFromPair");
//        Pix pix1 = null;
//        Pix pix2 = null;
//        float rwt = 0.0F;
//        float gwt = 0.0F;
//        float bwt = 0.0F;

//        Pix expResult = null;
//        Pix result = instance.pixStereoFromPair(pix1, pix2, rwt, gwt, bwt);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedCreate method, of class Leptonica.
//     */
//    @Test
//    public void testWshedCreate() {
//        System.out.println("wshedCreate");
//        Pix pixs = null;
//        Pix pixm = null;
//        int mindepth = 0;
//        int debugflag = 0;

//        L_WShed expResult = null;
//        L_WShed result = instance.wshedCreate(pixs, pixm, mindepth, debugflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedDestroy method, of class Leptonica.
//     */
//    @Test
//    public void testWshedDestroy() {
//        System.out.println("wshedDestroy");
//        L_WShed.ByReference[] pwshed = null;

//        instance.wshedDestroy(pwshed);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedApply method, of class Leptonica.
//     */
//    @Test
//    public void testWshedApply() {
//        System.out.println("wshedApply");
//        L_WShed wshed = null;

//        int expResult = 0;
//        int result = instance.wshedApply(wshed);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedBasins method, of class Leptonica.
//     */
//    @Test
//    public void testWshedBasins() {
//        System.out.println("wshedBasins");
//        L_WShed wshed = null;
//        Pixa.ByReference[] ppixa = null;
//        Numa.ByReference[] pnalevels = null;

//        int expResult = 0;
//        int result = instance.wshedBasins(wshed, ppixa, pnalevels);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedRenderFill method, of class Leptonica.
//     */
//    @Test
//    public void testWshedRenderFill() {
//        System.out.println("wshedRenderFill");
//        L_WShed wshed = null;

//        Pix expResult = null;
//        Pix result = instance.wshedRenderFill(wshed);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of wshedRenderColors method, of class Leptonica.
//     */
//    @Test
//    public void testWshedRenderColors() {
//        System.out.println("wshedRenderColors");
//        L_WShed wshed = null;

//        Pix expResult = null;
//        Pix result = instance.wshedRenderColors(wshed);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadStreamWebP method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadStreamWebP() {
//        System.out.println("pixReadStreamWebP");
//        PointerByReference fp = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadStreamWebP(fp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixReadMemWebP method, of class Leptonica.
//     */
//    @Test
//    public void testPixReadMemWebP() {
//        System.out.println("pixReadMemWebP");
//        ByteBuffer filedata = null;
//        NativeSize filesize = null;

//        Pix expResult = null;
//        Pix result = instance.pixReadMemWebP(filedata, filesize);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderWebP method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderWebP() {
//        System.out.println("readHeaderWebP");
//        String filename = "";
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderWebP(filename, pw, ph, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of readHeaderMemWebP method, of class Leptonica.
//     */
//    @Test
//    public void testReadHeaderMemWebP() {
//        System.out.println("readHeaderMemWebP");
//        ByteBuffer data = null;
//        NativeSize size = null;
//        IntBuffer pw = null;
//        IntBuffer ph = null;
//        IntBuffer pspp = null;

//        int expResult = 0;
//        int result = instance.readHeaderMemWebP(data, size, pw, ph, pspp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteWebP method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteWebP() {
//        System.out.println("pixWriteWebP");
//        String filename = "";
//        Pix pixs = null;
//        int quality = 0;
//        int lossless = 0;

//        int expResult = 0;
//        int result = instance.pixWriteWebP(filename, pixs, quality, lossless);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStreamWebP method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStreamWebP() {
//        System.out.println("pixWriteStreamWebP");
//        PointerByReference fp = null;
//        Pix pixs = null;
//        int quality = 0;
//        int lossless = 0;

//        int expResult = 0;
//        int result = instance.pixWriteStreamWebP(fp, pixs, quality, lossless);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMemWebP method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMemWebP() {
//        System.out.println("pixWriteMemWebP");
//        PointerByReference pencdata = null;
//        NativeSizeByReference pencsize = null;
//        Pix pixs = null;
//        int quality = 0;
//        int lossless = 0;

//        int expResult = 0;
//        int result = instance.pixWriteMemWebP(pencdata, pencsize, pixs, quality, lossless);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixaWriteFiles method, of class Leptonica.
//     */
//    @Test
//    public void testPixaWriteFiles() {
//        System.out.println("pixaWriteFiles");
//        String rootname = "";
//        Pixa pixa = null;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.pixaWriteFiles(rootname, pixa, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPixWrite() {
//        System.out.println("pixWrite");
//        String filename = "";
//        Pix pix = null;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.pixWrite(filename, pix, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteStream method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteStream() {
//        System.out.println("pixWriteStream");
//        PointerByReference fp = null;
//        Pix pix = null;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.pixWriteStream(fp, pix, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteImpliedFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteImpliedFormat() {
//        System.out.println("pixWriteImpliedFormat");
//        String filename = "";
//        Pix pix = null;
//        int quality = 0;
//        int progressive = 0;

//        int expResult = 0;
//        int result = instance.pixWriteImpliedFormat(filename, pix, quality, progressive);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteTempfile method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteTempfile() {
//        System.out.println("pixWriteTempfile");
//        String dir = "";
//        String tail = "";
//        Pix pix = null;
//        int format = 0;
//        PointerByReference pfilename = null;

//        int expResult = 0;
//        int result = instance.pixWriteTempfile(dir, tail, pix, format, pfilename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixChooseOutputFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixChooseOutputFormat() {
//        System.out.println("pixChooseOutputFormat");
//        Pix pix = null;

//        int expResult = 0;
//        int result = instance.pixChooseOutputFormat(pix);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getImpliedFileFormat method, of class Leptonica.
//     */
//    @Test
//    public void testGetImpliedFileFormat() {
//        System.out.println("getImpliedFileFormat");
//        String filename = "";

//        int expResult = 0;
//        int result = instance.getImpliedFileFormat(filename);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of getFormatExtension method, of class Leptonica.
//     */
//    @Test
//    public void testGetFormatExtension() {
//        System.out.println("getFormatExtension");
//        int format = 0;

//        Pointer expResult = null;
//        Pointer result = instance.getFormatExtension(format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixWriteMem method, of class Leptonica.
//     */
//    @Test
//    public void testPixWriteMem() {
//        System.out.println("pixWriteMem");
//        PointerByReference pdata = null;
//        NativeSizeByReference psize = null;
//        Pix pix = null;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.pixWriteMem(pdata, psize, pix, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplay method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplay() {
//        System.out.println("pixDisplay");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;

//        int expResult = 0;
//        int result = instance.pixDisplay(pixs, x, y);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayWithTitle method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayWithTitle() {
//        System.out.println("pixDisplayWithTitle");
//        Pix pixs = null;
//        int x = 0;
//        int y = 0;
//        String title = "";
//        int dispflag = 0;

//        int expResult = 0;
//        int result = instance.pixDisplayWithTitle(pixs, x, y, title, dispflag);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayMultiple method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayMultiple() {
//        System.out.println("pixDisplayMultiple");
//        String filepattern = "";

//        int expResult = 0;
//        int result = instance.pixDisplayMultiple(filepattern);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayWrite method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayWrite() {
//        System.out.println("pixDisplayWrite");
//        Pix pixs = null;
//        int reduction = 0;

//        int expResult = 0;
//        int result = instance.pixDisplayWrite(pixs, reduction);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixDisplayWriteFormat method, of class Leptonica.
//     */
//    @Test
//    public void testPixDisplayWriteFormat() {
//        System.out.println("pixDisplayWriteFormat");
//        Pix pixs = null;
//        int reduction = 0;
//        int format = 0;

//        int expResult = 0;
//        int result = instance.pixDisplayWriteFormat(pixs, reduction, format);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSaveTiled method, of class Leptonica.
//     */
//    @Test
//    public void testPixSaveTiled() {
//        System.out.println("pixSaveTiled");
//        Pix pixs = null;
//        Pixa pixa = null;
//        float scalefactor = 0.0F;
//        int newrow = 0;
//        int space = 0;
//        int dp = 0;

//        int expResult = 0;
//        int result = instance.pixSaveTiled(pixs, pixa, scalefactor, newrow, space, dp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSaveTiledOutline method, of class Leptonica.
//     */
//    @Test
//    public void testPixSaveTiledOutline() {
//        System.out.println("pixSaveTiledOutline");
//        Pix pixs = null;
//        Pixa pixa = null;
//        float scalefactor = 0.0F;
//        int newrow = 0;
//        int space = 0;
//        int linewidth = 0;
//        int dp = 0;

//        int expResult = 0;
//        int result = instance.pixSaveTiledOutline(pixs, pixa, scalefactor, newrow, space, linewidth, dp);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of pixSaveTiledWithText method, of class Leptonica.
//     */
//    @Test
//    public void testPixSaveTiledWithText() {
//        System.out.println("pixSaveTiledWithText");
//        Pix pixs = null;
//        Pixa pixa = null;
//        int outwidth = 0;
//        int newrow = 0;
//        int space = 0;
//        int linewidth = 0;
//        L_Bmf bmf = null;
//        String textstr = "";
//        int val = 0;
//        int location = 0;

//        int expResult = 0;
//        int result = instance.pixSaveTiledWithText(pixs, pixa, outwidth, newrow, space, linewidth, bmf, textstr, val, location);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of l_chooseDisplayProg method, of class Leptonica.
//     */
//    @Test
//    public void testL_chooseDisplayProg() {
//        System.out.println("l_chooseDisplayProg");
//        int selection = 0;

//        instance.l_chooseDisplayProg(selection);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of zlibCompress method, of class Leptonica.
//     */
//    @Test
//    public void testZlibCompress() {
//        System.out.println("zlibCompress");
//        ByteBuffer datain = null;
//        NativeSize nin = null;
//        NativeSizeByReference pnout = null;

//        Pointer expResult = null;
//        Pointer result = instance.zlibCompress(datain, nin, pnout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }
//
//    /**
//     * Test of zlibUncompress method, of class Leptonica.
//     */
//    @Test
//    public void testZlibUncompress() {
//        System.out.println("zlibUncompress");
//        ByteBuffer datain = null;
//        NativeSize nin = null;
//        NativeSizeByReference pnout = null;

//        Pointer expResult = null;
//        Pointer result = instance.zlibUncompress(datain, nin, pnout);
//        assertEquals(expResult, result);
//        // TODO review the generated test code and remove the default call to fail.
//        fail("The test case is a prototype.");
//    }

}
